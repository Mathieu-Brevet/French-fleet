---
title: "French Fleet Effort"
author: "Mathieu Brevet"
format: html
editor: source
toc: true # [false, true] Include a table of contents in the document
number-sections: true # [false, true] Should section headings be numbered?
---

This project aims to build a tool allowing to classify a followed set of fishing vessels into different functional fishing fleets. We will work first on the fishing vessels in the Bay of Biscay from 2000 to 2022, as a case study. Classification of vessels is performed by considering the yearly activity of each vessel in a given geographical area (a vessel could therefore change of fleet among years), i.e. the species targeted, fishing engines, fishing zones, economic activity, distribution of the activity among seasons, as well as the vessels' characteristics.

```{r loading used packages and functions}

# Coded on R version 4.3.1 ("Beagle Scouts"), Rstudio version "Mountain Hydrangea" (2023.06.0)



library(stringr) # string processing package

library(vegan) #computation of diversity indexes 

library(kableExtra) # conversion/modification of table in different format (e.g. from R format to Latex format)

library(data.table) #more efficient management of large data sets

library(microbenchmark) # assess efficiency of codes (in system time)

library(RVAideMemoire) #used for post-hoc tests in exploratory analyses




library(arules)
library(arulesViz) # packages on association rule mining (“market-basket” model of data), "A-priori" algorithm allowing to identify most associated categories




sumna <- function(x) {
    ret <- sum(x, na.rm = TRUE)
    if(ret == 0 && all(is.na(x))) {NA_real_} else {ret}
}



lengthna <- function(x) {
    ret <- length(x)
    if(all(is.na(x))) {NA_integer_} else {ret}
}



maxna <- function(x) {
    ret <- suppressWarnings(max(x, na.rm=T))
    if(all(is.na(x))) {NA_real_} else {ret}
}





  pop.sd <- function(x) sqrt(sum((x - mean(x))^2)/(length(x)))
  
  #population sd (biased estimate: divided by n not by n-1, necessary here because we want vessels with only one values to be categorized as vessels with null variance and not as vessels with missing variance)

```

## Data acquisition

We need first to retrieve the data from their original location, and process it to keep only the information of interest (fished species, fishing engines, fishing zones, fishing activity, economic activity, as well as the vessels' characteristics). In a standardized framework input data should have the same format than what we used here.

```{r retrieve data}

#1) First step: extracting all vessels' data per year, selecting variables of interest for our classification, selecting vessels operating in our area of interest (Bay of Biscay), sum up data per year and per vessel, concatenate all data

#vessels operating in the Bay of Biscay are defined as vessels with at least one fishing event in the bay of Biscay (areas 27.8.a and 27.8.b), all fishing operation (including outside of the Bay of Biscay) are then considered for the classification into fleets(to avoid misclassification of vessels operating a certain way only in the bay that is not consistent with their original specifities) 





#data treatment from 2000 to 2022 :

SACROIS=data.table()



for (i in 2000:2023) {  #the year 2023 is included to take into account the marees beginning in 2022 and ending in 2023 (including not negligible amount of data about the end of 2022)
  
  setwd(paste0('~/Data/SACROIS/',i));
  
  SACROIS<-rbind(fread(paste0("NAVIRES-MOIS-MAREES-JOUR-IFR_",i,".txt"), dec=",", select= c("NAVS_COD","MAREE_ID","PAVILLON","LIEU_COD_DEP_SACROIS","LIEU_COD_RET_SACROIS","TPS_MER", "SEQ_ID","DATE_SEQ","METIER_COD_SACROIS","ENGIN_COD","MAILLAGE","DIMENSION","SECT_COD_SACROIS_NIV3","SECT_COD_SACROIS_NIV4","SECT_COD_SACROIS_NIV5","SECT_COD_SACROIS_NIV6","GRADIENT_COD","ZEE_COD","TP_NAVIRE_SACROIS","CAPT_ID","ESP_COD_FAO","STOCK_ORGP","QUANT_POIDS_VIF_SACROIS","MONTANT_EUROS_SACROIS")), SACROIS);
  
  SACROIS=SACROIS[NAVS_COD!="",];         #removal of vessels without id
  
  SACROIS[,NAVS_COD_YEAR:=paste(SACROIS[,NAVS_COD], str_sub(SACROIS[,DATE_SEQ],7,10), sep="_")];   #produce a unique ID per vessel ad per year
  
  select_biscay=
    tapply(SACROIS[,SECT_COD_SACROIS_NIV3], SACROIS[,NAVS_COD_YEAR],
                     function(x) ("27.8.a" %in% x | "27.8.b" %in% x) );
  
  SACROIS=
    SACROIS[NAVS_COD_YEAR %in% names(select_biscay[select_biscay]),];      #selection of vessels with activity in the bay of biscay (discarding vessels the years they have no activity in the bay of Biscay)
  
  SACROIS[,NAVS_COD_YEAR:=NULL]     #removing the extra column to be able to bind data table
}


SACROIS[,NAVS_COD_YEAR:=paste(SACROIS[,NAVS_COD], str_sub(SACROIS[,DATE_SEQ],7,10), sep="_")]  #produce a unique ID per vessel ad per year





#minimal requirement for being able to run the previous section: 32GB of RAM



#important notice: the last studied year (here 2022) does not take into account overlapping marees (between this year and the following one): have to be corrected by taking the following year into account during computation and then removing it at the end !!!! Important to do  because represent a non-negligible amount of data at the end of the year






#intermediary steps (selection vessels with valid IDs, selection of active vessels) are not necessary at this level (time consuming to do it for each year, would be faster if performed after in a row) but are mandatory here due to limited available memory


rm(select_biscay)
gc() #garbage collection, free unused memory usage




#Variables choices:
# - data may vary in their accuracy according to the way they have been collected, for the moment we will consider that the work performed by SACROIS is sufficiently well done to not consider the data origins, or metrics indicating how data sources overlap
# - the existing metier and fleet classification will be kept to compare the final classification with the previous ones
# - when different estimation methods co-exist for a same metric we always favored the SACROIS method (except for engines because in this particular case SACROIS estimates used engines from an algorithm using complex rule of decision and not directly from observations or declarations, to avoid any influence from other classifications we set apart this estimation)
# - position data at the fishing position level (statistical unit, SECT_COD_NIV7) is too imprecise to be used (massive amount of missing data). No interest of using position data below ICES division precision (SECT_COD_SACROIS_NIV3<,not sufficiently precise) 








library(dplyr)
library(arrow)

ds<-open_dataset("C:/Users/mbrevet/Documents/Data/SACROIS/simplesacrois")

ds<-ds%>%filter(AN %in% 2000:2023)%>%
      filter(SEQ_ID %in% unique(SACROIS[,SEQ_ID])) %>%
      select(SEQ_ID, TP_NAVIRE_SACROIS) %>%collect

setDT(ds)


ds=ds[!duplicated(ds$SEQ_ID),]


table(is.na(ds[,TP_NAVIRE_SACROIS])) #~27% of missing values (almost equivalent proportion to what observed in the actual effort metrics)


#setdiff(SACROIS[!duplicated(SEQ_ID),SEQ_ID], ds[,SEQ_ID])




# problematic issue: missing fishing sequences in the "simplesacrois" files (from 2019 to 2022: 14 786 sequences, i.e. ~1% of data, with the vast majority missing in 2022, i.e. 98.5% representing ~4% of sequences in 2022, and some missing values in 2021)




colnames(ds)[2]="TP_NAVIRE_SACROIS_CORR"
SACROIS=merge(SACROIS, ds, all.x=T)

# Recovery of effort data corrected for SACROIS


rm(ds)
gc()




#Checking if there is no duplicated lines:

any(duplicated(SACROIS))







#2) Second step: extracting the data on the vessels' characteristics for all retained vessels






FPC=data.table()



for (i in 2000:2023) {
  
  setwd(paste0('~/Data/SACROIS/',i));
  
  FPC<-rbind(fread(dir(getwd(), pattern="ISIH-504549-vueAnnuelleFpc"), dec=",", encoding="Latin-1", select= c("NAVS_COD","DATE_REF","QAM_COD","SRG_COD","PORT_EXPL_ACT_COD","CARN_AGE","NAVP_LONGUEUR_HT","NAVP_JAUGE_GT","NAVP_PUISSANCE_AD","ARM_AGE","CARN_EFFECTIF","NB_MOIS_ACT","RA_ACT_LIB","ENG1","ENG2","FLOTTILLE_IFREMER_LIB","S_FLOTTILLE_IFREMER_LIB","S_S_FLOTTILLE_IFREMER_LIB","DCR_GRANDE_FLOTTILLE_LIB","DCR_SEGMENT_CE_LIB","DCR_FLOTTILLE_LIB","DCR_S_FLOTTILLE_LIB","DCR_S_S_FLOTTILLE_LIB","ART_RESTIT_LIB","FLOTTILLE_RESTIT_LIB","S_FLOTTILLE_RESTIT_LIB","S_S_FLOTTILLE_RESTIT_LIB","BZH_FLOTTILLE_LIB","BZH_S_FLOTTILLE_LIB")), FPC)
}


FPC$NAVS_COD_YEAR=paste(FPC[,NAVS_COD], str_sub(FPC[,DATE_REF],7,10), sep="_")  #produce a unique ID per vessel ad per year


FPC[,c("DATE_REF", "NAVS_COD"):=NULL]


FPC=FPC[NAVS_COD_YEAR %in% unique(SACROIS[,NAVS_COD_YEAR]),]       #selection of retained vessels





#Variables choices:
#-some variables bring new information on vessels characteristics through surveys or administrative declaration (vessels' size, age, tonnage, engine power, size of the crew)
#-other variables are also accessible from SACROIS, but may be more precise due to data on surveys that may compensate inaccuracy common in SACROIS data (main harbor, exploited regions, period and zone of activity, used fishing engines)
# => the latter variables could be optional in the final version for better reproducibility ? (not sure about availability of these data + redundant compared to global data based information from SACROIS)
#- we also retained all data on fleet classification that had been previously made (IFREMER, DCR, Art, Restitution and BZH fleets), to compare them to the classification we will achieve here







#3) Third step: creation of a new data frame containing data per vessel and adding yearly activity metrics (fishing effort, amount of captured fishes corrected by fishing effort, absolute amount of fish, proportion of fished species, seasonal activity, geographical distribution: time spent in each area / percentage of occupation of each area / activity in each area, economic activity, engine activity: mesh and net size / type of net) 


data_vessel=data.table(names(table(SACROIS[,NAVS_COD_YEAR])))

colnames(data_vessel)<-"NAVS_COD_YEAR"




#Inclusion of ship characteristics (FPC file):


data_vessel=merge(data_vessel, FPC, all.x=T)

remove(FPC) # removes table without any more use, to avoid memory overload
gc()


```




###Taxon definition

We first more precisely described the fished taxa.


```{r Fished taxa}

SACROIS[ESP_COD_FAO=="",ESP_COD_FAO:=NA]



  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "ESP_COD_FAO")$. 

table(isallNA) 

#checking that there are no vessels with only missing data => 0.2% in 2019->2022




table(
    dcast(SACROIS,
          SEQ_ID ~ ., 
          fun.aggregate = function(x) mean(tapply(x,x, length), na.rm=T)==1,
          value.var = "ESP_COD_FAO")$.  ) #test whether the same taxon could be caught in the same fishing sequence (we expect not, i.e. all test=TRUE) ==> Major issue ! some sequences (0.7% between 2019 and 2022) have several time the same taxon in it what should be impossible




#in the cases of duplicated fished taxa, we merged the duplicated lines:


SACROIS[,fish_event:=paste(SACROIS[,ESP_COD_FAO], SACROIS[,SEQ_ID])]

setorder(SACROIS, fish_event)




SACROIS[!duplicated(fish_event), QUANT_POIDS_VIF_SACROIS:=dcast(
  SACROIS,
        fish_event~.,
          fun.aggregate = sumna, 
              value.var     = "QUANT_POIDS_VIF_SACROIS")$.]
  

SACROIS[!duplicated(fish_event), MONTANT_EUROS_SACROIS:=dcast(
  SACROIS,
        fish_event~.,
          fun.aggregate = sumna, 
              value.var     = "MONTANT_EUROS_SACROIS")$.]



SACROIS=SACROIS[!duplicated(fish_event),]


SACROIS[,fish_event:=NULL]





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "ESP_COD_FAO")$.  
    
    table(isNA)
#warning:  even when considering vessels with data on fished taxa, some vessels (25% in 2023) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "ESP_COD_FAO")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "ESP_COD_FAO")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 2.3% +/- 6.5 SD (in 2023) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(ESP_COD_FAO),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(ESP_COD_FAO),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred


# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$ESP_COD_FAO)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier (some filet maillants, chaluts à boeufs...) are significantly associated to the presence or not of missing data on fished taxa










setwd("~/Data/SACROIS")

Code_FAO<-fread("ISIH-504549-espece_fao-20230320105303.txt")





setdiff(SACROIS[,ESP_COD_FAO], Code_FAO[,ESPF_COD]) # check whether there is FAO code without correspondence in the SACROIS dataset ==> this is the case only for "ZZ9" (=species out of context), corresponding to non-commercial species (marine birds, snakes...)


#five classification levels are registered in the FAO nomenclature: 1) species, 2) group of species (warning: not equal to genus), 3) family, 4) order, 5) commercial group of species (code ISSCAP) (warning: in most of cases a code ISSCAP include several family and order, but in some cases reverse is also true)

#warning: group of species classification does not always exist (if it does not: keep the species level)

#warning: the classification is sometimes phylogenetically inaccurate (para- or poly-phyletic: groupment of two families or species, incomplete order), they are labelled by supplementary numbers after "X" notations in the "taxon code" column





SACROIS=merge(SACROIS, Code_FAO[, .(ESPF_COD,ESPF_TAXON_COD)], by.x="ESP_COD_FAO", by.y ="ESPF_COD", all.x = T, all.y=F, sort=F ) #add a column with the species specific FAO code (information on the taxon level through the number of "X" present in the code)


SACROIS[ESP_COD_FAO!="ZZ9" & !is.na(ESP_COD_FAO), taxon_precision := lapply(.SD, function(x) str_count(x, "X")), .SDcols = "ESPF_TAXON_COD"] # assign the best level of precision for the taxonomic classification (0: species / 2: group of species / 5: family / 7: order)


SACROIS[,ESPF_TAXON_COD:=NULL] #removing extracolumns


# in 2023, 85% of cases: species precision / 95%: group of species precision / order precision: only 0.5% (mainly concerns crustaceans, urchins and flatfishes)   



# Creation of a new column, specific to commercial species, with attribution of NA values when not knowing the fished (non-commercial) species:   (these species could be studied through accidental bycatch files)

SACROIS[taxon_precision==0, ESP2_COD_FAO:=ESP_COD_FAO]



#Warning: some species have been attributed to different families in columns "ESPF_SCI_LIB" and "FAMILLE" (due to recent discussions on the taxonomy), in such cases the most recent classification was applied, corrected below:


Code_FAO[ESPF_COD %in% c("USK","SLI"),FAMILLE:="Gadidae"]

Code_FAO[ESPF_COD=="CRG",FAMILLE:="Portunidae"]


Code_FAO[ESPF_COD=="LIO",ESPF_PARENT_SCI_LIB:="Polybiidae"]

Code_FAO[ESPF_COD == "TJX",FAMILLE:="Scorpaenidae"]

Code_FAO[ESPF_COD == "CFB",ESPF_PARENT_SCI_LIB:="Etmopteridae"]


Code_FAO[ESPF_COD == "ATB",FAMILLE:="Atherinidae"] #wrong attribution of a subfamily



Code_FAO[FAMILLE=="Somniosidae" & ESPF_PARENT_SCI_LIB=="Squalidae", ESPF_PARENT_SCI_LIB:="Somniosidae"]

Code_FAO[FAMILLE=="Dalatiidae", ESPF_PARENT_SCI_LIB:="Dalatiidae"]








SACROIS=merge(SACROIS, Code_FAO[, .(ESPF_COD,ESPF_SCI_LIB,ESPF_PARENT_SCI_LIB,FAMILLE)], by.x="ESP_COD_FAO", by.y ="ESPF_COD", all.x = T, all.y=F, sort=F) # addition in the dataset of the columns: 1) scientific name of the taxon, 2) scientific names of the taxon upper the taxon of interest, 3) Taxonomic family of the taxon of interest



#"SPP_COD_FAO" attribute group of species taxon level:

SACROIS[taxon_precision==2, SPP_COD_FAO:=ESPF_SCI_LIB] #when the FAO code correspond to a group of species, attribution of the scientific name of the group

SACROIS[taxon_precision==0, SPP_COD_FAO:=ESPF_PARENT_SCI_LIB] #when the FAO code correspond to a species, attribution to the upper taxon name (i.e. group of species, with some exceptions => see next line)

SACROIS[SPP_COD_FAO==FAMILLE, SPP_COD_FAO:=ESPF_SCI_LIB] #in the specific cases where the upper taxonomic group is beyond the group of species level (directly family level) or is not informed, re-attribution of the species name (considered as a group of species in itself)



SACROIS[,ESPF_PARENT_SCI_LIB:=NULL] #removing extracolumns


##Another way of writing it (but more than a hundred time less efficient as assessed by microbenchmark):
#SACROIS[, SPP_COD_FAO2 := ifelse(taxon_precision==2, ESPF_SCI_LIB, ifelse( taxon_precision==0 & ESPF_PARENT_SCI_LIB==FAMILLE, ESPF_SCI_LIB, ifelse(taxon_precision==0 & ESPF_PARENT_SCI_LIB!=FAMILLE, ESPF_PARENT_SCI_LIB, NA)))]




#in the bay of biscay there is only two Alosa present: therefore we can group "Alosa spp" and "Alosa alosa, A. fallax" categories:


SACROIS[SPP_COD_FAO=="Alosa alosa, A. fallax",SPP_COD_FAO:="Alosa spp"]






#"FAMILY_COD_FAO" attribute family taxon level:

SACROIS[taxon_precision==5, FAMILY_COD_FAO:=ESPF_SCI_LIB] #when the FAO code correspond to a family, attribution of the scientific name of the family

SACROIS=merge(SACROIS, Code_FAO[, .(ESPF_SCI_LIB,ESPF_PARENT_SCI_LIB)], by.x="SPP_COD_FAO", by.y ="ESPF_SCI_LIB", all.x = T, all.y=F, sort=F) #add a column with the scientific name of the taxon upper the group of species category

SACROIS[taxon_precision<5, FAMILY_COD_FAO:=ESPF_PARENT_SCI_LIB] #assign the family when the group of species class is known


SACROIS[,c("ESPF_PARENT_SCI_LIB", "FAMILLE"):=NULL] #removing extracolumns


SACROIS[FAMILY_COD_FAO=="Thunnini", FAMILY_COD_FAO:="Scombridae"]
#correction of errors in dataset: some individuals were classified as "Thunnini" at the family level while it is a tribe taxon not a family (right family: Scombridae)




#in some cases two families are grouped (Sepiidae, Sepiolidae / Loliginidae, Ommastrephidae), these categories were kept as such (but maybe the two families at stake could be regrouped in this category), and an order was attributed to them:

Code_FAO[ESPF_PARENT_SCI_LIB=="Sepiidae, Sepiolidae" | ESPF_SCI_LIB=="Sepiidae, Sepiolidae",ORDRE:="Sepiida"]

Code_FAO[Code_FAO$ESPF_PARENT_SCI_LIB=="Loliginidae, Ommastrephidae" | Code_FAO$ESPF_SCI_LIB=="Loliginidae, Ommastrephidae",ORDRE:="Myopsida, Oegopsida"]






#the order is poorly informed in the FAO table, it sometimes appears for one specific taxon level and not for the others, the upper taxon level relatively to the family level was not used because it contains both order and suborder categories 


SACROIS[taxon_precision==7, ORDER_COD_FAO:=ESPF_SCI_LIB] #when the FAO code correspond to an order, attribution of the scientific name of the order

SACROIS=merge(SACROIS, Code_FAO[, .(ESPF_SCI_LIB,ORDRE)], by.x="SPP_COD_FAO", by.y ="ESPF_SCI_LIB", all.x = T, all.y=F, sort=F)



Code_FAO[ESPF_COD =="FGX",ESPF_SCI_LIB:="Gobiidae (Freshwater)"]
Code_FAO[ESPF_COD =="PPZ",ESPF_SCI_LIB:="Palaemonidae (Freshwater)"]


SACROIS=merge(SACROIS, Code_FAO[, .(ESPF_SCI_LIB,ORDRE)], by.x="FAMILY_COD_FAO", by.y ="ESPF_SCI_LIB", all.x = T, all.y=F, sort=F, no.dups=T)
#attribute order at the different taxa level (to compensate for incomplete data)


SACROIS[,ORDRE.y:=ORDRE.y[!is.na(ORDRE.y)][1], by=.(FAMILY_COD_FAO)]#Attribute the same order to all species in the same family



SACROIS[taxon_precision<7, ORDER_COD_FAO:=ORDRE.x]


SACROIS[taxon_precision<7 & is.na(ORDER_COD_FAO), ORDER_COD_FAO:=ORDRE.y]



SACROIS[,c("ESPF_SCI_LIB", "ORDRE.x","ORDRE.y"):=NULL] #removing extracolumns



#Correction of some attribution errors:

SACROIS[ORDER_COD_FAO=="Brachyura",ORDER_COD_FAO:="Decapoda" ]#suborder to order

SACROIS[ORDER_COD_FAO=="Siluroidei",ORDER_COD_FAO:="Siluriformes"] #suborder to order

SACROIS[ORDER_COD_FAO=="Clupeoidei",ORDER_COD_FAO:="Clupeiformes"] #suborder to order


SACROIS[FAMILY_COD_FAO=="Mactridae",ORDER_COD_FAO:="Venerida"]

SACROIS[FAMILY_COD_FAO=="Patellidae",ORDER_COD_FAO:="Patellogastropoda"]

SACROIS[FAMILY_COD_FAO=="Haliotidae",ORDER_COD_FAO:="Vetigastropoda"]




#Warning: the order classification mix order groups,with class (Actinopterygii, Cephalopoda, Bivalvia) and subphylum (Crustacea, Echinoidea), there is also obsolete, paraphyletic groups (e.g. Reptantia/Natantia)


#before publication: need to correct the huge amount of phylogenetic errors ? (re-attribution to right groups / harmonization of order in the same taxonomic level, i.e. removing too high level ? risk of losing specific fisheries, e.g. Echinoidea)




SACROIS=merge(SACROIS, Code_FAO[, .(ESPF_COD,ESPF_ISSCAP)], by.x="ESP_COD_FAO", by.y ="ESPF_COD", all.x = T, all.y=F, sort=F)

SACROIS[!is.na(taxon_precision), ISSCAAP_COD_FAO:=ESPF_ISSCAP] #attribute the corresponding ISCAAP code for each species


SACROIS[,ESPF_ISSCAP:=NULL] #removing extracolumns





rm(Code_FAO)
gc()




```









## Creation of a set of detailed variables


From the initial variables we retained, we then create new variables describing the fishing activity per vessel and per year. Some of these variables simply describe the constant characteristics of the vessel within a year, while others describe how some fishing activity variable value behave along the year (average value, main categories, variation in values, etc.).




### Effort metrics

We first describe the fishing effort (duration of marees, sequence, time at sea)


#### Marees and fishing sequence number

```{r Effort metrics - Events number}

setorder(SACROIS, NAVS_COD_YEAR)





data_vessel[,value_nb_marees_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) length(unique(x)),
          value.var = "MAREE_ID")[,.] ]  # compute the yearly number of marees per vessel



data_vessel[,value_nb_seq_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) length(unique(x)),
          value.var = "SEQ_ID")[,.] ]  # compute the yearly number of fishing sequences per vessel







data_vessel[,mean_nb_seq_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) length(unique(x)),
        value.var = "SEQ_ID")   #computation of sequence number per marees
          [,mean(.),by = 
              SACROIS [order(MAREE_ID)] [!duplicated(MAREE_ID),NAVS_COD_YEAR]] #mean of sequence number per vessels (need to reorder vessels' ID to match order produced by "dcast" function) (TO BE NOTICED: for marees overlapping two years, marees were attributed to the year in which it began, through the use of "!duplicated(MAREE_ID)")
            [order(SACROIS)] #reordering the estimate in function of vessels' ID
              [,V1] ] 
# compute the average number of fishing sequences per marees for each vessel 



data_vessel[,sd_nb_seq_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) length(unique(x)),
        value.var = "SEQ_ID")
          [,pop.sd(.),by = 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR]]
            [order(SACROIS)]
              [,V1] ] 
# compute the variation (standard deviation) in the number of fishing sequences per marees for each vessel 



#to be noticed: the latter metrics are quite imprecise due to the presence of sales-only data that arbitrary associate a sale event to one maree and one fishing sequence ! 

```




####Fishing effort

```{r Effort metrics - Fishing effort}


#Warning: the fishing time used here is rather imprecise for some engines (as passive gears) ==> to be replaced by an updated version of effort (see "simplesacrois")



#there is some fishing effort value set to 0, these values represent very short fishing sequence(<1 min) and are therefore not equivalent to NA. Presence of such value should be kept in mind when dividing by fishing effort (produce infinite values that should be replaced by NAs, to be noticed: will not be a problem for all proportion metrics as 0/0 return NA, in this particular case we will consider that effort is too low to produce robust proportion estimates as it may imply addition of several very low effort)


length(SACROIS[TP_NAVIRE_SACROIS==0, TP_NAVIRE_SACROIS])





table(dcast(SACROIS[!is.na(TP_NAVIRE_SACROIS),],
            SEQ_ID ~ ., 
            fun.aggregate = function(x) length(unique(x))==1,
            value.var = "TP_NAVIRE_SACROIS")[,.])  #test whether the fishing effort could change during a fishing sequence (we expect not, i.e. all test=TRUE)



  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "TP_NAVIRE_SACROIS")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 1.8% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "TP_NAVIRE_SACROIS")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on fishing effort, most of vessels (90% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "TP_NAVIRE_SACROIS")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "TP_NAVIRE_SACROIS")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 19% +/- 18 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(TP_NAVIRE_SACROIS),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(TP_NAVIRE_SACROIS),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred


# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$TP_NAVIRE_SACROIS)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier (some filet maillants, chaluts à boeufs...) are significantly associated to the presence or not of missing data on fishing effort

















data_vessel[,value_effort_year:=
    dcast(SACROIS[!duplicated(SEQ_ID),],
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")[,.] ]  #assigns the (yearly) total time spent fishing for each vessels


# To be noticed: this metric is probably highly biased as most of vessels have missing data making comparisons between vessels difficult



    
    
data_vessel$mean_value_effort_seq=
  dcast(SACROIS[!duplicated(SEQ_ID),],
      NAVS_COD_YEAR ~ ., 
      fun.aggregate = function(x) mean(x, na.rm=T),
      value.var = "TP_NAVIRE_SACROIS")[,.]  #assigns the mean time spent fishing for each vessels (basic unit: marée)



data_vessel[,sd_effort_seq:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
      NAVS_COD_YEAR ~ ., 
      fun.aggregate = function(x) pop.sd(na.omit(x)),
      value.var = "TP_NAVIRE_SACROIS")[,.] ]  #assigns the standard deviation of time spent fishing for each vessels (basic unit: marée)







data_vessel[,mean_value_effort_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        MAREE_ID~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [ ,mean(., na.rm=T),by =
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)]
              [,V1] ] 
# assigns the (yearly) average time spent fishing per marées for each vessels



# data_vessel$marees_effort_mean=
# dcast(SACROIS[!duplicated(SEQ_ID),], NAVS_COD_YEAR+MAREE_ID~.,
#       fun.aggregate = sumna,
#       value.var = "TP_NAVIRE_SACROIS")[,mean(., na.rm=T),by = .(NAVS_COD_YEAR)][,V1]  #assigns the (yearly) average time spent fishing per marées for each vessels

#problem with the upper code: does not take into account marees overlapping two years (divide them into two entities)






data_vessel[,sd_effort_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
        MAREE_ID~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [ ,pop.sd(na.omit(.)),by =
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)]
              [,V1] ]
#assigns the (yearly) average time spent fishing per marées for each vessels 











```







####Sea time

```{r Effort metrics - Sea time}




table(dcast(SACROIS[!is.na(TPS_MER),],
            SEQ_ID ~ ., 
            fun.aggregate = function(x) length(unique(x))==1,
            value.var = "TPS_MER")[,.])  #test whether the time at sea could change during a fishing sequence (we expect not, i.e. all test=TRUE)



  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "TPS_MER")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 1.8% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "TPS_MER")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on time at sea, most of vessels (90% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "TPS_MER")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "TPS_MER")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 11% +/- 16 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(TPS_MER),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(TPS_MER),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred


# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$TPS_MER)~SACROIS$METIER_COD_SACROIS, family=binomial))

#we clearly observed that some metier (tremails, palangre... in 2023) are significantly associated to the presence or not of missing data on time spent at sea 







    







data_vessel[,sea_time_year:=
    dcast(SACROIS[!duplicated(MAREE_ID),],
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = sumna,
          value.var = "TPS_MER")[,.] ]  #assigns the (yearly) total time spent at sea for each vessels


# To be noticed: this metric is probably highly biased as most of vessels have missing data making comparisons between vessels difficult





data_vessel[,mean_sea_time_marees:=
  dcast(SACROIS[!duplicated(MAREE_ID),],
        NAVS_COD_YEAR ~ ., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "TPS_MER")[,.] ] #assigns the mean time spent at sea for each vessels (basic unit: marée)



data_vessel[,sd_sea_time_marees:=
  dcast(SACROIS[!duplicated(MAREE_ID),],
        NAVS_COD_YEAR ~ ., 
        fun.aggregate = function(x) pop.sd(na.omit(x)),
        value.var = "TPS_MER")[,.] ]  #assigns the standard deviation of time spent at sea for each vessels (basic unit: marée)











data_vessel$time_efficiency_year=NA

data_vessel[!isallNA, time_efficiency:=
  dcast(SACROIS[!duplicated(SEQ_ID),][!is.na(TPS_MER),],
      NAVS_COD_YEAR ~ ., 
      fun.aggregate = sumna,
      value.var ="TP_NAVIRE_SACROIS")[,.] / dcast(SACROIS[!duplicated(MAREE_ID),],
                                                  NAVS_COD_YEAR ~ ., 
                                                  fun.aggregate = sumna,
                                                  value.var ="TPS_MER")[,.][!isallNA] ]
#assigns the proportion of time spent fishing during the time at sea (yearly), by excluding the cases where the fishing effort is available but not the time spent at sea 

#warning: may be imprecise in the cases where time spent at sea is available but not the fishing effort, partially or not, to have a more precise estimate: we have to remove all vessels having at least one missing value for fishing effort

# this estimate is also imprecise due to marees overlapping two years: here such marees are divided into two subdivision of fishing effort resulting in an underestimation of efficiency (should be negligible at a year scale)



#some vessels have time efficiency values slightly superior to one (<1.001 in most case, with one exception at 1.16) probably due to precision errors, these values are set to 1:

data_vessel[time_efficiency_year>1 & !is.na(time_efficiency_year),time_efficiency_year:=1]









data_vessel[,mean_time_efficiency_marees:=
  as.data.table(
    dcast(SACROIS[!duplicated(SEQ_ID),], 
          MAREE_ID~., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")[,.]/dcast(SACROIS, 
                                                     MAREE_ID~., 
                                                     fun.aggregate = function(x) x[1],
                                                     value.var = "TPS_MER")[,.]) 
            [,mean(V1, na.rm=T),by =
                SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
              [order(SACROIS)]
                [,V1] ]
#assigns the average proportion of time spent fishing during the time at sea (basic unit: marees) 
  


data_vessel[mean_time_efficiency_marees>1 & !is.na(mean_time_efficiency_marees),mean_time_efficiency_marees:=1]




data_vessel[,sd_time_efficiency_marees:=
  as.data.table(
    dcast(SACROIS[!duplicated(SEQ_ID),], 
          MAREE_ID~., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")[,.]/dcast(SACROIS, 
                                                     MAREE_ID~., 
                                                     fun.aggregate = function(x) x[1],
                                                     value.var = "TPS_MER")[,.]) 
            [,pop.sd(na.omit(V1)),by = 
                SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ] 
              [order(SACROIS)] 
                [,V1] ]
#assigns the variability (standard deviation) in the proportion of time spent fishing during the time at sea (basic unit: marees) 







```





###Fishing volumes

#### Weight (and fishing effort by taxa)

##### All taxa

```{r fishing activity - Fishing volumes (weight - all taxa)}





  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "QUANT_POIDS_VIF_SACROIS")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 0.2% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "QUANT_POIDS_VIF_SACROIS")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on fishing mass, many vessels (29% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "QUANT_POIDS_VIF_SACROIS")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "QUANT_POIDS_VIF_SACROIS")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 25% +/- 13 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(QUANT_POIDS_VIF_SACROIS),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(QUANT_POIDS_VIF_SACROIS),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred




# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$QUANT_POIDS_VIF_SACROIS)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier (particularly chaluts, in 2023) are significantly associated to the presence or not of missing data on fished weight (less declaration in these metier ?) 








#warning: even when considering vessels with no data on fishing weight, there is still a high amount of vessels (%) with missing data, making comparisons difficult... (might be smoothed in cases of sequence or maree averaging)







#1) Year scale






data_vessel[,value_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")[,.]]  #amount of fish (weight) per year





SACROIS[,PROD_POIDS:=QUANT_POIDS_VIF_SACROIS/TP_NAVIRE_SACROIS] #fishing productivity (in terms of weight, corrected by fishing effort) 



SACROIS[is.infinite(PROD_POIDS), PROD_POIDS:=NA]






data_vessel[,value_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")[,.]]  
#amount of fish (weight) corrected by fishing effort per year






#2) Maree scale





data_vessel[,mean_value_weight_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [ ,mean(., na.rm=T),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ] 
# mean amount of fish (weight) per maree 





data_vessel[,sd_weight_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [ ,pop.sd(na.omit(.)),by=
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ] 
 # variation (sd) in amount of fish (weight) per maree











data_vessel[,mean_value_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [ ,mean(., na.rm=T),by=
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ] 
            [order(SACROIS)] 
              [,V1] ] 
# mean amount of fish (weight) corrected by fishing effort per maree 





data_vessel[,sd_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS") 
          [ ,pop.sd(na.omit(.)),by=
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ] 
            [order(SACROIS)] 
              [,V1] ] 
 # variation (sd) in amount of fish (weight) corrected by fishing effort per maree 











#3) Sequence scale


data_vessel[,mean_value_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID~.,
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T),by =
              .(NAVS_COD_YEAR)]
            [,V1] ]
 # mean amount of fish (weight) per fishing sequence



data_vessel[,sd_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID~.,
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,pop.sd(na.omit(.)),by =
              .(NAVS_COD_YEAR)]
            [,V1] ]
 # variation (sd) in amount of fish (weight) per fishing sequence








data_vessel[,mean_value_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID~.,
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T),by =
              .(NAVS_COD_YEAR)]
            [,V1]  ]
 # mean amount of fish (weight) corrected by fishing effort per fishing sequence



data_vessel[,sd_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID~.,
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,pop.sd(na.omit(.)),by =
              .(NAVS_COD_YEAR)]
            [,V1]  ] 
 # variation (sd) in amount of fish (weight) corrected by fishing effort per fishing sequence





```

##### Species level

```{r fishing activity - Fishing volumes (weight - species)}




#1) Year scale




#to be noticed: following a dcast na.last=F mandatory if wanting to order the dataset according to a variable with NAs, because dcast order dataset with putting NA firsts !!!!!!!!


data_vessel[,mean_spe_value_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  #removal of occurences for which the species is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) per species 




data_vessel[,sd_spe_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) per species









data_vessel[,mean_spe_value_effort_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean fishing effort per species 




data_vessel[,sd_spe_effort_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in afishing effort per species











data_vessel[,mean_spe_value_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(ESP2_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) corrected by fishing effort per species 




data_vessel[,sd_spe_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(ESP2_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) corrected by fishing effort per species 










#2) Maree scale







data_vessel[,mean_spe_value_weight_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of species captured during the trip
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ] # averaging weight at the species level for each vessel
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean weight computed for each species for each vessel
                  [,V1] ]
 # mean amount of fish (weight) per species and per marees (average amount between species of the average amount per marees for each species)








data_vessel[,sd_spe_weight_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
           [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ESP2_COD_FAO), .:=NA]
              [ ,mean(., na.rm=T),by=
                  .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
                [order(NAVS_COD_YEAR)] 
                  [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                    [,V1] ] 
# variation (sd) between species in the mean amount of fish (weight) per marees 







data_vessel[,mean_spe_value_weight_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the amount of fish (weight) per marees averaged among species







data_vessel[,sd_spe_weight_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between species the variation (sd) in the amount of fish (weight) per marees 




















data_vessel[,mean_spe_value_effort_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing effort per species and per marees (average amount between species of the average amount per marees for each species)








data_vessel[,sd_spe_effort_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between species in the mean fishing effort per marees 







data_vessel[,mean_spe_value_effort_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing effort per marees averaged among species







data_vessel[,sd_spe_effort_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between species the variation (sd) in the fishing effort per marees 


















data_vessel[,mean_spe_value_weight.prod_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing productivity per species and per marees (average amount between species of the average amount per marees for each species)








data_vessel[,sd_spe_weight.prod_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between species in the mean fishing productivity per marees 







data_vessel[,mean_spe_value_weight.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing productivity per marees averaged among species







data_vessel[,sd_spe_weight.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between species the variation (sd) in the fishing productivity per marees 













#3) Sequence scale




data_vessel[,mean_spe_value_weight_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  #removal of occurences for which the species is unknown
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (weight) per species (and per sequence, as there is for each species one weight for each sequence)






data_vessel[,sd_spe_weight_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (weight) per species (and per sequence, as there is for each species one weight for each sequence)





data_vessel[,mean_spe_value_weight_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (weight) per species and per sequence



data_vessel[,sd_spe_weight_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between species the variation (sd) in the amount of fish (weight) per sequence















data_vessel[,mean_spe_value_effort_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean fishing effort per species (and per sequence, as there is for each species one weight for each sequence)






data_vessel[,sd_spe_effort_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in fishing effort per species (and per sequence, as there is for each species one weight for each sequence)





data_vessel[,mean_spe_value_effort_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in fishing effort per species and per sequence



data_vessel[,sd_spe_effort_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA] 
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between species the variation (sd) in the fishing effort per sequence

















data_vessel[,mean_spe_value_weight.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_POIDS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (weight/fishing effort) per species (and per sequence, as there is for each species one weight for each sequence)






data_vessel[,sd_spe_weight.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_POIDS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (weight/fishing effort) per species (and per sequence, as there is for each species one weight for each sequence)





data_vessel[,mean_spe_value_weight.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_POIDS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (weight/fishing effort) per species and per sequence



data_vessel[,sd_spe_weight.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_POIDS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between species the variation (sd) in the amount of fish (weight/fishing effort) per sequence











```

##### Group of species level

```{r fishing activity - Fishing volumes (weight - group of species)}

#to be noticed: for taxa beyond species level, there could be several fishing events per fishing sequence, necessitating to sum weight at the sequence level. This supplementary step is very costly computationally !!!!!!! An alternative would be to consider that the distribution of weight in sequences between taxa should be insufficiently variable to be of interest so we keep to average values between taxon groups (it gives the advantage to be less sensitive to potential missing values, but may be too close to what is already computed at a species level)




#1) Year scale




data_vessel[,mean_spp_value_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(SPP_COD_FAO), .:=NA]  #removal of occurences for which the group of species is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) per group of species 




data_vessel[,sd_spp_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(SPP_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) per group of species









data_vessel[,mean_spp_value_effort_year:=
    dcast(SACROIS,
          subset = .(!duplicated(paste(SEQ_ID, SPP_COD_FAO))), #avoid taking into account the same fishing sequence several time (fishing effort does not vary inside a fishing sequence)
          NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(SPP_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean fishing effort per group of species 




data_vessel[,sd_spp_effort_year:=
    dcast(SACROIS,
          subset = .(!duplicated(paste(SEQ_ID, SPP_COD_FAO))),
          NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(SPP_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in afishing effort per group of species











data_vessel[,mean_spp_value_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(SPP_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) corrected by fishing effort per group of species 




data_vessel[,sd_spp_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(SPP_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) corrected by fishing effort per group of species 










#2) Maree scale






data_vessel[,mean_spp_value_weight_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of group of species captured during the trip
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ] # averaging weight at the group of species level for each vessel
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean weight computed for each group of species for each vessel
                  [,V1] ]
 # mean amount of fish (weight) per group of species and per marees (average amount between group of species of the average amount per marees for each group of species)








data_vessel[,sd_spp_weight_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
           [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SPP_COD_FAO), .:=NA]
              [ ,mean(., na.rm=T),by=
                  .(NAVS_COD_YEAR, SPP_COD_FAO) ]
                [order(NAVS_COD_YEAR)] 
                  [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                    [,V1] ] 
# variation (sd) between group of species in the mean amount of fish (weight) per marees 







data_vessel[,mean_spp_value_weight_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the amount of fish (weight) per marees averaged among group of species







data_vessel[,sd_spp_weight_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between group of species the variation (sd) in the amount of fish (weight) per marees 




















data_vessel[,mean_spp_value_effort_mean_marees:=
  dcast(SACROIS,
      subset = .(!duplicated(paste(SEQ_ID, SPP_COD_FAO))),
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing effort per group of species and per marees (average amount between group of species of the average amount per marees for each group of species)








data_vessel[,sd_spp_effort_mean_marees:=
   dcast(SACROIS,
      subset = .(!duplicated(paste(SEQ_ID, SPP_COD_FAO))),
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between group of species in the mean fishing effort per marees 







data_vessel[,mean_spp_value_effort_sd_marees:=
   dcast(SACROIS,
      subset = .(!duplicated(paste(SEQ_ID, SPP_COD_FAO))),
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing effort per marees averaged among group of species







data_vessel[,sd_spp_effort_sd_marees:=
   dcast(SACROIS,
      subset = .(!duplicated(paste(SEQ_ID, SPP_COD_FAO))),
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between group of species the variation (sd) in the fishing effort per marees 


















data_vessel[,mean_spp_value_weight.prod_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing productivity per group of species and per marees (average amount between group of species of the average amount per marees for each group of species)








data_vessel[,sd_spp_weight.prod_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between group of species in the mean fishing productivity per marees 







data_vessel[,mean_spp_value_weight.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing productivity per marees averaged among group of species







data_vessel[,sd_spp_weight.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between group of species the variation (sd) in the fishing productivity per marees 













#3) Sequence scale




        




data_vessel[,mean_spp_value_weight_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (weight) per group of species and per sequence




#slightly less efficient method:


# dcast(
#   dcast(
#     dcast(SACROIS,
#           NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
#           fun.aggregate = sumna,
#           value.var = "QUANT_POIDS_VIF_SACROIS")
#             [is.na(SPP_COD_FAO), .:=NA][,sum:=.][,.:=NULL],
#         NAVS_COD_YEAR+SPP_COD_FAO ~ .,
#         fun.aggregate = function(x) mean(x, na.rm=T),
#         value.var="sum")
#           [,mean:=.][,.:=NULL],
#       NAVS_COD_YEAR ~ .,
#       fun.aggregate = function(x) mean(x, na.rm=T),
#       value.var="mean")[,.]






data_vessel[,sd_spp_weight_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (weight) per group of species and per sequence





data_vessel[,mean_spp_value_weight_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (weight) per group of species and per sequence



data_vessel[,sd_spp_weight_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between group of species the variation (sd) in the amount of fish (weight) per sequence
















data_vessel[,mean_spp_value_effort_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean fishing effort per group of species and per sequence







data_vessel[,sd_spp_effort_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in fishing effort per group of species and per sequence





data_vessel[,mean_spp_value_effort_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in fishing effort per group of species and per sequence



data_vessel[,sd_spp_effort_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between group of species the variation (sd) in the fishing effort per sequence















data_vessel[,mean_spp_value_weight.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (weight/fishing effort) per group of species and per sequence






data_vessel[,sd_spp_weight.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (weight/fishing effort) per group of species and per sequence





data_vessel[,mean_spp_value_weight.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (weight/fishing effort) per group of species and per sequence



data_vessel[,sd_spp_weight.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between group of species the variation (sd) in the amount of fish (weight/fishing effort) per sequence










```

##### Family level

```{r fishing activity - Fishing volumes (weight - family)}




#1) Year scale




data_vessel[,mean_family_value_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(FAMILY_COD_FAO), .:=NA]  #removal of occurences for which the family is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) per family 




data_vessel[,sd_family_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(FAMILY_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) per family









data_vessel[,mean_family_value_effort_year:=
    dcast(SACROIS,
          subset = .(!duplicated(paste(SEQ_ID, FAMILY_COD_FAO))), #avoid taking into account the same fishing sequence several time (fishing effort does not vary inside a fishing sequence)
          NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(FAMILY_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean fishing effort per family 




data_vessel[,sd_family_effort_year:=
    dcast(SACROIS,
          subset = .(!duplicated(paste(SEQ_ID, FAMILY_COD_FAO))),
          NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(FAMILY_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in afishing effort per family











data_vessel[,mean_family_value_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(FAMILY_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) corrected by fishing effort per family 




data_vessel[,sd_family_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(FAMILY_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) corrected by fishing effort per family 










#2) Maree scale







data_vessel[,mean_family_value_weight_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of families captured during the trip
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ] # averaging weight at the families level for each vessel
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean weight computed for each families for each vessel
                  [,V1] ]
 # mean amount of fish (weight) per families and per marees (average amount between families of the average amount per marees for each families)








data_vessel[,sd_family_weight_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
           [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(FAMILY_COD_FAO), .:=NA]
              [ ,mean(., na.rm=T),by=
                  .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
                [order(NAVS_COD_YEAR)] 
                  [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                    [,V1] ] 
# variation (sd) between families in the mean amount of fish (weight) per marees 







data_vessel[,mean_family_value_weight_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the amount of fish (weight) per marees averaged among families







data_vessel[,sd_family_weight_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between families the variation (sd) in the amount of fish (weight) per marees 




















data_vessel[,mean_family_value_effort_mean_marees:=
  dcast(SACROIS,          
      subset = .(!duplicated(paste(SEQ_ID, FAMILY_COD_FAO))),
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing effort per families and per marees (average amount between families of the average amount per marees for each families)








data_vessel[,sd_family_effort_mean_marees:=
   dcast(SACROIS,
      subset = .(!duplicated(paste(SEQ_ID, FAMILY_COD_FAO))),   
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between families in the mean fishing effort per marees 







data_vessel[,mean_family_value_effort_sd_marees:=
   dcast(SACROIS,
      subset = .(!duplicated(paste(SEQ_ID, FAMILY_COD_FAO))),   
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing effort per marees averaged among families







data_vessel[,sd_family_effort_sd_marees:=
   dcast(SACROIS,
      subset = .(!duplicated(paste(SEQ_ID, FAMILY_COD_FAO))),   
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between families the variation (sd) in the fishing effort per marees 


















data_vessel[,mean_family_value_weight.prod_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing productivity per families and per marees (average amount between families of the average amount per marees for each families)








data_vessel[,sd_family_weight.prod_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between families in the mean fishing productivity per marees 







data_vessel[,mean_family_value_weight.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing productivity per marees averaged among families







data_vessel[,sd_family_weight.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between families the variation (sd) in the fishing productivity per marees 












#3) Sequence scale




        




data_vessel[,mean_family_value_weight_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (weight) per family and per sequence






data_vessel[,sd_family_weight_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (weight) per family and per sequence





data_vessel[,mean_family_value_weight_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (weight) per family and per sequence



data_vessel[,sd_family_weight_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between family the variation (sd) in the amount of fish (weight) per sequence
















data_vessel[,mean_family_value_effort_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean fishing effort per family and per sequence







data_vessel[,sd_family_effort_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in fishing effort per family and per sequence





data_vessel[,mean_family_value_effort_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in fishing effort per family and per sequence



data_vessel[,sd_family_effort_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between family the variation (sd) in the fishing effort per sequence















data_vessel[,mean_family_value_weight.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (weight/fishing effort) per family and per sequence






data_vessel[,sd_family_weight.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (weight/fishing effort) per family and per sequence





data_vessel[,mean_family_value_weight.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (weight/fishing effort) per family and per sequence



data_vessel[,sd_family_weight.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between family the variation (sd) in the amount of fish (weight/fishing effort) per sequence










```

##### Order level

```{r fishing activity - Fishing volumes (weight - order)}




#1) Year scale




data_vessel[,mean_order_value_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ORDER_COD_FAO), .:=NA]  #removal of occurences for which the order is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) per order 




data_vessel[,sd_order_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ORDER_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) per order









data_vessel[,mean_order_value_effort_year:=
    dcast(SACROIS,
          subset = .(!duplicated(paste(SEQ_ID, ORDER_COD_FAO))), #avoid taking into account the same fishing sequence several time (fishing effort does not vary inside a fishing sequence)
          NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ORDER_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean fishing effort per order 




data_vessel[,sd_order_effort_year:=
    dcast(SACROIS,
          subset = .(!duplicated(paste(SEQ_ID, ORDER_COD_FAO))),
          NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ORDER_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in afishing effort per order











data_vessel[,mean_order_value_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(ORDER_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) corrected by fishing effort per order 




data_vessel[,sd_order_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(ORDER_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) corrected by fishing effort per order 










#2) Maree scale





data_vessel[,mean_order_value_weight_mean_marees:=
    dcast(SACROIS,
          MAREE_ID+ORDER_COD_FAO~., 
          fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of orders captured during the trip
             [is.na(ORDER_COD_FAO), .:=NA]
               [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ] # averaging weight at the orders level for each vessel
                  [order(NAVS_COD_YEAR)] 
                    [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean weight computed for each orders for each vessel
                     [,V1] ]
# mean amount of fish (weight) per orders and per marees (average amount between orders of the average amount per marees for each orders)








data_vessel[,sd_order_weight_mean_marees:=
    dcast(SACROIS,
          MAREE_ID+ORDER_COD_FAO~., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(ORDER_COD_FAO), .:=NA]
                [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
                  [order(NAVS_COD_YEAR)] 
                    [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                      [,V1] ] 
# variation (sd) between orders in the mean amount of fish (weight) per marees 







data_vessel[,mean_order_value_weight_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ORDER_COD_FAO~., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
               [is.na(ORDER_COD_FAO), .:=NA]
                  [ ,pop.sd(na.omit(.)),by=
                       .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
                    [order(NAVS_COD_YEAR)] 
                      [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                        [,V1] ] 
# Variation (sd) in the amount of fish (weight) per marees averaged among orders







data_vessel[,sd_order_weight_sd_marees:=
    dcast(SACROIS,
          MAREE_ID+ORDER_COD_FAO~., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(ORDER_COD_FAO), .:=NA]
                [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
                  [order(NAVS_COD_YEAR)] 
                    [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                      [,V1] ] 
# How vary (sd) between orders the variation (sd) in the amount of fish (weight) per marees 




















data_vessel[,mean_order_value_effort_mean_marees:=
                dcast(SACROIS,
                      subset = .(!duplicated(paste(SEQ_ID, ORDER_COD_FAO))),
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "TP_NAVIRE_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ] 
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
            [,V1] ]
# mean fishing effort per orders and per marees (average amount between orders of the average amount per marees for each orders)








data_vessel[,sd_order_effort_mean_marees:=
                dcast(SACROIS,
                      subset = .(!duplicated(paste(SEQ_ID, ORDER_COD_FAO))),
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "TP_NAVIRE_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# variation (sd) between orders in the mean fishing effort per marees 







data_vessel[,mean_order_value_effort_sd_marees:=
                dcast(SACROIS,
                      subset = .(!duplicated(paste(SEQ_ID, ORDER_COD_FAO))),
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "TP_NAVIRE_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
            [,V1] ] 
# Variation (sd) in the fishing effort per marees averaged among orders







data_vessel[,sd_order_effort_sd_marees:=
                dcast(SACROIS,
                      subset = .(!duplicated(paste(SEQ_ID, ORDER_COD_FAO))),
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "TP_NAVIRE_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# How vary (sd) between orders the variation (sd) in the fishing effort per marees 


















data_vessel[,mean_order_value_weight.prod_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_POIDS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ] 
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
            [,V1] ]
# mean fishing productivity per orders and per marees (average amount between orders of the average amount per marees for each orders)








data_vessel[,sd_order_weight.prod_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_POIDS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# variation (sd) between orders in the mean fishing productivity per marees 







data_vessel[,mean_order_value_weight.prod_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
            [,V1] ] 
# Variation (sd) in the fishing productivity per marees averaged among orders







data_vessel[,sd_order_weight.prod_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# How vary (sd) between orders the variation (sd) in the fishing productivity per marees 








#3) Sequence scale




        




data_vessel[,mean_order_value_weight_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (weight) per order and per sequence






data_vessel[,sd_order_weight_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (weight) per order and per sequence





data_vessel[,mean_order_value_weight_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (weight) per order and per sequence



data_vessel[,sd_order_weight_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between order the variation (sd) in the amount of fish (weight) per sequence
















data_vessel[,mean_order_value_effort_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean fishing effort per order and per sequence







data_vessel[,sd_order_effort_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in fishing effort per order and per sequence





data_vessel[,mean_order_value_effort_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in fishing effort per order and per sequence



data_vessel[,sd_order_effort_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between order the variation (sd) in the fishing effort per sequence















data_vessel[,mean_order_value_weight.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (weight/fishing effort) per order and per sequence






data_vessel[,sd_order_weight.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (weight/fishing effort) per order and per sequence





data_vessel[,mean_order_value_weight.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (weight/fishing effort) per order and per sequence



data_vessel[,sd_order_weight.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between order the variation (sd) in the amount of fish (weight/fishing effort) per sequence









```

##### ISSCAAP code level

```{r fishing activity - Fishing volumes (weight - isscaap)}




#1) Year scale




data_vessel[,mean_isscaap_value_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ISSCAAP_COD_FAO), .:=NA]  #removal of occurences for which the isscaap is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) per isscaap 




data_vessel[,sd_isscaap_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ISSCAAP_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) per isscaap









data_vessel[,mean_isscaap_value_effort_year:=
    dcast(SACROIS,
          subset = .(!duplicated(paste(SEQ_ID, ISSCAAP_COD_FAO))), #avoid taking into account the same fishing sequence several time (fishing effort does not vary inside a fishing sequence)
          NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ISSCAAP_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean fishing effort per isscaap 




data_vessel[,sd_isscaap_effort_year:=
    dcast(SACROIS,
          subset = .(!duplicated(paste(SEQ_ID, ISSCAAP_COD_FAO))),
          NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ISSCAAP_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in afishing effort per isscaap











data_vessel[,mean_isscaap_value_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(ISSCAAP_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) corrected by fishing effort per isscaap 




data_vessel[,sd_isscaap_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(ISSCAAP_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) corrected by fishing effort per isscaap 










#2) Maree scale




data_vessel[,mean_isscaap_value_weight_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of isscaap codes captured during the trip
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ] # averaging weight at the isscaap codes level for each vessel
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean weight computed for each isscaap codes for each vessel
            [,V1] ]
# mean amount of fish (weight) per isscaap codes and per marees (average amount between isscaap codes of the average amount per marees for each isscaap codes)








data_vessel[,sd_isscaap_weight_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "QUANT_POIDS_VIF_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# variation (sd) between isscaap codes in the mean amount of fish (weight) per marees 







data_vessel[,mean_isscaap_value_weight_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "QUANT_POIDS_VIF_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
            [,V1] ] 
# Variation (sd) in the amount of fish (weight) per marees averaged among isscaap codes







data_vessel[,sd_isscaap_weight_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "QUANT_POIDS_VIF_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# How vary (sd) between isscaap codes the variation (sd) in the amount of fish (weight) per marees 




















data_vessel[,mean_isscaap_value_effort_mean_marees:=
                dcast(SACROIS,
                      subset = .(!duplicated(paste(SEQ_ID, ISSCAAP_COD_FAO))),
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "TP_NAVIRE_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ] 
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
            [,V1] ]
# mean fishing effort per isscaap codes and per marees (average amount between isscaap codes of the average amount per marees for each isscaap codes)








data_vessel[,sd_isscaap_effort_mean_marees:=
                dcast(SACROIS,
                      subset = .(!duplicated(paste(SEQ_ID, ISSCAAP_COD_FAO))),
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "TP_NAVIRE_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# variation (sd) between isscaap codes in the mean fishing effort per marees 







data_vessel[,mean_isscaap_value_effort_sd_marees:=
                dcast(SACROIS,
                      subset = .(!duplicated(paste(SEQ_ID, ISSCAAP_COD_FAO))),
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "TP_NAVIRE_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
            [,V1] ] 
# Variation (sd) in the fishing effort per marees averaged among isscaap codes







data_vessel[,sd_isscaap_effort_sd_marees:=
                dcast(SACROIS,
                      subset = .(!duplicated(paste(SEQ_ID, ISSCAAP_COD_FAO))),
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "TP_NAVIRE_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# How vary (sd) between isscaap codes the variation (sd) in the fishing effort per marees 


















data_vessel[,mean_isscaap_value_weight.prod_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_POIDS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ] 
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
            [,V1] ]
# mean fishing productivity per isscaap codes and per marees (average amount between isscaap codes of the average amount per marees for each isscaap codes)








data_vessel[,sd_isscaap_weight.prod_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_POIDS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# variation (sd) between isscaap codes in the mean fishing productivity per marees 







data_vessel[,mean_isscaap_value_weight.prod_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
            [,V1] ] 
# Variation (sd) in the fishing productivity per marees averaged among isscaap codes







data_vessel[,sd_isscaap_weight.prod_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# How vary (sd) between isscaap codes the variation (sd) in the fishing productivity per marees 












#3) Sequence scale




        




data_vessel[,mean_isscaap_value_weight_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (weight) per isscaap and per sequence






data_vessel[,sd_isscaap_weight_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (weight) per isscaap code and per sequence





data_vessel[,mean_isscaap_value_weight_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (weight) per isscaap code and per sequence



data_vessel[,sd_isscaap_weight_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between isscaap code the variation (sd) in the amount of fish (weight) per sequence
















data_vessel[,mean_isscaap_value_effort_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean fishing effort per isscaap code and per sequence







data_vessel[,sd_isscaap_effort_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in fishing effort per isscaap code and per sequence





data_vessel[,mean_isscaap_value_effort_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in fishing effort per isscaap code and per sequence



data_vessel[,sd_isscaap_effort_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between isscaap code the variation (sd) in the fishing effort per sequence















data_vessel[,mean_isscaap_value_weight.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (weight/fishing effort) per isscaap code and per sequence






data_vessel[,sd_isscaap_weight.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (weight/fishing effort) per isscaap code and per sequence





data_vessel[,mean_isscaap_value_weight.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (weight/fishing effort) per isscaap code and per sequence



data_vessel[,sd_isscaap_weight.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between isscaap code the variation (sd) in the amount of fish (weight/fishing effort) per sequence









```

####Economic value

#####All taxa

```{r fishing activity - Fishing volumes (eco - all taxa)}







  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "MONTANT_EUROS_SACROIS")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 0.2% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "MONTANT_EUROS_SACROIS")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on fishing economic value, many vessels (31% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "MONTANT_EUROS_SACROIS")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "MONTANT_EUROS_SACROIS")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 24% +/- 15 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(MONTANT_EUROS_SACROIS),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(MONTANT_EUROS_SACROIS),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred




# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$MONTANT_EUROS_SACROIS)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier (particularly chaluts in 2023) are significantly associated to the presence or not of missing data on fished economic value (less declaration in these metier ?) 













#1) Year scale






data_vessel[,value_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")[,.]]  #amount of fish (economic value) per year







SACROIS[,PROD_ECO:=MONTANT_EUROS_SACROIS/TP_NAVIRE_SACROIS] #fishing productivity (in terms of economic value, corrected by fishing effort) 


SACROIS[is.infinite(PROD_ECO), PROD_ECO:=NA]





data_vessel[,value_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")[,.]]  
#amount of fish (economic value) corrected by fishing effort per year






#2) Maree scale





data_vessel[,mean_value_eco_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [ ,mean(., na.rm=T),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ] 
# mean amount of fish (economic value) per maree 





data_vessel[,sd_eco_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [ ,pop.sd(na.omit(.)),by=
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ] 
 # variation (sd) in amount of fish (economic value) per maree










data_vessel[,mean_value_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [ ,mean(., na.rm=T),by=
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ] 
            [order(SACROIS)] 
              [,V1] ] 
# mean amount of fish (economic value) corrected by fishing effort per maree 





data_vessel[,sd_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO") 
          [ ,pop.sd(na.omit(.)),by=
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ] 
            [order(SACROIS)] 
              [,V1] ] 
 # variation (sd) in amount of fish (economic value) corrected by fishing effort per maree 











#3) Sequence scale


data_vessel[,mean_value_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID~.,
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T),by =
              .(NAVS_COD_YEAR)]
            [,V1] ]
 # mean amount of fish (economic value) per fishing sequence



data_vessel[,sd_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID~.,
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,pop.sd(na.omit(.)),by =
              .(NAVS_COD_YEAR)]
            [,V1] ]
 # variation (sd) in amount of fish (economic value) per fishing sequence







data_vessel[,mean_value_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID~.,
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T),by =
              .(NAVS_COD_YEAR)]
            [,V1]  ]
 # mean amount of fish (economic value) corrected by fishing effort per fishing sequence



data_vessel[,sd_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID~.,
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,pop.sd(na.omit(.)),by =
              .(NAVS_COD_YEAR)]
            [,V1]  ] 
 # variation (sd) in amount of fish (economic value) corrected by fishing effort per fishing sequence





```

##### Species level

```{r fishing activity - Fishing volumes (economic value - species)}




#1) Year scale




data_vessel[,mean_spe_value_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  #removal of occurrences for which the species is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic value) per species 




data_vessel[,sd_spe_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) per species












data_vessel[,mean_spe_value_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(ESP2_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic value) corrected by fishing effort per species 




data_vessel[,sd_spe_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(ESP2_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) corrected by fishing effort per species










#2) Maree scale







data_vessel[,mean_spe_value_eco_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of species captured during the trip
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ] # averaging economic value at the species level for each vessel
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean economic value computed for each species for each vessel
                  [,V1] ]
 # mean amount of fish (economic value) per species and per marees (average amount between species of the average amount per marees for each species)








data_vessel[,sd_spe_eco_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
           [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ESP2_COD_FAO), .:=NA]
              [ ,mean(., na.rm=T),by=
                  .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
                [order(NAVS_COD_YEAR)] 
                  [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                    [,V1] ] 
# variation (sd) between species in the mean amount of fish (economic value) per marees 







data_vessel[,mean_spe_value_eco_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the amount of fish (economic value) per marees averaged among species







data_vessel[,sd_spe_eco_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between species the variation (sd) in the amount of fish (economic value) per marees 





























data_vessel[,mean_spe_value_eco.prod_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing economic productivity per species and per marees (average amount between species of the average amount per marees for each species)








data_vessel[,sd_spe_eco.prod_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between species in the mean fishing economic productivity per marees 







data_vessel[,mean_spe_value_eco.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing economic productivity per marees averaged among species







data_vessel[,sd_spe_eco.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ESP2_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ESP2_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ESP2_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between species the variation (sd) in the fishing economic productivity per marees 













#3) Sequence scale




data_vessel[,mean_spe_value_eco_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  #removal of occurences for which the species is unknown
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (economic value) per species (and per sequence, as there is for each species one economic value for each sequence)






data_vessel[,sd_spe_eco_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (economic value) per species (and per sequence, as there is for each species one economic value for each sequence)





data_vessel[,mean_spe_value_eco_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (economic value) per species and per sequence



data_vessel[,sd_spe_eco_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between species the variation (sd) in the amount of fish (economic value) per sequence















data_vessel[,mean_spe_value_eco.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_ECO")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (economic value/fishing effort) per species (and per sequence, as there is for each species one economic value for each sequence)






data_vessel[,sd_spe_eco.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_ECO")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (economic value/fishing effort) per species (and per sequence, as there is for each species one economic value for each sequence)





data_vessel[,mean_spe_value_eco.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_ECO")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (economic value/fishing effort) per species and per sequence



data_vessel[,sd_spe_eco.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_ECO")
            [is.na(ESP2_COD_FAO), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between species the variation (sd) in the amount of fish (economic value/fishing effort) per sequence











```

##### Group of species level

```{r fishing activity - Fishing volumes (economic value - group of species)}




#1) Year scale




data_vessel[,mean_spp_value_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(SPP_COD_FAO), .:=NA]  #removal of occurences for which the group of species is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic value) per group of species 




data_vessel[,sd_spp_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(SPP_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) per group of species










data_vessel[,mean_spp_value_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(SPP_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic value) corrected by fishing effort per group of species 




data_vessel[,sd_spp_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(SPP_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) corrected by fishing effort per group of species 










#2) Maree scale








data_vessel[,mean_spp_value_eco_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of group of species captured during the trip
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ] # averaging economic value at the group of species level for each vessel
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean economic value computed for each group of species for each vessel
                  [,V1] ]
 # mean amount of fish (economic value) per group of species and per marees (average amount between group of species of the average amount per marees for each group of species)








data_vessel[,sd_spp_eco_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
           [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SPP_COD_FAO), .:=NA]
              [ ,mean(., na.rm=T),by=
                  .(NAVS_COD_YEAR, SPP_COD_FAO) ]
                [order(NAVS_COD_YEAR)] 
                  [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                    [,V1] ] 
# variation (sd) between group of species in the mean amount of fish (economic value) per marees 







data_vessel[,mean_spp_value_eco_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the amount of fish (economic value) per marees averaged among group of species







data_vessel[,sd_spp_eco_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between group of species the variation (sd) in the amount of fish (economic value) per marees 





























data_vessel[,mean_spp_value_eco.prod_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing economic productivity per group of species and per marees (average amount between group of species of the average amount per marees for each group of species)








data_vessel[,sd_spp_eco.prod_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between group of species in the mean fishing economic productivity per marees 







data_vessel[,mean_spp_value_eco.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing economic productivity per marees averaged among group of species







data_vessel[,sd_spp_eco.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+SPP_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SPP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, SPP_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between group of species the variation (sd) in the fishing economic productivity per marees 


















#3) Sequence scale




        




data_vessel[,mean_spp_value_eco_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (economic value) per group of species and per sequence








data_vessel[,sd_spp_eco_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (economic value) per group of species and per sequence





data_vessel[,mean_spp_value_eco_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (economic value) per group of species and per sequence



data_vessel[,sd_spp_eco_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(SPP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between group of species the variation (sd) in the amount of fish (economic value) per sequence
















data_vessel[,mean_spp_value_eco.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(SPP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (economic value/fishing effort) per group of species and per sequence






data_vessel[,sd_spp_eco.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(SPP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (economic value/fishing effort) per group of species and per sequence





data_vessel[,mean_spp_value_eco.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(SPP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (economic value/fishing effort) per group of species and per sequence



data_vessel[,sd_spp_eco.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(SPP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between group of species the variation (sd) in the amount of fish (economic value/fishing effort) per sequence










```

##### Family level

```{r fishing activity - Fishing volumes (economic value - family)}




#1) Year scale




data_vessel[,mean_family_value_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(FAMILY_COD_FAO), .:=NA]  #removal of occurences for which the family is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic value) per family 




data_vessel[,sd_family_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(FAMILY_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) per family











data_vessel[,mean_family_value_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(FAMILY_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic value) corrected by fishing effort per family 




data_vessel[,sd_family_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(FAMILY_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) corrected by fishing effort per family 










#2) Maree scale








data_vessel[,mean_family_value_eco_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of families captured during the trip
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ] # averaging economic value at the families level for each vessel
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean economic value computed for each families for each vessel
                  [,V1] ]
 # mean amount of fish (economic value) per families and per marees (average amount between families of the average amount per marees for each families)








data_vessel[,sd_family_eco_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
           [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(FAMILY_COD_FAO), .:=NA]
              [ ,mean(., na.rm=T),by=
                  .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
                [order(NAVS_COD_YEAR)] 
                  [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                    [,V1] ] 
# variation (sd) between families in the mean amount of fish (economic value) per marees 







data_vessel[,mean_family_value_eco_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the amount of fish (economic value) per marees averaged among families







data_vessel[,sd_family_eco_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between families the variation (sd) in the amount of fish (economic value) per marees 





























data_vessel[,mean_family_value_eco.prod_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing economic productivity per families and per marees (average amount between families of the average amount per marees for each families)








data_vessel[,sd_family_eco.prod_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between families in the mean fishing economic productivity per marees 







data_vessel[,mean_family_value_eco.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing economic productivity per marees averaged among families







data_vessel[,sd_family_eco.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+FAMILY_COD_FAO~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(FAMILY_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, FAMILY_COD_FAO) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between families the variation (sd) in the fishing economic productivity per marees 















#3) Sequence scale




        




data_vessel[,mean_family_value_eco_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (economic value) per family and per sequence








data_vessel[,sd_family_eco_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (economic value) per family and per sequence





data_vessel[,mean_family_value_eco_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (economic value) per family and per sequence



data_vessel[,sd_family_eco_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between family the variation (sd) in the amount of fish (economic value) per sequence























data_vessel[,mean_family_value_eco.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (economic value/fishing effort) per family and per sequence






data_vessel[,sd_family_eco.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (economic value/fishing effort) per family and per sequence





data_vessel[,mean_family_value_eco.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (economic value/fishing effort) per family and per sequence



data_vessel[,sd_family_eco.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(FAMILY_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between family the variation (sd) in the amount of fish (economic value/fishing effort) per sequence










```

##### Order level

```{r fishing activity - Fishing volumes (economic value - order)}




#1) Year scale




data_vessel[,mean_order_value_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ORDER_COD_FAO), .:=NA]  #removal of occurences for which the order is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic value) per order 




data_vessel[,sd_order_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ORDER_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) per order














data_vessel[,mean_order_value_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(ORDER_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic value) corrected by fishing effort per order 




data_vessel[,sd_order_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(ORDER_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) corrected by fishing effort per order 










#2) Maree scale







data_vessel[,mean_order_value_eco_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of orders captured during the trip
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ] # averaging economic value at the orders level for each vessel
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean economic value computed for each orders for each vessel
            [,V1] ]
# mean amount of fish (economic value) per orders and per marees (average amount between orders of the average amount per marees for each orders)








data_vessel[,sd_order_eco_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "MONTANT_EUROS_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# variation (sd) between orders in the mean amount of fish (economic value) per marees 







data_vessel[,mean_order_value_eco_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "MONTANT_EUROS_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
            [,V1] ] 
# Variation (sd) in the amount of fish (economic value) per marees averaged among orders







data_vessel[,sd_order_eco_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "MONTANT_EUROS_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# How vary (sd) between orders the variation (sd) in the amount of fish (economic value) per marees 





























data_vessel[,mean_order_value_eco.prod_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_ECO") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ] 
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
            [,V1] ]
# mean fishing economic productivity per orders and per marees (average amount between orders of the average amount per marees for each orders)








data_vessel[,sd_order_eco.prod_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_ECO") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# variation (sd) between orders in the mean fishing economic productivity per marees 







data_vessel[,mean_order_value_eco.prod_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
            [,V1] ] 
# Variation (sd) in the fishing economic productivity per marees averaged among orders







data_vessel[,sd_order_eco.prod_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ORDER_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ORDER_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ORDER_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# How vary (sd) between orders the variation (sd) in the fishing economic productivity per marees 











#3) Sequence scale




        




data_vessel[,mean_order_value_eco_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (economic value) per order and per sequence








data_vessel[,sd_order_eco_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (economic value) per order and per sequence





data_vessel[,mean_order_value_eco_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (economic value) per order and per sequence



data_vessel[,sd_order_eco_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between order the variation (sd) in the amount of fish (economic value) per sequence



























data_vessel[,mean_order_value_eco.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (economic value/fishing effort) per order and per sequence






data_vessel[,sd_order_eco.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (economic value/fishing effort) per order and per sequence





data_vessel[,mean_order_value_eco.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (economic value/fishing effort) per order and per sequence



data_vessel[,sd_order_eco.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(ORDER_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between order the variation (sd) in the amount of fish (economic value/fishing effort) per sequence










```

##### ISSCAAP code level

```{r fishing activity - Fishing volumes (economic value - isscaap)}




#1) Year scale




data_vessel[,mean_isscaap_value_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ISSCAAP_COD_FAO), .:=NA]  #removal of occurences for which the isscaap is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic value) per isscaap 




data_vessel[,sd_isscaap_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ISSCAAP_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) per isscaap












data_vessel[,mean_isscaap_value_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(ISSCAAP_COD_FAO), .:=NA]
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic value) corrected by fishing effort per isscaap 




data_vessel[,sd_isscaap_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(ISSCAAP_COD_FAO), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) corrected by fishing effort per isscaap 










#2) Maree scale






data_vessel[,mean_isscaap_value_eco_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of isscaap codes captured during the trip
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ] # averaging economic value at the isscaap codes level for each vessel
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean economic value computed for each isscaap codes for each vessel
            [,V1] ]
# mean amount of fish (economic value) per isscaap codes and per marees (average amount between isscaap codes of the average amount per marees for each isscaap codes)








data_vessel[,sd_isscaap_eco_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "MONTANT_EUROS_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# variation (sd) between isscaap codes in the mean amount of fish (economic value) per marees 







data_vessel[,mean_isscaap_value_eco_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "MONTANT_EUROS_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
            [,V1] ] 
# Variation (sd) in the amount of fish (economic value) per marees averaged among isscaap codes







data_vessel[,sd_isscaap_eco_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "MONTANT_EUROS_SACROIS") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# How vary (sd) between isscaap codes the variation (sd) in the amount of fish (economic value) per marees 





























data_vessel[,mean_isscaap_value_eco.prod_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_ECO") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ] 
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
            [,V1] ]
# mean fishing economic productivity per isscaap codes and per marees (average amount between isscaap codes of the average amount per marees for each isscaap codes)








data_vessel[,sd_isscaap_eco.prod_mean_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_ECO") 
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,mean(., na.rm=T),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# variation (sd) between isscaap codes in the mean fishing economic productivity per marees 







data_vessel[,mean_isscaap_value_eco.prod_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
            [,V1] ] 
# Variation (sd) in the fishing economic productivity per marees averaged among isscaap codes







data_vessel[,sd_isscaap_eco.prod_sd_marees:=
                dcast(SACROIS,
                      MAREE_ID+ISSCAAP_COD_FAO~., 
                      fun.aggregate = sumna,
                      value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ISSCAAP_COD_FAO), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                    .(NAVS_COD_YEAR, ISSCAAP_COD_FAO) ]
            [order(NAVS_COD_YEAR)] 
            [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
            [,V1] ] 
# How vary (sd) between isscaap codes the variation (sd) in the fishing economic productivity per marees 












#3) Sequence scale




        




data_vessel[,mean_isscaap_value_eco_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (economic value) per isscaap and per sequence








data_vessel[,sd_isscaap_eco_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (economic value) per isscaap and per sequence





data_vessel[,mean_isscaap_value_eco_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (economic value) per isscaap and per sequence



data_vessel[,sd_isscaap_eco_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between isscaap the variation (sd) in the amount of fish (economic value) per sequence


















data_vessel[,mean_isscaap_value_eco.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean amount of fish (economic value/fishing effort) per isscaap and per sequence






data_vessel[,sd_isscaap_eco.prod_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,mean(., na.rm=T),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
 # variation (sd) in amount of fish (economic value/fishing effort) per isscaap and per sequence





data_vessel[,mean_isscaap_value_eco.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,mean(V1, na.rm=T),by = NAVS_COD_YEAR]
                  [,V1] ]
   # mean variation in amount of fish (economic value/fishing effort) per isscaap and per sequence



data_vessel[,sd_isscaap_eco.prod_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID ~ ., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(ISSCAAP_COD_FAO), .:=NA]
            [,pop.sd(na.omit(.)),by =
                .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [,pop.sd(na.omit(V1)),by = NAVS_COD_YEAR]
                  [,V1] ]
   # How vary (sd) between isscaap the variation (sd) in the amount of fish (economic value/fishing effort) per sequence










```






###Fished taxa diversity

####Species level

```{r fishing activity - Fished taxa diversity (species)}



#warning: metrics of diversity using fishing weight as a proxy for abundance are biased due to the missing data on the weight (see below)

table(is.na(SACROIS[!is.na(ESP2_COD_FAO),QUANT_POIDS_VIF_SACROIS]))

table(is.na(SACROIS[!is.na(SPP_COD_FAO),QUANT_POIDS_VIF_SACROIS]))

table(is.na(SACROIS[!is.na(FAMILY_COD_FAO),QUANT_POIDS_VIF_SACROIS]))

table(is.na(SACROIS[!is.na(ORDER_COD_FAO),QUANT_POIDS_VIF_SACROIS]))

table(is.na(SACROIS[!is.na(ISSCAAP_COD_FAO),QUANT_POIDS_VIF_SACROIS]))








  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "ESP2_COD_FAO")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 0.4% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "ESP2_COD_FAO")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on fished species, many vessels (79% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "ESP2_COD_FAO")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "ESP2_COD_FAO")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 13% +/- 10 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(ESP2_COD_FAO),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(ESP2_COD_FAO),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred



# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$ESP2_COD_FAO)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier (filet maillants, chaluts, trémails...) are significantly associated to the presence or not of missing data on fished species (probably because some metier do not declare their catch at this level of precision but rather at higher taxa) 







#1) Year scale




data_vessel[,div_value_nb_spe_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna( # return NA when only NA for species data
                                        unique(
                                          na.omit(x))), #removing NAs to avoid taking them into account for species number 
          value.var = "ESP2_COD_FAO")[,.]]  #amount of fish (economic value) per year





#To be noticed: for all following diversity metrics, it is slightly faster to remove NA prior estimating the variable because the "diversity" R function do not handle NA values efficiently




# the metrics using the number of marees as a proxy of abundance could be questionable as the number of fishing sequences is a more precise proxy but maybe biased by fishing behavior (with extremely repeated sequences for some target species)



data_vessel[,div_simpson_marees_spe_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_year),div_simpson_marees_spe_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "MAREE_ID")
          [!is.na(ESP2_COD_FAO)] #removing unidentified species from the diversity estimate
            [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by the number of occurence in marees) fished species per vessel





data_vessel[,div_simpson_seq_spe_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_year),div_simpson_seq_spe_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [!is.na(ESP2_COD_FAO)] 
            [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by the number of occurence in fishing sequence) fished species per vessel







#To be noticed: there is no vessel with only missing value for fishing weight and non-missing data on species (see below, also valid for higher taxa), in the contrary case we would have to add the "if (all(is.na(x$QUANT_POIDS_VIF_SACROIS))) {NA}" condition in the following code

intersect(data_vessel[tapply(SACROIS$ESP2_COD_FAO, SACROIS$NAVS_COD_YEAR, function(x) !all(is.na(x)) ),]$NAVS_COD_YEAR, data_vessel[tapply(SACROIS$QUANT_POIDS_VIF_SACROIS, SACROIS$NAVS_COD_YEAR,function(x) all(is.na(x)) ),]$NAVS_COD_YEAR)



#To be noticed some weight are set to 0, these weight are considered here as an indicator of very small amount of fish caught and therefore are not treated as missing values but as a null abundance




data_vessel[,div_simpson_weight_spe_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_year),div_simpson_weight_spe_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO)]
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by fishing weight) fished species per vessel





#To be noticed: sequence and marees are extremely correlated (remove marees estimates ?), but correlation are lower with weight estimates (R²~0.75 in 2023)







# the Shannon index of diversity is less easily understandable than Simpson index but should be less sensitive to rare species (what might be of interest with fishing data where occasional non targeted species are fished)




data_vessel[,div_shannon_marees_spe_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_year),div_shannon_marees_spe_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "MAREE_ID")
          [!is.na(ESP2_COD_FAO)] #removing unidentified species from the diversity estimate
            [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by the number of occurence in marees) fished species per vessel





data_vessel[,div_shannon_seq_spe_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_year),div_shannon_seq_spe_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [!is.na(ESP2_COD_FAO)] 
            [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by the number of occurence in fishing sequence) fished species per vessel







data_vessel[,div_shannon_weight_spe_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_year),div_shannon_weight_spe_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO)]
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
                [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by fishing weight) fished species per vessel





# All shannon index are extremely correlated to each others, but less with simpson indexes (R²~0.8-0.9)










#2) Marees scale




#We then considered how such indexes could vary among marees:


data_vessel[,div_value_nb_spe_mean_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ESP2_COD_FAO")
          [ ,mean(., na.rm=T),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ] 
 #assigns the mean (yearly) fished species number per marées for each vessels 






data_vessel[,div_nb_spe_sd_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ESP2_COD_FAO")
          [ ,pop.sd(na.omit(.)),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ]
        #assigns the variability (standard deviation) in (yearly) fished species number per marées for each vessels 





data_vessel[,div_simpson_seq_spe_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_mean_marees),div_simpson_seq_spe_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO)] 
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ]            
 #assigns the mean (yearly) simpson diversity index (abundance estimated by number of sequence) per marées for each vessels 





data_vessel[,div_simpson_seq_spe_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_mean_marees),div_simpson_seq_spe_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO)] 
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,pop.sd(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ] 
         #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by number of sequence) per marées for each vessels 






data_vessel[,div_simpson_weight_spe_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_mean_marees),div_simpson_weight_spe_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ] 
 #assigns the mean (yearly) simpson diversity index (abundance estimated by fishing weight) per marées for each vessels 





data_vessel[,div_simpson_weight_spe_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_mean_marees),div_simpson_weight_spe_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,pop.sd(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ]
         #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by fishing weight) per marées for each vessels 











data_vessel[,div_shannon_seq_spe_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_mean_marees),div_shannon_seq_spe_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO)] 
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ]            
 #assigns the mean (yearly) shannon diversity index (abundance estimated by number of sequence) per marées for each vessels 





data_vessel[,div_shannon_seq_spe_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_mean_marees),div_shannon_seq_spe_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO)] 
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,pop.sd(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ] 
         #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by number of sequence) per marées for each vessels 






data_vessel[,div_shannon_weight_spe_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_mean_marees),div_shannon_weight_spe_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO)]
              [!is.na(.)]
                [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ] 
 #assigns the mean (yearly) shannon diversity index (abundance estimated by fishing weight) per marées for each vessels 





data_vessel[,div_shannon_weight_spe_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_mean_marees),div_shannon_weight_spe_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,pop.sd(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ]
         #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by fishing weight) per marées for each vessels 






#Shannon indexes estimates are extremely close to each other but differ a little from other estimates (same for Simpson)









#3) Sequence scale




#We then considered how such indexes could vary among sequence:




data_vessel[,div_value_nb_spe_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SEQ_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ESP2_COD_FAO")
          [, mean(., na.rm=T),by= NAVS_COD_YEAR]
            [,V1] ]
 #assigns the mean (yearly) fished species number per fishing sequence for each vessels 






data_vessel[,div_nb_spe_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SEQ_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ESP2_COD_FAO")
          [, pop.sd(na.omit(.)),by= NAVS_COD_YEAR]
            [,V1] ]
         #assigns the variability (standard deviation) in (yearly) fished species number per fishing sequence for each vessels 







data_vessel[,div_simpson_weight_spe_mean_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_year),div_simpson_weight_spe_mean_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,mean(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the mean (yearly) simpson diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 





data_vessel[,div_simpson_weight_spe_sd_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_year),div_simpson_weight_spe_sd_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,pop.sd(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
        #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 










data_vessel[,div_shannon_weight_spe_mean_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_year),div_shannon_weight_spe_mean_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,mean(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the mean (yearly) shannon diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 





data_vessel[,div_shannon_weight_spe_sd_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_spe_year),div_shannon_weight_spe_sd_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,pop.sd(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
        #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels  






#At the sequence level all metrics are less correlated (R² from 0.2 to 0.85 in 2023)


```

####Group of species level

```{r fishing activity - Fished taxa diversity (group of species)}







  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "SPP_COD_FAO")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 0.3% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "SPP_COD_FAO")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on fished group of species, many vessels (73% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "SPP_COD_FAO")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "SPP_COD_FAO")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 8% +/- 9 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(SPP_COD_FAO),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(SPP_COD_FAO),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred


# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$SPP_COD_FAO)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier are significantly associated to the presence or not of missing data on fished group of species (probably because some metier do not declare their catch at this level of precision but rather at higher taxa) 






#1) Year scale




data_vessel[,div_value_nb_spp_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),   
          value.var = "SPP_COD_FAO")[,.]]  #amount of fish (economic value) per year








data_vessel[,div_simpson_marees_spp_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_year),div_simpson_marees_spp_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "MAREE_ID")
          [!is.na(SPP_COD_FAO)] #removing unidentified group of species from the diversity estimate
            [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by the number of occurence in marees) fished group of species per vessel





data_vessel[,div_simpson_seq_spp_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_year),div_simpson_seq_spp_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [!is.na(SPP_COD_FAO)] 
            [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by the number of occurence in fishing sequence) fished group of species per vessel










data_vessel[,div_simpson_weight_spp_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_year),div_simpson_weight_spp_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SPP_COD_FAO)]
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by fishing weight) fished group of species per vessel














data_vessel[,div_shannon_marees_spp_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_year),div_shannon_marees_spp_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "MAREE_ID")
          [!is.na(SPP_COD_FAO)] #removing unidentified group of species from the diversity estimate
            [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by the number of occurence in marees) fished group of species per vessel





data_vessel[,div_shannon_seq_spp_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_year),div_shannon_seq_spp_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [!is.na(SPP_COD_FAO)] 
            [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by the number of occurence in fishing sequence) fished group of species per vessel







data_vessel[,div_shannon_weight_spp_year:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_year),div_shannon_weight_spp_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SPP_COD_FAO)]
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
                [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by fishing weight) fished group of species per vessel














#2) Marees scale





#We then considered how such indexes could vary among marees:


data_vessel[,div_value_nb_spp_mean_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "SPP_COD_FAO")
          [ ,mean(., na.rm=T),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ] 
 #assigns the mean (yearly) fished group of species number per marées for each vessels 






data_vessel[,div_nb_spp_sd_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "SPP_COD_FAO")
          [ ,pop.sd(na.omit(.)),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ]
        #assigns the variability (standard deviation) in (yearly) fished group of species number per marées for each vessels 





data_vessel[,div_simpson_seq_spp_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_mean_marees),div_simpson_seq_spp_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO)] 
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ]            
 #assigns the mean (yearly) simpson diversity index (abundance estimated by number of sequence) per marées for each vessels 





data_vessel[,div_simpson_seq_spp_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_mean_marees),div_simpson_seq_spp_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO)] 
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,pop.sd(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ] 
         #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by number of sequence) per marées for each vessels 






data_vessel[,div_simpson_weight_spp_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_mean_marees),div_simpson_weight_spp_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ] 
 #assigns the mean (yearly) simpson diversity index (abundance estimated by fishing weight) per marées for each vessels 





data_vessel[,div_simpson_weight_spp_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_mean_marees),div_simpson_weight_spp_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,pop.sd(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ]
         #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by fishing weight) per marées for each vessels 











data_vessel[,div_shannon_seq_spp_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_mean_marees),div_shannon_seq_spp_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO)] 
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ]            
 #assigns the mean (yearly) shannon diversity index (abundance estimated by number of sequence) per marées for each vessels 





data_vessel[,div_shannon_seq_spp_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_mean_marees),div_shannon_seq_spp_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO)] 
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,pop.sd(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ] 
         #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by number of sequence) per marées for each vessels 






data_vessel[,div_shannon_weight_spp_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_mean_marees),div_shannon_weight_spp_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO)]
              [!is.na(.)]
                [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ] 
 #assigns the mean (yearly) shannon diversity index (abundance estimated by fishing weight) per marées for each vessels 





data_vessel[,div_shannon_weight_spp_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_mean_marees),div_shannon_weight_spp_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,pop.sd(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ]
         #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by fishing weight) per marées for each vessels 











#3) Sequence scale




#We then considered how such indexes could vary among sequence:




data_vessel[,div_value_nb_spp_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SEQ_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "SPP_COD_FAO")
          [, mean(., na.rm=T),by= NAVS_COD_YEAR]
            [,V1] ]
 #assigns the mean (yearly) fished group of species number per fishing sequence for each vessels 






data_vessel[,div_nb_spp_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SEQ_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "SPP_COD_FAO")
          [, pop.sd(na.omit(.)),by= NAVS_COD_YEAR]
            [,V1] ]
         #assigns the variability (standard deviation) in (yearly) fished group of species number per fishing sequence for each vessels 







data_vessel[,div_simpson_weight_spp_mean_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_year),div_simpson_weight_spp_mean_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SPP_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,mean(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the mean (yearly) simpson diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 





data_vessel[,div_simpson_weight_spp_sd_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_year),div_simpson_weight_spp_sd_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SPP_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,pop.sd(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
        #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 










data_vessel[,div_shannon_weight_spp_mean_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_year),div_shannon_weight_spp_mean_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SPP_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,mean(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the mean (yearly) shannon diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 





data_vessel[,div_shannon_weight_spp_sd_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_spp_year),div_shannon_weight_spp_sd_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SPP_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,pop.sd(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
        #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels  




```

####Family level

```{r fishing activity - Fished taxa diversity (family)}






  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "FAMILY_COD_FAO")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 0.2% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "FAMILY_COD_FAO")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on fished families, many vessels (46% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "FAMILY_COD_FAO")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "FAMILY_COD_FAO")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 5% +/- 7 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(FAMILY_COD_FAO),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(FAMILY_COD_FAO),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred


# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$FAMILY_COD_FAO)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier are significantly associated to the presence or not of missing data on fished family (probably because some metier do not declare their catch at this level of precision but rather at higher taxa) 






#1) Year scale




data_vessel[,div_value_nb_family_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),   
          value.var = "FAMILY_COD_FAO")[,.]]  #amount of fish (economic value) per year








data_vessel[,div_simpson_marees_family_year:=NA_real_]

data_vessel[!is.na(div_value_nb_family_year),div_simpson_marees_family_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "MAREE_ID")
          [!is.na(FAMILY_COD_FAO)] #removing unidentified family from the diversity estimate
            [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by the number of occurence in marees) fished family per vessel





data_vessel[,div_simpson_seq_family_year:=NA_real_]

data_vessel[!is.na(div_value_nb_family_year),div_simpson_seq_family_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [!is.na(FAMILY_COD_FAO)] 
            [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by the number of occurence in fishing sequence) fished family per vessel










data_vessel[,div_simpson_weight_family_year:=NA_real_]

data_vessel[!is.na(div_value_nb_family_year),div_simpson_weight_family_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(FAMILY_COD_FAO)]
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by fishing weight) fished family per vessel














data_vessel[,div_shannon_marees_family_year:=NA_real_]

data_vessel[!is.na(div_value_nb_family_year),div_shannon_marees_family_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "MAREE_ID")
          [!is.na(FAMILY_COD_FAO)] #removing unidentified family from the diversity estimate
            [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by the number of occurence in marees) fished family per vessel





data_vessel[,div_shannon_seq_family_year:=NA_real_]

data_vessel[!is.na(div_value_nb_family_year),div_shannon_seq_family_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [!is.na(FAMILY_COD_FAO)] 
            [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by the number of occurence in fishing sequence) fished family per vessel







data_vessel[,div_shannon_weight_family_year:=NA_real_]

data_vessel[!is.na(div_value_nb_family_year),div_shannon_weight_family_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(FAMILY_COD_FAO)]
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
                [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by fishing weight) fished family per vessel














#2) Marees scale






#We then considered how such indexes could vary among marees:


data_vessel[,div_value_nb_family_mean_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "FAMILY_COD_FAO")
          [ ,mean(., na.rm=T),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ] 
 #assigns the mean (yearly) fished families number per marées for each vessels 






data_vessel[,div_nb_family_sd_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "FAMILY_COD_FAO")
          [ ,pop.sd(na.omit(.)),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ]
        #assigns the variability (standard deviation) in (yearly) fished families number per marées for each vessels 





data_vessel[,div_simpson_seq_family_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_family_mean_marees),div_simpson_seq_family_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO)] 
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ]            
 #assigns the mean (yearly) simpson diversity index (abundance estimated by number of sequence) per marées for each vessels 





data_vessel[,div_simpson_seq_family_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_family_mean_marees),div_simpson_seq_family_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO)] 
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,pop.sd(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ] 
         #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by number of sequence) per marées for each vessels 






data_vessel[,div_simpson_weight_family_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_family_mean_marees),div_simpson_weight_family_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ] 
 #assigns the mean (yearly) simpson diversity index (abundance estimated by fishing weight) per marées for each vessels 





data_vessel[,div_simpson_weight_family_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_family_mean_marees),div_simpson_weight_family_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,pop.sd(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ]
         #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by fishing weight) per marées for each vessels 











data_vessel[,div_shannon_seq_family_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_family_mean_marees),div_shannon_seq_family_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO)] 
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ]            
 #assigns the mean (yearly) shannon diversity index (abundance estimated by number of sequence) per marées for each vessels 





data_vessel[,div_shannon_seq_family_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_family_mean_marees),div_shannon_seq_family_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO)] 
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,pop.sd(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ] 
         #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by number of sequence) per marées for each vessels 






data_vessel[,div_shannon_weight_family_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_family_mean_marees),div_shannon_weight_family_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO)]
              [!is.na(.)]
                [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ] 
 #assigns the mean (yearly) shannon diversity index (abundance estimated by fishing weight) per marées for each vessels 





data_vessel[,div_shannon_weight_family_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_family_mean_marees),div_shannon_weight_family_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,pop.sd(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ]
         #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by fishing weight) per marées for each vessels 














#3) Sequence scale




#We then considered how such indexes could vary among sequence:




data_vessel[,div_value_nb_family_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SEQ_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "FAMILY_COD_FAO")
          [, mean(., na.rm=T),by= NAVS_COD_YEAR]
            [,V1] ]
 #assigns the mean (yearly) fished family number per fishing sequence for each vessels 






data_vessel[,div_nb_family_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SEQ_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "FAMILY_COD_FAO")
          [, pop.sd(na.omit(.)),by= NAVS_COD_YEAR]
            [,V1] ]
         #assigns the variability (standard deviation) in (yearly) fished family number per fishing sequence for each vessels 







data_vessel[,div_simpson_weight_family_mean_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_family_year),div_simpson_weight_family_mean_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(FAMILY_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,mean(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the mean (yearly) simpson diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 





data_vessel[,div_simpson_weight_family_sd_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_family_year),div_simpson_weight_family_sd_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(FAMILY_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,pop.sd(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
        #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 










data_vessel[,div_shannon_weight_family_mean_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_family_year),div_shannon_weight_family_mean_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(FAMILY_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,mean(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the mean (yearly) shannon diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 





data_vessel[,div_shannon_weight_family_sd_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_family_year),div_shannon_weight_family_sd_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(FAMILY_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,pop.sd(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
        #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels  





```

####Order level

```{r fishing activity - Fished taxa diversity (order)}





  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "ORDER_COD_FAO")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 0.2% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "ORDER_COD_FAO")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on fished orders, many vessels (32% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "ORDER_COD_FAO")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "ORDER_COD_FAO")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 3% +/- 6 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(ORDER_COD_FAO),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(ORDER_COD_FAO),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred


# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$ORDER_COD_FAO)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier (e.g. some chalut jumeaux in 2023) are significantly associated to the presence or not of missing data on fished order (less declaration in these metier ?) 







#1) Year scale




data_vessel[,div_value_nb_order_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),   
          value.var = "ORDER_COD_FAO")[,.]]  #amount of fish (economic value) per year








data_vessel[,div_simpson_marees_order_year:=NA_real_]

data_vessel[!is.na(div_value_nb_order_year),div_simpson_marees_order_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "MAREE_ID")
          [!is.na(ORDER_COD_FAO)] #removing unidentified order from the diversity estimate
            [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by the number of occurence in marees) fished order per vessel





data_vessel[,div_simpson_seq_order_year:=NA_real_]

data_vessel[!is.na(div_value_nb_order_year),div_simpson_seq_order_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [!is.na(ORDER_COD_FAO)] 
            [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by the number of occurence in fishing sequence) fished order per vessel










data_vessel[,div_simpson_weight_order_year:=NA_real_]

data_vessel[!is.na(div_value_nb_order_year),div_simpson_weight_order_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ORDER_COD_FAO)]
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                [,V1] ]
 # compute the yearly simpson diversity index (abundance estimate by fishing weight) fished order per vessel














data_vessel[,div_shannon_marees_order_year:=NA_real_]

data_vessel[!is.na(div_value_nb_order_year),div_shannon_marees_order_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "MAREE_ID")
          [!is.na(ORDER_COD_FAO)] #removing unidentified order from the diversity estimate
            [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by the number of occurence in marees) fished order per vessel





data_vessel[,div_shannon_seq_order_year:=NA_real_]

data_vessel[!is.na(div_value_nb_order_year),div_shannon_seq_order_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [!is.na(ORDER_COD_FAO)] 
            [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
              [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by the number of occurence in fishing sequence) fished order per vessel







data_vessel[,div_shannon_weight_order_year:=NA_real_]

data_vessel[!is.na(div_value_nb_order_year),div_shannon_weight_order_year:=
   dcast(SACROIS,
         NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ORDER_COD_FAO)]
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
                [,V1] ]
 # compute the yearly shannon diversity index (abundance estimate by fishing weight) fished order per vessel














#2) Marees scale





#We then considered how such indexes could vary among marees:


data_vessel[,div_value_nb_order_mean_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ORDER_COD_FAO")
          [ ,mean(., na.rm=T),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ] 
 #assigns the mean (yearly) fished orders number per marées for each vessels 






data_vessel[,div_nb_order_sd_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ORDER_COD_FAO")
          [ ,pop.sd(na.omit(.)),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ]
        #assigns the variability (standard deviation) in (yearly) fished orders number per marées for each vessels 





data_vessel[,div_simpson_seq_order_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_order_mean_marees),div_simpson_seq_order_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO)] 
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ]            
 #assigns the mean (yearly) simpson diversity index (abundance estimated by number of sequence) per marées for each vessels 





data_vessel[,div_simpson_seq_order_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_order_mean_marees),div_simpson_seq_order_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO)] 
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,pop.sd(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ] 
         #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by number of sequence) per marées for each vessels 






data_vessel[,div_simpson_weight_order_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_order_mean_marees),div_simpson_weight_order_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ] 
 #assigns the mean (yearly) simpson diversity index (abundance estimated by fishing weight) per marées for each vessels 





data_vessel[,div_simpson_weight_order_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_order_mean_marees),div_simpson_weight_order_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,pop.sd(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ]
         #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by fishing weight) per marées for each vessels 











data_vessel[,div_shannon_seq_order_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_order_mean_marees),div_shannon_seq_order_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO)] 
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ]            
 #assigns the mean (yearly) shannon diversity index (abundance estimated by number of sequence) per marées for each vessels 





data_vessel[,div_shannon_seq_order_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_order_mean_marees),div_shannon_seq_order_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO)] 
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,pop.sd(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ] 
         #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by number of sequence) per marées for each vessels 






data_vessel[,div_shannon_weight_order_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_order_mean_marees),div_shannon_weight_order_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO)]
              [!is.na(.)]
                [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ] 
 #assigns the mean (yearly) shannon diversity index (abundance estimated by fishing weight) per marées for each vessels 





data_vessel[,div_shannon_weight_order_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_order_mean_marees),div_shannon_weight_order_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,pop.sd(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ]
         #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by fishing weight) per marées for each vessels 











#3) Sequence scale




#We then considered how such indexes could vary among sequence:




data_vessel[,div_value_nb_order_mean_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SEQ_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ORDER_COD_FAO")
          [, mean(., na.rm=T),by= NAVS_COD_YEAR]
            [,V1] ]
 #assigns the mean (yearly) fished order number per fishing sequence for each vessels 






data_vessel[,div_nb_order_sd_seq:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SEQ_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ORDER_COD_FAO")
          [, pop.sd(na.omit(.)),by= NAVS_COD_YEAR]
            [,V1] ]
         #assigns the variability (standard deviation) in (yearly) fished order number per fishing sequence for each vessels 







data_vessel[,div_simpson_weight_order_mean_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_order_year),div_simpson_weight_order_mean_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ORDER_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,mean(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the mean (yearly) simpson diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 





data_vessel[,div_simpson_weight_order_sd_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_order_year),div_simpson_weight_order_sd_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ORDER_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,pop.sd(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
        #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 










data_vessel[,div_shannon_weight_order_mean_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_order_year),div_shannon_weight_order_mean_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ORDER_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,mean(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the mean (yearly) shannon diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 





data_vessel[,div_shannon_weight_order_sd_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_order_year),div_shannon_weight_order_sd_seq:=
   dcast(SACROIS,
         NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ORDER_COD_FAO)] 
            [!is.na(.)]
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,SEQ_ID)]
                [ ,pop.sd(V1),by= NAVS_COD_YEAR]
                  [,V1] ]
        #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels  



```

####ISSCAAP code level

```{r fishing activity - Fished taxa diversity (isscaap code)}




  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "ISSCAAP_COD_FAO")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 0.2% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "ISSCAAP_COD_FAO")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on fished isscaap codes, many vessels (32% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "ISSCAAP_COD_FAO")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "ISSCAAP_COD_FAO")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 3% +/- 6 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(ISSCAAP_COD_FAO),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(ISSCAAP_COD_FAO),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred


# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$ISSCAAP_COD_FAO)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier are significantly associated to the presence or not of missing data on fished isscaap codes (probably because some metier do not declare their catch at this level of precision but rather at higher taxa) 






#1) Year scale




data_vessel[,div_value_nb_isscaap_year:=
                dcast(SACROIS,
                      NAVS_COD_YEAR ~ ., 
                      fun.aggregate = function(x) lengthna(unique(na.omit(x))),   
                      value.var = "ISSCAAP_COD_FAO")[,.]]  #amount of fish (economic value) per year








data_vessel[,div_simpson_marees_isscaap_year:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_year),div_simpson_marees_isscaap_year:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
                      fun.aggregate = function(x) length(unique(x)),
                      value.var = "MAREE_ID")
            [!is.na(ISSCAAP_COD_FAO)] #removing unidentified isscaap code from the diversity estimate
            [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
            [,V1] ]
# compute the yearly simpson diversity index (abundance estimate by the number of occurence in marees) fished isscaap code per vessel





data_vessel[,div_simpson_seq_isscaap_year:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_year),div_simpson_seq_isscaap_year:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
                      fun.aggregate = function(x) length(unique(x)),
                      value.var = "SEQ_ID")
            [!is.na(ISSCAAP_COD_FAO)] 
            [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
            [,V1] ]
# compute the yearly simpson diversity index (abundance estimate by the number of occurence in fishing sequence) fished isscaap code per vessel










data_vessel[,div_simpson_weight_isscaap_year:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_year),div_simpson_weight_isscaap_year:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
                      fun.aggregate = sumna,
                      value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ISSCAAP_COD_FAO)]
            [!is.na(.)]
            [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
            [,V1] ]
# compute the yearly simpson diversity index (abundance estimate by fishing weight) fished isscaap code per vessel














data_vessel[,div_shannon_marees_isscaap_year:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_year),div_shannon_marees_isscaap_year:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
                      fun.aggregate = function(x) length(unique(x)),
                      value.var = "MAREE_ID")
            [!is.na(ISSCAAP_COD_FAO)] #removing unidentified isscaap code from the diversity estimate
            [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
            [,V1] ]
# compute the yearly shannon diversity index (abundance estimate by the number of occurence in marees) fished isscaap code per vessel





data_vessel[,div_shannon_seq_isscaap_year:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_year),div_shannon_seq_isscaap_year:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
                      fun.aggregate = function(x) length(unique(x)),
                      value.var = "SEQ_ID")
            [!is.na(ISSCAAP_COD_FAO)] 
            [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
            [,V1] ]
# compute the yearly shannon diversity index (abundance estimate by the number of occurence in fishing sequence) fished isscaap code per vessel







data_vessel[,div_shannon_weight_isscaap_year:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_year),div_shannon_weight_isscaap_year:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
                      fun.aggregate = sumna,
                      value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ISSCAAP_COD_FAO)]
            [!is.na(.)]
            [,diversity(., index = "shannon"), by = NAVS_COD_YEAR]
            [,V1] ]
# compute the yearly shannon diversity index (abundance estimate by fishing weight) fished isscaap code per vessel














#2) Marees scale





#We then considered how such indexes could vary among marees:


data_vessel[,div_value_nb_isscaap_mean_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ISSCAAP_COD_FAO")
          [ ,mean(., na.rm=T),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ] 
 #assigns the mean (yearly) fished isscaap codes number per marées for each vessels 






data_vessel[,div_nb_isscaap_sd_marees:=
  dcast(SACROIS,
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ISSCAAP_COD_FAO")
          [ ,pop.sd(na.omit(.)),by= 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR] ]
            [order(SACROIS)] 
              [,V1] ]
        #assigns the variability (standard deviation) in (yearly) fished isscaap codes number per marées for each vessels 





data_vessel[,div_simpson_seq_isscaap_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_mean_marees),div_simpson_seq_isscaap_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ISSCAAP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO)] 
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ]            
 #assigns the mean (yearly) simpson diversity index (abundance estimated by number of sequence) per marées for each vessels 





data_vessel[,div_simpson_seq_isscaap_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_mean_marees),div_simpson_seq_isscaap_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ISSCAAP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO)] 
              [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,pop.sd(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ] 
         #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by number of sequence) per marées for each vessels 






data_vessel[,div_simpson_weight_isscaap_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_mean_marees),div_simpson_weight_isscaap_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ISSCAAP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ] 
 #assigns the mean (yearly) simpson diversity index (abundance estimated by fishing weight) per marées for each vessels 





data_vessel[,div_simpson_weight_isscaap_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_mean_marees),div_simpson_weight_isscaap_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ISSCAAP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,pop.sd(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ]
         #assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by fishing weight) per marées for each vessels 











data_vessel[,div_shannon_seq_isscaap_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_mean_marees),div_shannon_seq_isscaap_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ISSCAAP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO)] 
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ]            
 #assigns the mean (yearly) shannon diversity index (abundance estimated by number of sequence) per marées for each vessels 





data_vessel[,div_shannon_seq_isscaap_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_mean_marees),div_shannon_seq_isscaap_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ISSCAAP_COD_FAO ~ ., 
         fun.aggregate = function(x) length(unique(x)),
         value.var = "SEQ_ID")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO)] 
              [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,pop.sd(V1),by= 
                    NAVS_COD_YEAR ]
                  [order(NAVS_COD_YEAR)] 
                    [,V1] ] 
         #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by number of sequence) per marées for each vessels 






data_vessel[,div_shannon_weight_isscaap_mean_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_mean_marees),div_shannon_weight_isscaap_mean_marees:=
   dcast(SACROIS,
         MAREE_ID+ISSCAAP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO)]
              [!is.na(.)]
                [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ] 
 #assigns the mean (yearly) shannon diversity index (abundance estimated by fishing weight) per marées for each vessels 





data_vessel[,div_shannon_weight_isscaap_sd_marees:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_mean_marees),div_shannon_weight_isscaap_sd_marees:=
   dcast(SACROIS,
         MAREE_ID+ISSCAAP_COD_FAO ~ ., 
         fun.aggregate = sumna,
         value.var = "QUANT_POIDS_VIF_SACROIS")
          [,div_NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO)] 
              [!is.na(.)]
                [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,pop.sd(V1),by= 
                      NAVS_COD_YEAR ]
                    [order(NAVS_COD_YEAR)] 
                      [,V1] ]
         #assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by fishing weight) per marées for each vessels 















#3) Sequence scale




#We then considered how such indexes could vary among sequence:




data_vessel[,div_value_nb_isscaap_mean_seq:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+SEQ_ID~., 
                      fun.aggregate = function(x) lengthna(unique(na.omit(x))),
                      value.var = "ISSCAAP_COD_FAO")
            [, mean(., na.rm=T),by= NAVS_COD_YEAR]
            [,V1] ]
#assigns the mean (yearly) fished isscaap code number per fishing sequence for each vessels 






data_vessel[,div_nb_isscaap_sd_seq:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+SEQ_ID~., 
                      fun.aggregate = function(x) lengthna(unique(na.omit(x))),
                      value.var = "ISSCAAP_COD_FAO")
            [, pop.sd(na.omit(.)),by= NAVS_COD_YEAR]
            [,V1] ]
#assigns the variability (standard deviation) in (yearly) fished isscaap code number per fishing sequence for each vessels 







data_vessel[,div_simpson_weight_isscaap_mean_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_year),div_simpson_weight_isscaap_mean_seq:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO ~ ., 
                      fun.aggregate = sumna,
                      value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ISSCAAP_COD_FAO)] 
            [!is.na(.)]
            [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,SEQ_ID)]
            [ ,mean(V1),by= NAVS_COD_YEAR]
            [,V1] ]
#assigns the mean (yearly) simpson diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 





data_vessel[,div_simpson_weight_isscaap_sd_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_year),div_simpson_weight_isscaap_sd_seq:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO ~ ., 
                      fun.aggregate = sumna,
                      value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ISSCAAP_COD_FAO)] 
            [!is.na(.)]
            [,diversity(., index = "simpson"), by = .(NAVS_COD_YEAR,SEQ_ID)]
            [ ,pop.sd(V1),by= NAVS_COD_YEAR]
            [,V1] ]
#assigns the variability (standard deviation) in (yearly) simpson diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 










data_vessel[,div_shannon_weight_isscaap_mean_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_year),div_shannon_weight_isscaap_mean_seq:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO ~ ., 
                      fun.aggregate = sumna,
                      value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ISSCAAP_COD_FAO)] 
            [!is.na(.)]
            [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,SEQ_ID)]
            [ ,mean(V1),by= NAVS_COD_YEAR]
            [,V1] ]
#assigns the mean (yearly) shannon diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels 





data_vessel[,div_shannon_weight_isscaap_sd_seq:=NA_real_]

data_vessel[!is.na(div_value_nb_isscaap_year),div_shannon_weight_isscaap_sd_seq:=
                dcast(SACROIS,
                      NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO ~ ., 
                      fun.aggregate = sumna,
                      value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ISSCAAP_COD_FAO)] 
            [!is.na(.)]
            [,diversity(., index = "shannon"), by = .(NAVS_COD_YEAR,SEQ_ID)]
            [ ,pop.sd(V1),by= NAVS_COD_YEAR]
            [,V1] ]
#assigns the variability (standard deviation) in (yearly) shannon diversity index (abundance estimated by fishing weight) per fishing sequence for each vessels  



```



###Main targeted taxa

####Species level

```{r fishing activity - Main target (species)}



#There is a probable issue in the way of representing fished taxa, it may exist some fishing activity for which some taxa are actively targeted but remain a minority because of their scarcity (e.g. langouste ?), for better accuracy it might be more efficient to represent all species proportion (but can this overwhelming amount of data be handled ? still taken into account by metrics based on fishing effort (highlighting frequent targeting but scarcity in volumes) ?) 



#1) Main fished species



#a) Year scale


data_vessel[,main_spe_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_spe_year),main_spe_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ESP2_COD_FAO")
          [!is.na(ESP2_COD_FAO)]
            [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main fished species (in sequence number) in a year for each vessel



#alternative method, way longer:

# data_vessel[,main_spe_nb_year:=NA]
# 
# data_vessel[!is.na(value_nb_spe_year),main_spe_nb_year:=
#     dcast(SACROIS,
#           NAVS_COD_YEAR ~ ., 
#           fun.aggregate = function(x) {
#             y=table(x)  # in the case of vessels with only missing value, return logical(0)
#             names(y[y==max(c(y,0))])[1] #a 0 is added in the vector submitted to the max function to avoid warning message (because max(c(NA,NA,NA)) or max(logical(0)) return -Inf with a warning message, while here 0 values are attributed in this case, and as there is no 0 values possible in the y vector finally return NULL values when y=logical(0)
#           }, 
#           value.var = "ESP2_COD_FAO",
#           fill=NA)[,.]] #the option fill=NA allow to remove all lines with NULL values




#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_spe_effort_year:=NA_character_]

data_vessel[!is.na(mean_spe_value_effort_year),main_spe_effort_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
#assigns the main fished species (in fishing effort) in a year for each vessel





data_vessel[,main_spe_weight_year:=NA_character_]

data_vessel[!is.na(mean_spe_value_weight_year),main_spe_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
#assigns the main fished species (in fishing weight) in a year for each vessel







data_vessel[,main_spe_weight.prod_year:=NA_character_]

data_vessel[!is.na(mean_spe_value_weight.prod_year),main_spe_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
#assigns the main fished species (in fishing productivity) in a year for each vessel







data_vessel[,main_spe_eco_year:=NA_character_]

data_vessel[!is.na(mean_spe_value_eco_year),main_spe_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
 #assigns the main fished species (in fishing economic value) in a year for each vessel






data_vessel[,main_spe_eco.prod_year:=NA_character_]

data_vessel[!is.na(mean_spe_value_eco.prod_year),main_spe_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
#assigns the main fished species (in fishing economic productivity) in a year for each vessel







#Interestingly the main fished species change a lot depending on how we estimate it (in 2023)






data_vessel[,prop_spe_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_spe_year),prop_spe_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ESP2_COD_FAO")
          [!is.na(ESP2_COD_FAO)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values










data_vessel[,prop_spe_weight_year:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_year),prop_spe_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main fished species (in fishing weight) in a year for each vessel









data_vessel[,prop_spe_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight.prod_year),prop_spe_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished species (in fishing productivity) in a year for each vessel













data_vessel[,prop_spe_eco_year:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_year),prop_spe_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished species (in fishing economic value) in a year for each vessel










data_vessel[,prop_spe_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco.prod_year),prop_spe_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished species (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_spe_effort_year:=NA_real_]

data_vessel[!is.na(mean_spe_value_effort_year),value_main_spe_effort_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main fished species in a year for each vessel





data_vessel[,prop_spe_effort_year:=value_main_spe_effort_year/effort_year]


 #assigns the proportion of the main fished species (in fishing effort) in a year for each vessel




data_vessel[,value_main_spe_weight_year:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_year),value_main_spe_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main fished species in a year for each vessel







data_vessel[,value_main_spe_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight.prod_year),value_main_spe_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main fished species in a year for each vessel











data_vessel[,value_main_spe_eco_year:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_year),value_main_spe_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main fished species in a year for each vessel










data_vessel[,value_main_spe_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco.prod_year),value_main_spe_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main fished species in a year for each vessel


















#As fishing activity often vary among marees, we also explored how it could impact estimation of the main fished taxon




#b) Maree scale


#Potential issue: at the maree scale most of fished species are fished the same amount of time (in term of sequence number, but also using quantitative metrics), the main species in term of fishing sequence is thus often a random sampling in the species fished during the marees... The second methodology presented here (mean across marees) should be more accurate




data_vessel[,main_spe_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_spe_mean_marees),main_spe_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ESP2_COD_FAO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of species captured during the trip 
            [!is.na(ESP2_COD_FAO)] #removal of non attributed species
              [,.(.==max(.),ESP2_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present species) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ESP2_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present species) between marees 
                              [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ] #selection of the first value if there is equality

 #assigns the main fished species (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_spe_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_spe_mean_marees),main_mean_spe_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ESP2_COD_FAO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of species captured during the trip 
              [!is.na(ESP2_COD_FAO)]
                [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] # average the number of occurrence of species between marees
                  [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] # select the species with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ]
#assigns the main fished species (using mean sequence number between marees) among marees for each vessel









data_vessel[,main_spe_effort_marees:=NA_character_]

data_vessel[!is.na(mean_spe_value_effort_mean_marees),main_spe_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ESP2_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ESP2_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ] 
 #assigns the main fished species (using fishing effort within marees) among marees for each vessel




data_vessel[,main_mean_spe_effort_marees:=NA_character_]

data_vessel[!is.na(mean_spe_value_effort_mean_marees),main_mean_spe_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ESP2_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)]
                  [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ]
 #assigns the main fished species (using mean fishing effort between marees) among marees for each vessel











data_vessel[,main_spe_weight_marees:=NA_character_]

data_vessel[!is.na(mean_spe_value_weight_mean_marees),main_spe_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ESP2_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ESP2_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ] 
 #assigns the main fished species (using fishing weight within marees) among marees for each vessel





data_vessel[,main_mean_spe_weight_marees:=NA_character_]

data_vessel[!is.na(mean_spe_value_weight_mean_marees),main_mean_spe_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ESP2_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)]
                  [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ]
#assigns the main fished species (using mean fishing weight between marees) among marees for each vessel












data_vessel[,main_spe_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_spe_value_weight.prod_mean_marees),main_spe_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ESP2_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ESP2_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ] 
 #assigns the main fished species (using fishing productivity within marees) among marees for each vessel





data_vessel[,main_mean_spe_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_spe_value_weight.prod_mean_marees),main_mean_spe_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ESP2_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)]
                  [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ]
#assigns the main fished species (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,main_spe_eco_marees:=NA_character_]

data_vessel[!is.na(mean_spe_value_eco_mean_marees),main_spe_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ESP2_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ESP2_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ] 
 #assigns the main fished species (using fishing economic value within marees) among marees for each vessel





data_vessel[,main_mean_spe_eco_marees:=NA_character_]

data_vessel[!is.na(mean_spe_value_eco_mean_marees),main_mean_spe_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ESP2_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)]
                  [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ]
#assigns the main fished species (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,main_spe_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_spe_value_eco.prod_mean_marees),main_spe_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ESP2_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ESP2_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ] 
 #assigns the main fished species (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,main_mean_spe_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_spe_value_eco.prod_mean_marees),main_mean_spe_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ESP2_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)]
                  [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ]
#assigns the main fished species (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main fished species change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_spe_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_spe_mean_marees),prop_spe_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ESP2_COD_FAO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ESP2_COD_FAO)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main fished species (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_spe_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_spe_mean_marees),prop_mean_spe_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ESP2_COD_FAO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main fished species (using mean sequence number between marees) among marees for each vessel










data_vessel[,prop_spe_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_effort_mean_marees),prop_spe_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
         [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ESP2_COD_FAO) & !is.na(.)] 
            [!duplicated(MAREE_ID),sum:=dcast(SACROIS[!is.na(TP_NAVIRE_SACROIS) & !is.na(ESP2_COD_FAO)],
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sum,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
              [,max(.)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] #necessary to remove NA (coming from 0/0 divisions)
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished species (using fishing effort within marees) between marees for each vessel




data_vessel[,prop_mean_spe_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_effort_mean_marees),prop_mean_spe_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished species (using mean fishing effort between marees) among marees for each vessel

















data_vessel[,prop_spe_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_mean_marees),prop_spe_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ESP2_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished species (using fishing weight within marees) between marees for each vessel





data_vessel[,prop_mean_spe_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_mean_marees),prop_mean_spe_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished species (using mean fishing weight between marees) among marees for each vessel














data_vessel[,prop_spe_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight.prod_mean_marees),prop_spe_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ESP2_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished species (using fishing productivity within marees) between marees for each vessel





data_vessel[,prop_mean_spe_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight.prod_mean_marees),prop_mean_spe_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished species (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,prop_spe_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_mean_marees),prop_spe_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ESP2_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished species (using fishing economic value within marees) between marees for each vessel





data_vessel[,prop_mean_spe_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_mean_marees),prop_mean_spe_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished species (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,prop_spe_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco.prod_mean_marees),prop_spe_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ESP2_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished species (using fishing economic productivity within marees) between marees for each vessel





data_vessel[,prop_mean_spe_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco.prod_mean_marees),prop_mean_spe_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished species (using mean fishing economic productivity between marees) among marees for each vessel

















data_vessel[,value_spe_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_effort_mean_marees),value_spe_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_effort_marees),main_spe_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main species (value repeated for each vessel)
                    [ESP2_COD_FAO==ESP_MAJ, V1] ] #retaining only main species value

#assigns the mean fishing effort value for main fished species (using fishing effort within marees) among marees for each vessel




data_vessel[,value_mean_spe_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_effort_mean_marees),value_mean_spe_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing effort value for main fished species (using mean fishing effort between marees) among marees for each vessel













data_vessel[,value_spe_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_mean_marees),value_spe_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_weight_marees),main_spe_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ESP2_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing weight value for main fished species (using fishing weight within marees) among marees for each vessel




data_vessel[,value_mean_spe_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_mean_marees),value_mean_spe_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing weight value for main fished species (using mean fishing weight between marees) among marees for each vessel












data_vessel[,value_spe_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight.prod_mean_marees),value_spe_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_weight.prod_marees),main_spe_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ESP2_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing productivity value for main fished species (using fishing productivity within marees) among marees for each vessel




data_vessel[,value_mean_spe_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight.prod_mean_marees),value_mean_spe_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing productivity value for main fished species (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,value_spe_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_mean_marees),value_spe_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_eco_marees),main_spe_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ESP2_COD_FAO==ESP_MAJ, V1] ]

#assigns the mean fishing economic value for main fished species (using fishing economic value within marees) among marees for each vessel




data_vessel[,value_mean_spe_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_mean_marees),value_mean_spe_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic value for main fished species (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,value_spe_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco.prod_mean_marees),value_spe_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_eco.prod_marees),main_spe_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ESP2_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing economic productivity value for main fished species (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,value_mean_spe_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco.prod_mean_marees),value_mean_spe_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic productivity value for main fished species (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,sd_spe_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_effort_mean_marees),sd_spe_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_effort_marees),main_spe_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main species (value repeated for each vessel)
                    [ESP2_COD_FAO==ESP_MAJ, V1] ] #retaining only main species value

#assigns the variation (sd) in fishing effort value for main fished species (using fishing effort within marees) among marees for each vessel




data_vessel[,sd_mean_spe_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_effort_mean_marees),sd_mean_spe_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main fished species (using mean fishing effort between marees) among marees for each vessel













data_vessel[,sd_spe_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_mean_marees),sd_spe_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_weight_marees),main_spe_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ESP2_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing weight value for main fished species (using fishing weight within marees) among marees for each vessel




data_vessel[,sd_mean_spe_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_mean_marees),sd_mean_spe_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main fished species (using mean fishing weight between marees) among marees for each vessel












data_vessel[,sd_spe_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight.prod_mean_marees),sd_spe_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_weight.prod_marees),main_spe_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ESP2_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing productivity value for main fished species (using fishing productivity within marees) among marees for each vessel




data_vessel[,sd_mean_spe_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight.prod_mean_marees),sd_mean_spe_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main fished species (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,sd_spe_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_mean_marees),sd_spe_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_eco_marees),main_spe_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ESP2_COD_FAO==ESP_MAJ, V1] ]

#assigns the variation (sd) in fishing economic value for main fished species (using fishing economic value within marees) among marees for each vessel




data_vessel[,sd_mean_spe_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_mean_marees),sd_mean_spe_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main fished species (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,sd_spe_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco.prod_mean_marees),sd_spe_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_eco.prod_marees),main_spe_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ESP2_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main fished species (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,sd_mean_spe_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco.prod_mean_marees),sd_mean_spe_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main fished species (using mean fishing economic productivity between marees) among marees for each vessel






















#c) Sequence scale








data_vessel[,main_mean_spe_effort_seq:=NA_character_]

data_vessel[!is.na(mean_spe_value_effort_year),main_mean_spe_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,.(.==max(.),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
              [V1==T]
                [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ]
#assigns the main fished species using mean fishing effort between sequences for each vessel







data_vessel[,main_spe_weight_seq:=NA_character_]

data_vessel[!is.na(mean_spe_value_weight_year),main_spe_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ESP2_COD_FAO,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,ESP2_COD_FAO) ]  
                      [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ]

 #assigns the main fished species (using fishing weight within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_spe_weight_seq:=NA_character_]

data_vessel[!is.na(mean_spe_value_weight_year),main_mean_spe_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,.(.==max(.),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
              [V1==T]
                [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ] #assigns the main fished species using mean fishing weight between fishing sequences for each vessel










#No computation of main fished taxa through major fishing productivity inside a sequence because equivalent to the estimate about weight (or eco), because corrected by a constant fishing effort within a same sequence 


data_vessel[,main_mean_spe_weight.prod_seq:=NA_character_]

data_vessel[!is.na(mean_spe_value_weight.prod_year),main_mean_spe_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_POIDS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,.(.==max(.),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
              [V1==T]
                [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ]
#assigns the main fished species using mean fishing productivity between sequences for each vessel













data_vessel[,main_spe_eco_seq:=NA_character_]

data_vessel[!is.na(mean_spe_value_eco_year),main_spe_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ESP2_COD_FAO,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,ESP2_COD_FAO) ]  
                      [ ,.(V1==max(V1),ESP2_COD_FAO),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ]

 #assigns the main fished species (using fishing economic value within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_spe_eco_seq:=NA_character_]

data_vessel[!is.na(mean_spe_value_eco_year),main_mean_spe_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,.(.==max(.),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
              [V1==T]
                [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ] #assigns the main fished species using mean fishing economic value between fishing sequences for each vessel













data_vessel[,main_mean_spe_eco.prod_seq:=NA_character_]

data_vessel[!is.na(mean_spe_value_eco.prod_year),main_mean_spe_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_ECO")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,.(.==max(.),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
              [V1==T]
                [!duplicated(NAVS_COD_YEAR), ESP2_COD_FAO] ]
#assigns the main fished species using mean fishing economic productivity between sequences for each vessel







#variability in estimates are again observed but with less variation when comparing to marees scale in most of cases (~4% of differences in 2023)











data_vessel[,prop_mean_spe_effort_seq:=NA_real_]


data_vessel[!is.na(mean_spe_value_effort_year),prop_mean_spe_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,.(max(.)/sum(.)),by= NAVS_COD_YEAR]             
              [, V1] ]

 #assigns the proportion of main fished species (using mean fishing effort between sequence) among sequence for each vessel








data_vessel[,prop_spe_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_year),prop_spe_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished species (using fishing weight within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_spe_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_year),prop_mean_spe_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,.(max(.)/sum(.),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
              [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished species (using mean fishing weight between sequence) among sequence for each vessel











data_vessel[,prop_mean_spe_weight.prod_seq:=NA_real_]


data_vessel[!is.na(mean_spe_value_weight.prod_year),prop_mean_spe_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_POIDS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,.(max(.)/sum(.)),by= NAVS_COD_YEAR]             
              [, V1] ]

 #assigns the proportion of main fished species (using mean fishing productivity between sequence) among sequence for each vessel











data_vessel[,prop_spe_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_year),prop_spe_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished species (using fishing economic value within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_spe_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_year),prop_mean_spe_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,.(max(.)/sum(.),ESP2_COD_FAO),by= NAVS_COD_YEAR]             
              [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished species (using mean fishing economic value between sequence) among sequence for each vessel






data_vessel[,prop_mean_spe_eco.prod_seq:=NA_real_]


data_vessel[!is.na(mean_spe_value_eco.prod_year),prop_mean_spe_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_ECO")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,.(max(.)/sum(.)),by= NAVS_COD_YEAR]             
              [, V1] ]

 #assigns the proportion of main fished species (using mean fishing economic productivity between sequence) among sequence for each vessel















data_vessel[,value_mean_spe_effort_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_effort_year),value_mean_spe_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,max(.),by= NAVS_COD_YEAR]             
              [,V1] ]  #assigns the fishing effort value of main fished species using mean fishing effort between fishing sequences for each vessel













data_vessel[,value_spe_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_year),value_spe_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_weight_seq),main_spe_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ESP2_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the fishing weight value of main fished species (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_spe_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_year),value_mean_spe_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,max(.),by= NAVS_COD_YEAR]             
              [,V1] ]
 #assigns the fishing weight value of main fished species using mean fishing weight between fishing sequences for each vessel











data_vessel[,value_mean_spe_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight.prod_year),value_mean_spe_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_POIDS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,max(.),by= NAVS_COD_YEAR]             
              [,V1] ]  #assigns the fishing effort value of main fished species using mean fishing productivity between fishing sequences for each vessel







data_vessel[,value_spe_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_year),value_spe_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_eco_seq),main_spe_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ESP2_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the fishing economic value of main fished species (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_spe_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_year),value_mean_spe_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,max(.),by= NAVS_COD_YEAR]             
              [,V1] ]
 #assigns the fishing economic value of main fished species using mean fishing economic value between fishing sequences for each vessel











data_vessel[,value_mean_spe_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco.prod_year),value_mean_spe_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_ECO")
          [!is.na(ESP2_COD_FAO) & !is.na(.)]
            [ ,max(.),by= NAVS_COD_YEAR]             
              [,V1] ]  #assigns the fishing effort value of main fished species using mean fishing economic productivity between fishing sequences for each vessel



















data_vessel[,sd_mean_spe_effort_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_effort_year),sd_mean_spe_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = list(V1=function(x) mean(x, na.rm=T), V2=function(x) pop.sd(na.omit(x))),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(TP_NAVIRE_SACROIS_V1)]
            [ ,.(max(TP_NAVIRE_SACROIS_V1)==TP_NAVIRE_SACROIS_V1, TP_NAVIRE_SACROIS_V2),by= NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),TP_NAVIRE_SACROIS_V2] ]    #assigns the variation (sd) in fishing effort value of main fished species using mean fishing effort between fishing sequences for each vessel







data_vessel[,sd_spe_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_year),sd_spe_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_weight_seq),main_spe_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ESP2_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing weight value of main fished species (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_spe_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight_year),sd_mean_spe_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = list(V1=function(x) mean(x, na.rm=T), V2=function(x) pop.sd(na.omit(x))),
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(QUANT_POIDS_VIF_SACROIS_V1)]
            [ ,.(max(QUANT_POIDS_VIF_SACROIS_V1)==QUANT_POIDS_VIF_SACROIS_V1, QUANT_POIDS_VIF_SACROIS_V2),by= NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),QUANT_POIDS_VIF_SACROIS_V2] ]    #assigns the variation (sd) in fishing weight value of main fished species using mean fishing weight between fishing sequences for each vessel










data_vessel[,sd_mean_spe_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_weight.prod_year),sd_mean_spe_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = list(V1=function(x) mean(x, na.rm=T), V2=function(x) pop.sd(na.omit(x))),
        value.var = "PROD_POIDS")
          [!is.na(ESP2_COD_FAO) & !is.na(PROD_POIDS_V1)]
            [ ,.(max(PROD_POIDS_V1)==PROD_POIDS_V1, PROD_POIDS_V2),by= NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),PROD_POIDS_V2] ]    #assigns the variation (sd) in fishing productivity value of main fished species using mean fishing productivity between fishing sequences for each vessel














data_vessel[,sd_spe_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_year),sd_spe_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(ESP2_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ESP2_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_spe_eco_seq),main_spe_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ESP2_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing economic value of main fished species (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_spe_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco_year),sd_mean_spe_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = list(V1=function(x) mean(x, na.rm=T), V2=function(x) pop.sd(na.omit(x))),
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ESP2_COD_FAO) & !is.na(MONTANT_EUROS_SACROIS_V1)]
            [ ,.(max(MONTANT_EUROS_SACROIS_V1)==MONTANT_EUROS_SACROIS_V1, MONTANT_EUROS_SACROIS_V2),by= NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MONTANT_EUROS_SACROIS_V2] ]    #assigns the variation (sd) in fishing economic value of main fished species using mean fishing economic value between fishing sequences for each vessel












data_vessel[,sd_mean_spe_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_spe_value_eco.prod_year),sd_mean_spe_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = list(V1=function(x) mean(x, na.rm=T), V2=function(x) pop.sd(na.omit(x))),
        value.var = "PROD_ECO")
          [!is.na(ESP2_COD_FAO) & !is.na(PROD_ECO_V1)]
            [ ,.(max(PROD_ECO_V1)==PROD_ECO_V1, PROD_ECO_V2),by= NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),PROD_ECO_V2] ]    #assigns the variation (sd) in fishing economic productivity value of main fished species using mean fishing economic productivity between fishing sequences for each vessel




```








######Frequent species associations


```{r fishing activity - Frequently associated species}


#2) Specific major fished species


basket=tapply(SACROIS$ESP2_COD_FAO, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$ESP2_COD_FAO, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of species (all species captured at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


target_species=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all species implied in a relevant association


target_species= str_extract(target_species, pattern="(?<=\\{)(.*)(?=\\})" )





remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()




SACROIS$ESP2_COD_FAO=as.factor(SACROIS$ESP2_COD_FAO)
#to properly consider the cases where vessels are not active in a given area, the areas must be considered as a factor variable




#there are many species that are frequently associated (59 in 2019-2022), it may be interesting to efficiently including all of them using data.table environment:



for (i in target_species) {
  data_vessel[,paste0("spe_prop_nb_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) {y=table(x); y[names(y)==i]/sum(y)},
              value.var = "ESP2_COD_FAO")
                [, .] #proportion of time the species of interest were fished among all fishing events
                  ]
}





for (i in target_species) {
  data_vessel[,paste0("spe_prop_weight_",i):=0]; #attribution of 0 value by default (no observed presence of the target species)
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_prop_weight_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [, .[.SD$ESP2_COD_FAO==i & !is.na(.SD$ESP2_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the species of interest (in terms of fishing weight), computed only when proven presence of the target species
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_spe_year)), paste0("spe_prop_weight_",i):=NA] #attribution of NA values when data not available to attest for the target species presence
}










for (i in target_species) {
  data_vessel[,paste0("spe_prop_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_prop_eco_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "MONTANT_EUROS_SACROIS")
                [, .[.SD$ESP2_COD_FAO==i & !is.na(.SD$ESP2_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the species of interest (in terms of fishing economic value)
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_spe_year)), paste0("spe_prop_eco_",i):=NA] 
}






for (i in target_species) {
    data_vessel[,paste0("spe_prop_effort_",i):=
                  SACROIS[, sumna(TP_NAVIRE_SACROIS[.SD$ESP2_COD_FAO==i][!duplicated(.SD$SEQ_ID)])/sumna(TP_NAVIRE_SACROIS[!duplicated(.SD$SEQ_ID)]), by= NAVS_COD_YEAR] #selecting only one occurrence in the sequence to avoid accounting several time the same effort
                    [,V1]
                      ]; #catches proportion of the species of interest (in terms of fishing effort)
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))==0, paste0("spe_prop_effort_",i):=0] #attribution of 0 value when no observed presence of the target species (NA values attributed when no data available on captured species and/or fishing effort)
  data_vessel[is.na(value_effort_year), paste0("spe_prop_effort_",i):=NA] #NA attributed when data on species is available but no data on fishing effort is available 
}

#Method use here way more efficient !!!!! => to be applied to all other functions ?





for (i in target_species) {
  data_vessel[,paste0("spe_prop_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_prop_weight.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_POIDS")
                [, .[.SD$ESP2_COD_FAO==i & !is.na(.SD$ESP2_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the species of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_spe_year)), paste0("spe_prop_weight.prod_",i):=NA] 
}






for (i in target_species) {
  data_vessel[,paste0("spe_prop_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_prop_eco.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_ECO")
                [, .[.SD$ESP2_COD_FAO==i & !is.na(.SD$ESP2_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the species of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_spe_year)), paste0("spe_prop_eco.prod_",i):=NA] 
}



















for (i in target_species) {
  data_vessel[,paste0("spe_weight_",i):=0]; #attribution of 0 value by default (no observed presence of the target species)
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_weight_",i):=
            SACROIS[ESP2_COD_FAO==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the species of interest (in terms of fishing weight), computed only when proven presence of the target species
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_spe_year)), paste0("spe_weight_",i):=NA] #attribution of NA values when data not available to attest for the target species presence
}


#Alternative way to compute proportion metrics: prop_weight_i=weight_i/weight_year, way faster !)





for (i in target_species) {
  data_vessel[,paste0("spe_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_eco_",i):=
            SACROIS[ESP2_COD_FAO==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the species of interest (in terms of fishing economic values), computed only when proven presence of the target species
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_spe_year)), paste0("spe_eco_",i):=NA]
}






for (i in target_species) {
  data_vessel[,paste0("spe_effort_",i):=0]; 
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_effort_",i):=
            SACROIS[ESP2_COD_FAO==i,][!duplicated(SEQ_ID), sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the species of interest (in terms of fishing effort), computed only when proven presence of the target species
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_spe_year)), paste0("spe_effort_",i):=NA]
}







for (i in target_species) {
  data_vessel[,paste0("spe_prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_prod_",i):=
            SACROIS[ESP2_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the species of interest (in terms of fishing productivity), computed only when proven presence of the target species
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_spe_year)), paste0("spe_prod_",i):=NA]
}






for (i in target_species) {
  data_vessel[,paste0("spe_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_eco.prod_",i):=
            SACROIS[ESP2_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the species of interest (in terms of fishing economic productivity), computed only when proven presence of the target species
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_spe_year)), paste0("spe_eco.prod_",i):=NA]
}











#mean values at the sequence level are also computed to obtain estimate less biased by missing values:





for (i in target_species) {
  data_vessel[,paste0("spe_prop_nb_",i,"_seq"):=
            SACROIS[, sumna(ESP2_COD_FAO==i)/length(na.omit(ESP2_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][, mean(V1, na.rm=T), by= NAVS_COD_YEAR] #proportion of species occurrence for each sequence
              [,V1]
                ]# mean proportion of time the species of interest were fished among all fishing sequence
}


#all variables computed at the sequence level (average value) are computationally expensive: expect about 20-40 minutes per loop...









for (i in target_species) {
  data_vessel[,paste0("spe_prop_weight_",i,"_seq"):=
                SACROIS[, sumna(QUANT_POIDS_VIF_SACROIS[ESP2_COD_FAO==i])/sumna(QUANT_POIDS_VIF_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1] # mean proportion (in terms of fishing weight) of species of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))==0,paste0("spe_prop_weight_",i,"_seq"):=0]; #attribution of 0 value when no observed presence of the target species (NA values attributed when no data available on captured species and/or fishing effort)
  data_vessel[is.na(value_weight_year), paste0("spe_prop_weight_",i):=NA] #NA attributed when data on species is available but no data on fishing weight is available
}













for (i in target_species) {
  data_vessel[,paste0("spe_prop_eco_",i,"_seq"):=
                SACROIS[, sumna(MONTANT_EUROS_SACROIS[ESP2_COD_FAO==i])/sumna(MONTANT_EUROS_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing economic value) of species of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))==0,paste0("spe_prop_eco_",i,"_seq"):=0];
  data_vessel[is.na(value_eco_year), paste0("spe_prop_eco_",i):=NA]
}









for (i in target_species) {
  data_vessel[,paste0("spe_prop_weight.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_POIDS[ESP2_COD_FAO==i])/sumna(PROD_POIDS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of species of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))==0,paste0("spe_prop_weight.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_weight.prod_year), paste0("spe_prop_weight.prod_",i):=NA]
}







for (i in target_species) {
  data_vessel[,paste0("spe_prop_eco.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_ECO[ESP2_COD_FAO==i])/sumna(PROD_ECO), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of species of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))==0,paste0("spe_prop_eco.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_eco.prod_year), paste0("spe_prop_eco.prod_",i):=NA]
}


















for (i in target_species) {
  data_vessel[,paste0("spe_weight_",i,"_seq"):=0]; #attribution of 0 value by default (no observed presence of the target species)
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_weight_",i,"_seq"):=
            SACROIS[ESP2_COD_FAO==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ESP2_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] #for vessels of interest, all sequences with identified species captured
                          [,V1/pres] ]; #mean fishing weight of the species of interest between sequences, computed only when proven presence of the target species
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_spe_year)), paste0("spe_weight_",i,"_seq"):=NA] #attribution of NA values when data not available to attest for the target species presence
}





for (i in target_species) {
  data_vessel[,paste0("spe_eco_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_eco_",i,"_seq"):=
            SACROIS[ESP2_COD_FAO==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ESP2_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic value of the species of interest between sequences, computed only when proven presence of the target species
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_spe_year)), paste0("spe_eco_",i,"_seq"):=NA] 
}






for (i in target_species) {
  data_vessel[,paste0("spe_effort_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_effort_",i,"_seq"):=
            SACROIS[ESP2_COD_FAO==i,]
              [!duplicated(SEQ_ID),sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR]
                [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ESP2_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                  [,V1/pres] ]; #mean fishing effort of the species of interest between sequences, computed only when proven presence of the target species
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_spe_year)), paste0("spe_effort_",i,"_seq"):=NA] 
}







for (i in target_species) {
  data_vessel[,paste0("spe_prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_prod_",i,"_seq"):=
            SACROIS[ESP2_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ESP2_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing productivity of the species of interest between sequences, computed only when proven presence of the target species
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_spe_year)), paste0("spe_prod_",i,"_seq"):=NA] 
}







for (i in target_species) {
  data_vessel[,paste0("spe_eco.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("spe_prop_nb_",i)))>0, paste0("spe_eco.prod_",i,"_seq"):=
            SACROIS[ESP2_COD_FAO==i, sumna(PROD_ECO), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ESP2_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic productivity of the species of interest between sequences, computed only when proven presence of the target species
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_spe_year)), paste0("spe_eco.prod_",i,"_seq"):=NA] 
}






```

####Group of species level

```{r fishing activity - Main target (group of species)}





#1) Main fished group of species



#a) Year scale


data_vessel[,main_spp_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_spp_year),main_spp_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "SPP_COD_FAO")
          [!is.na(SPP_COD_FAO)]
            [,.(.==max(.),SPP_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main fished group of species (in sequence number) in a year for each vessel






#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_spp_effort_year:=NA_character_]

data_vessel[!is.na(mean_spp_value_effort_year),main_spp_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(NAVS_COD_YEAR,SPP_COD_FAO)] #then sum of effort within maree for the same group of species
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [,.(V1==max(V1),SPP_COD_FAO),by = NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
#assigns the main fished group of species (in fishing effort) in a year for each vessel





data_vessel[,main_spp_weight_year:=NA_character_]

data_vessel[!is.na(mean_spp_value_weight_year),main_spp_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),SPP_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
#assigns the main fished group of species (in fishing weight) in a year for each vessel







data_vessel[,main_spp_weight.prod_year:=NA_character_]

data_vessel[!is.na(mean_spp_value_weight.prod_year),main_spp_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),SPP_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
#assigns the main fished group of species (in fishing productivity) in a year for each vessel







data_vessel[,main_spp_eco_year:=NA_character_]

data_vessel[!is.na(mean_spp_value_eco_year),main_spp_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),SPP_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
 #assigns the main fished group of species (in fishing economic value) in a year for each vessel






data_vessel[,main_spp_eco.prod_year:=NA_character_]

data_vessel[!is.na(mean_spp_value_eco.prod_year),main_spp_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),SPP_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
#assigns the main fished group of species (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_spp_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_spp_year),prop_spp_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "SPP_COD_FAO")
          [!is.na(SPP_COD_FAO)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values










data_vessel[,prop_spp_weight_year:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_year),prop_spp_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS") 
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main fished group of species (in fishing weight) in a year for each vessel









data_vessel[,prop_spp_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight.prod_year),prop_spp_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished group of species (in fishing productivity) in a year for each vessel













data_vessel[,prop_spp_eco_year:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_year),prop_spp_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished group of species (in fishing economic value) in a year for each vessel










data_vessel[,prop_spp_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco.prod_year),prop_spp_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished group of species (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_spp_effort_year:=NA_real_]

data_vessel[!is.na(mean_spp_value_effort_year),value_main_spp_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [,max(V1),by = NAVS_COD_YEAR]
                [,V1] ]
  #assigns the fishing effort value of the main fished group of species in a year for each vessel





data_vessel[,prop_spp_effort_year:=value_main_spp_effort_year/effort_year]


 #assigns the proportion of the main fished group of species (in fishing effort) in a year for each vessel




data_vessel[,value_main_spp_weight_year:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_year),value_main_spp_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main fished group of species in a year for each vessel







data_vessel[,value_main_spp_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight.prod_year),value_main_spp_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main fished group of species in a year for each vessel











data_vessel[,value_main_spp_eco_year:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_year),value_main_spp_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main fished group of species in a year for each vessel










data_vessel[,value_main_spp_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco.prod_year),value_main_spp_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main fished group of species in a year for each vessel


















#As fishing activity often vary among marees, we also explored how it could impact estimation of the main fished taxon




#b) Maree scale


#Potential issue: at the maree scale most of fished group of species are fished the same amount of time (in term of sequence number, but also using quantitative metrics), the main group of species in term of fishing sequence is thus often a random sampling in the group of species fished during the marees... The second methodology presented here (mean across marees) should be more accurate




data_vessel[,main_spp_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_spp_mean_marees),main_spp_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "SPP_COD_FAO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of group of species captured during the trip 
            [!is.na(SPP_COD_FAO)] #removal of non attributed group of species
              [,.(.==max(.),SPP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present group of species) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SPP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present group of species) between marees 
                              [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ] #selection of the first value if there is equality

 #assigns the main fished group of species (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_spp_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_spp_mean_marees),main_mean_spp_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "SPP_COD_FAO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of group of species captured during the trip 
              [!is.na(SPP_COD_FAO)]
                [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] # average the number of occurrence of group of species between marees
                  [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] # select the group of species with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ]
#assigns the main fished group of species (using mean sequence number between marees) among marees for each vessel









data_vessel[,main_spp_effort_marees:=NA_character_]

data_vessel[!is.na(mean_spp_value_effort_mean_marees),main_spp_effort_marees:=
  dcast(SACROIS, 
      MAREE_ID+SPP_COD_FAO+SEQ_ID~., 
      fun.aggregate = function(x) x[1],
      value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
        [,sumna(.), by= .(MAREE_ID,SPP_COD_FAO)] #then sum of effort within maree for the same group of species
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [,.(V1==max(V1),SPP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SPP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ] 
 #assigns the main fished group of species (using fishing effort within marees) among marees for each vessel




data_vessel[,main_mean_spp_effort_marees:=NA_character_]

data_vessel[!is.na(mean_spp_value_effort_mean_marees),main_mean_spp_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(MAREE_ID,SPP_COD_FAO)] #then sum of effort within maree for the same group of species
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(SPP_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
                  [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ]
 #assigns the main fished group of species (using mean fishing effort between marees) among marees for each vessel











data_vessel[,main_spp_weight_marees:=NA_character_]

data_vessel[!is.na(mean_spp_value_weight_mean_marees),main_spp_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,.(.==max(.),SPP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SPP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ] 
 #assigns the main fished group of species (using fishing weight within marees) among marees for each vessel





data_vessel[,main_mean_spp_weight_marees:=NA_character_]

data_vessel[!is.na(mean_spp_value_weight_mean_marees),main_mean_spp_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(SPP_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
                  [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ]
#assigns the main fished group of species (using mean fishing weight between marees) among marees for each vessel












data_vessel[,main_spp_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_spp_value_weight.prod_mean_marees),main_spp_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,.(.==max(.),SPP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SPP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ] 
 #assigns the main fished group of species (using fishing productivity within marees) among marees for each vessel





data_vessel[,main_mean_spp_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_spp_value_weight.prod_mean_marees),main_mean_spp_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(SPP_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
                  [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ]
#assigns the main fished group of species (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,main_spp_eco_marees:=NA_character_]

data_vessel[!is.na(mean_spp_value_eco_mean_marees),main_spp_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,.(.==max(.),SPP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SPP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ] 
 #assigns the main fished group of species (using fishing economic value within marees) among marees for each vessel





data_vessel[,main_mean_spp_eco_marees:=NA_character_]

data_vessel[!is.na(mean_spp_value_eco_mean_marees),main_mean_spp_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(SPP_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
                  [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ]
#assigns the main fished group of species (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,main_spp_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_spp_value_eco.prod_mean_marees),main_spp_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,.(.==max(.),SPP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SPP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ] 
 #assigns the main fished group of species (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,main_mean_spp_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_spp_value_eco.prod_mean_marees),main_mean_spp_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(SPP_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
                  [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ]
#assigns the main fished group of species (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main fished group of species change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_spp_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_spp_mean_marees),prop_spp_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "SPP_COD_FAO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SPP_COD_FAO)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main fished group of species (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_spp_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_spp_mean_marees),prop_mean_spp_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "SPP_COD_FAO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main fished group of species (using mean sequence number between marees) among marees for each vessel










data_vessel[,prop_spp_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_effort_mean_marees),prop_spp_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SPP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO) & !is.na(V1)] 
              [!duplicated(MAREE_ID),sum:=dcast(SACROIS[!is.na(TP_NAVIRE_SACROIS) & !is.na(SPP_COD_FAO)],
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sum,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
                [,max(V1)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the mean proportion of main fished group of species (using fishing effort within marees) between marees for each vessel




data_vessel[,prop_mean_spp_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_effort_mean_marees),prop_mean_spp_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SPP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(SPP_COD_FAO) & !is.na(V1)] 
                [,mean(V1),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
                  [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the proportion of main fished group of species (using mean fishing effort between marees) among marees for each vessel

















data_vessel[,prop_spp_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_mean_marees),prop_spp_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SPP_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished group of species (using fishing weight within marees) between marees for each vessel





data_vessel[,prop_mean_spp_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_mean_marees),prop_mean_spp_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished group of species (using mean fishing weight between marees) among marees for each vessel














data_vessel[,prop_spp_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight.prod_mean_marees),prop_spp_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SPP_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished group of species (using fishing productivity within marees) between marees for each vessel





data_vessel[,prop_mean_spp_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight.prod_mean_marees),prop_mean_spp_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished group of species (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,prop_spp_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_mean_marees),prop_spp_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SPP_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished group of species (using fishing economic value within marees) between marees for each vessel





data_vessel[,prop_mean_spp_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_mean_marees),prop_mean_spp_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished group of species (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,prop_spp_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco.prod_mean_marees),prop_spp_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SPP_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished group of species (using fishing economic productivity within marees) between marees for each vessel





data_vessel[,prop_mean_spp_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco.prod_mean_marees),prop_mean_spp_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished group of species (using mean fishing economic productivity between marees) among marees for each vessel

















data_vessel[,value_spp_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_effort_mean_marees),value_spp_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SPP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(SPP_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                  [order(NAVS_COD_YEAR)]
                    [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_effort_marees),main_spp_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main group of species (value repeated for each vessel)
                      [SPP_COD_FAO==ESP_MAJ, V1] ] #retaining only main group of species value

#assigns the mean fishing effort value for main fished group of species (using fishing effort within marees) among marees for each vessel




data_vessel[,value_mean_spp_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_effort_mean_marees),value_mean_spp_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SPP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(SPP_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                  [ ,max(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing effort value for main fished group of species (using mean fishing effort between marees) among marees for each vessel













data_vessel[,value_spp_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_mean_marees),value_spp_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_weight_marees),main_spp_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SPP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing weight value for main fished group of species (using fishing weight within marees) among marees for each vessel




data_vessel[,value_mean_spp_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_mean_marees),value_mean_spp_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing weight value for main fished group of species (using mean fishing weight between marees) among marees for each vessel












data_vessel[,value_spp_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight.prod_mean_marees),value_spp_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_weight.prod_marees),main_spp_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SPP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing productivity value for main fished group of species (using fishing productivity within marees) among marees for each vessel




data_vessel[,value_mean_spp_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight.prod_mean_marees),value_mean_spp_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing productivity value for main fished group of species (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,value_spp_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_mean_marees),value_spp_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_eco_marees),main_spp_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SPP_COD_FAO==ESP_MAJ, V1] ]

#assigns the mean fishing economic value for main fished group of species (using fishing economic value within marees) among marees for each vessel




data_vessel[,value_mean_spp_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_mean_marees),value_mean_spp_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic value for main fished group of species (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,value_spp_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco.prod_mean_marees),value_spp_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_eco.prod_marees),main_spp_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SPP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing economic productivity value for main fished group of species (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,value_mean_spp_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco.prod_mean_marees),value_mean_spp_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic productivity value for main fished group of species (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,sd_spp_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_effort_mean_marees),sd_spp_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SPP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [!is.na(SPP_COD_FAO) & !is.na(V1)]
                [,pop.sd(V1),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                  [order(NAVS_COD_YEAR)]
                    [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_effort_marees),main_spp_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main group of species (value repeated for each vessel)
                      [SPP_COD_FAO==ESP_MAJ, V1] ] #retaining only main group of species value

#assigns the variation (sd) in fishing effort value for main fished group of species (using fishing effort within marees) among marees for each vessel




data_vessel[,sd_mean_spp_effort_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_effort_mean_marees),sd_mean_spp_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SPP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [!is.na(SPP_COD_FAO) & !is.na(V1)]
                [,.(mean(V1),pop.sd(V1)),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                  [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                    [V1==T]
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main fished group of species (using mean fishing effort between marees) among marees for each vessel













data_vessel[,sd_spp_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_mean_marees),sd_spp_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_weight_marees),main_spp_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SPP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing weight value for main fished group of species (using fishing weight within marees) among marees for each vessel




data_vessel[,sd_mean_spp_weight_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_mean_marees),sd_mean_spp_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main fished group of species (using mean fishing weight between marees) among marees for each vessel












data_vessel[,sd_spp_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight.prod_mean_marees),sd_spp_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_weight.prod_marees),main_spp_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SPP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing productivity value for main fished group of species (using fishing productivity within marees) among marees for each vessel




data_vessel[,sd_mean_spp_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight.prod_mean_marees),sd_mean_spp_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main fished group of species (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,sd_spp_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_mean_marees),sd_spp_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_eco_marees),main_spp_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SPP_COD_FAO==ESP_MAJ, V1] ]

#assigns the variation (sd) in fishing economic value for main fished group of species (using fishing economic value within marees) among marees for each vessel




data_vessel[,sd_mean_spp_eco_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_mean_marees),sd_mean_spp_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main fished group of species (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,sd_spp_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco.prod_mean_marees),sd_spp_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_eco.prod_marees),main_spp_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SPP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main fished group of species (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,sd_mean_spp_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco.prod_mean_marees),sd_mean_spp_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main fished group of species (using mean fishing economic productivity between marees) among marees for each vessel



















#c) Sequence scale








data_vessel[,main_mean_spp_effort_seq:=NA_character_]

data_vessel[!is.na(mean_spp_value_effort_year),main_mean_spp_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)]
              [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ]
#assigns the main fished group of species using mean fishing effort between sequences for each vessel







data_vessel[,main_spp_weight_seq:=NA_character_]

data_vessel[!is.na(mean_spp_value_weight_year),main_spp_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),SPP_COD_FAO,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,SPP_COD_FAO) ]  
                      [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ]

 #assigns the main fished group of species (using fishing weight within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_spp_weight_seq:=NA_character_]

data_vessel[!is.na(mean_spp_value_weight_year),main_mean_spp_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ] #assigns the main fished group of species using mean fishing weight between fishing sequences for each vessel













data_vessel[,main_mean_spp_weight.prod_seq:=NA_character_]

data_vessel[!is.na(mean_spp_value_weight.prod_year),main_mean_spp_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ]
#assigns the main fished group of species using mean fishing productivity between sequences for each vessel













data_vessel[,main_spp_eco_seq:=NA_character_]

data_vessel[!is.na(mean_spp_value_eco_year),main_spp_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),SPP_COD_FAO,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,SPP_COD_FAO) ]  
                      [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ]

 #assigns the main fished group of species (using fishing economic value within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_spp_eco_seq:=NA_character_]

data_vessel[!is.na(mean_spp_value_eco_year),main_mean_spp_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ] #assigns the main fished group of species using mean fishing economic value between fishing sequences for each vessel













data_vessel[,main_mean_spp_eco.prod_seq:=NA_character_]

data_vessel[!is.na(mean_spp_value_eco.prod_year),main_mean_spp_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), SPP_COD_FAO] ]
#assigns the main fished group of species using mean fishing economic productivity between sequences for each vessel


















data_vessel[,prop_mean_spp_effort_seq:=NA_real_]


data_vessel[!is.na(mean_spp_value_effort_year),prop_mean_spp_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main fished group of species (using mean fishing effort between sequence) among sequence for each vessel








data_vessel[,prop_spp_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_year),prop_spp_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished group of species (using fishing weight within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_spp_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_year),prop_mean_spp_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished group of species (using mean fishing weight between sequence) among sequence for each vessel











data_vessel[,prop_mean_spp_weight.prod_seq:=NA_real_]


data_vessel[!is.na(mean_spp_value_weight.prod_year),prop_mean_spp_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main fished group of species (using mean fishing productivity between sequence) among sequence for each vessel











data_vessel[,prop_spp_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_year),prop_spp_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(SPP_COD_FAO) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished group of species (using fishing economic value within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_spp_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_year),prop_mean_spp_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished group of species (using mean fishing economic value between sequence) among sequence for each vessel






data_vessel[,prop_mean_spp_eco.prod_seq:=NA_real_]


data_vessel[!is.na(mean_spp_value_eco.prod_year),prop_mean_spp_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),SPP_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main fished group of species (using mean fishing economic productivity between sequence) among sequence for each vessel















data_vessel[,value_mean_spp_effort_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_effort_year),value_mean_spp_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished group of species using mean fishing effort between fishing sequences for each vessel













data_vessel[,value_spp_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_year),value_spp_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_weight_seq),main_spp_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [SPP_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the fishing weight value of main fished group of species (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_spp_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_year),value_mean_spp_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing weight value of main fished group of species using mean fishing weight between fishing sequences for each vessel











data_vessel[,value_mean_spp_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight.prod_year),value_mean_spp_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished group of species using mean fishing productivity between fishing sequences for each vessel







data_vessel[,value_spp_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_year),value_spp_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_eco_seq),main_spp_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [SPP_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the fishing economic value of main fished group of species (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_spp_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_year),value_mean_spp_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing economic value of main fished group of species using mean fishing economic value between fishing sequences for each vessel











data_vessel[,value_mean_spp_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco.prod_year),value_mean_spp_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished group of species using mean fishing economic productivity between fishing sequences for each vessel



















data_vessel[,sd_mean_spp_effort_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_effort_year),sd_mean_spp_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing effort value of main fished group of species using mean fishing effort between fishing sequences for each vessel







data_vessel[,sd_spp_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_year),sd_spp_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_weight_seq),main_spp_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [SPP_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing weight value of main fished group of species (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_spp_weight_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight_year),sd_mean_spp_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing weight value of main fished group of species using mean fishing weight between fishing sequences for each vessel










data_vessel[,sd_mean_spp_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_weight.prod_year),sd_mean_spp_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]      #assigns the variation (sd) in fishing productivity value of main fished group of species using mean fishing productivity between fishing sequences for each vessel














data_vessel[,sd_spp_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_year),sd_spp_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(SPP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,SPP_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_spp_eco_seq),main_spp_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [SPP_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing economic value of main fished group of species (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_spp_eco_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco_year),sd_mean_spp_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing economic value of main fished group of species using mean fishing economic value between fishing sequences for each vessel












data_vessel[,sd_mean_spp_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_spp_value_eco.prod_year),sd_mean_spp_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [!is.na(SPP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]   #assigns the variation (sd) in fishing economic productivity value of main fished group of species using mean fishing economic productivity between fishing sequences for each vessel




```




######Frequent group of species associations



```{r fishing activity - Frequently associated group of species}


#2) Specific major fished group of species


basket=tapply(SACROIS$SPP_COD_FAO, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$SPP_COD_FAO, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of group of species (all group of species captured at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


target_spp=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all group of species implied in a relevant association


target_spp= str_extract(target_spp, pattern="(?<=\\{)(.*)(?=\\})" )



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()



SACROIS$SPP_COD_FAO=as.factor(SACROIS$SPP_COD_FAO)
#to properly consider the cases where vessels are not active in a given area, the areas must be considered as a factor variable




#there are many group of species that are frequently associated (54 in 2019-2022), it may be interesting to efficiently including all of them using data.table environment:



for (i in target_spp) {
  data_vessel[,paste0("spp_prop_nb_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) {y=table(x); y[names(y)==i]/sum(y)},
              value.var = "SPP_COD_FAO")
                [, .] #proportion of time the group of species of interest were fished among all fishing events
                  ]
}





for (i in target_spp) {
  data_vessel[,paste0("spp_prop_weight_",i):=0]; #attribution of 0 value by default (no observed presence of the target group of species)
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_prop_weight_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [, .[.SD$SPP_COD_FAO==i & !is.na(.SD$SPP_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the group of species of interest (in terms of fishing weight), computed only when proven presence of the target group of species
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_spp_year)), paste0("spp_prop_weight_",i):=NA] #attribution of NA values when data not available to attest for the target group of species presence
}










for (i in target_spp) {
  data_vessel[,paste0("spp_prop_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_prop_eco_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "MONTANT_EUROS_SACROIS")
                [, .[.SD$SPP_COD_FAO==i & !is.na(.SD$SPP_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the group of species of interest (in terms of fishing economic value)
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_spp_year)), paste0("spp_prop_eco_",i):=NA] 
}






for (i in target_spp) {
    data_vessel[,paste0("spp_prop_effort_",i):=
                  SACROIS[, sumna(TP_NAVIRE_SACROIS[.SD$SPP_COD_FAO==i][!duplicated(.SD$SEQ_ID)])/sumna(TP_NAVIRE_SACROIS[!duplicated(.SD$SEQ_ID)]), by= NAVS_COD_YEAR] #selecting only one occurrence in the sequence to avoid accounting several time the same effort
                    [,V1]
                      ]; #catches proportion of the group of species of interest (in terms of fishing effort)
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))==0, paste0("spp_prop_effort_",i):=0] #attribution of 0 value when no observed presence of the target group of species (NA values attributed when no data available on captured group of species and/or fishing effort)
  data_vessel[is.na(value_effort_year), paste0("spp_prop_effort_",i):=NA] #NA attributed when data on group of species is available but no data on fishing effort is available 
}

#Method use here way more efficient !!!!! => to be applied to all other functions ?





for (i in target_spp) {
  data_vessel[,paste0("spp_prop_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_prop_weight.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_POIDS")
                [, .[.SD$SPP_COD_FAO==i & !is.na(.SD$SPP_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the group of species of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_spp_year)), paste0("spp_prop_weight.prod_",i):=NA] 
}






for (i in target_spp) {
  data_vessel[,paste0("spp_prop_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_prop_eco.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+SPP_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_ECO")
                [, .[.SD$SPP_COD_FAO==i & !is.na(.SD$SPP_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the group of species of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_spp_year)), paste0("spp_prop_eco.prod_",i):=NA] 
}



















for (i in target_spp) {
  data_vessel[,paste0("spp_weight_",i):=0]; #attribution of 0 value by default (no observed presence of the target group of species)
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_weight_",i):=
            SACROIS[SPP_COD_FAO==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the group of species of interest (in terms of fishing weight), computed only when proven presence of the target group of species
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_spp_year)), paste0("spp_weight_",i):=NA] #attribution of NA values when data not available to attest for the target group of species presence
}


#Alternative way to compute proportion metrics: prop_weight_i=weight_i/weight_year, way faster !)





for (i in target_spp) {
  data_vessel[,paste0("spp_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_eco_",i):=
            SACROIS[SPP_COD_FAO==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the group of species of interest (in terms of fishing economic values), computed only when proven presence of the target group of species
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_spp_year)), paste0("spp_eco_",i):=NA]
}






for (i in target_spp) {
  data_vessel[,paste0("spp_effort_",i):=0]; 
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_effort_",i):=
            SACROIS[SPP_COD_FAO==i,][!duplicated(SEQ_ID), sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the group of species of interest (in terms of fishing effort), computed only when proven presence of the target group of species
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_spp_year)), paste0("spp_effort_",i):=NA]
}







for (i in target_spp) {
  data_vessel[,paste0("spp_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_weight.prod_",i):=
            SACROIS[SPP_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the group of species of interest (in terms of fishing productivity), computed only when proven presence of the target group of species
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_spp_year)), paste0("spp_weight.prod_",i):=NA]
}






for (i in target_spp) {
  data_vessel[,paste0("spp_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_eco.prod_",i):=
            SACROIS[SPP_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the group of species of interest (in terms of fishing economic productivity), computed only when proven presence of the target group of species
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_spp_year)), paste0("spp_eco.prod_",i):=NA]
}











#mean values at the sequence level are also computed to obtain estimate less biased by missing values:





for (i in target_spp) {
  data_vessel[,paste0("spp_prop_nb_",i,"_seq"):=
            SACROIS[, sumna(SPP_COD_FAO==i)/length(na.omit(SPP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][, mean(V1, na.rm=T), by= NAVS_COD_YEAR] #proportion of group of species occurrence for each sequence
              [,V1]
                ]# mean proportion of time the group of species of interest were fished among all fishing sequence
}


#all variables computed at the sequence level (average value) are computationally expensive: expect about 20-40 minutes per loop...









for (i in target_spp) {
  data_vessel[,paste0("spp_prop_weight_",i,"_seq"):=
                SACROIS[, sumna(QUANT_POIDS_VIF_SACROIS[SPP_COD_FAO==i])/sumna(QUANT_POIDS_VIF_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1] # mean proportion (in terms of fishing weight) of group of species of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))==0,paste0("spp_prop_weight_",i,"_seq"):=0]; #attribution of 0 value when no observed presence of the target group of species (NA values attributed when no data available on captured group of species and/or fishing effort)
  data_vessel[is.na(value_weight_year), paste0("spp_prop_weight_",i):=NA] #NA attributed when data on group of species is available but no data on fishing weight is available
}













for (i in target_spp) {
  data_vessel[,paste0("spp_prop_eco_",i,"_seq"):=
                SACROIS[, sumna(MONTANT_EUROS_SACROIS[SPP_COD_FAO==i])/sumna(MONTANT_EUROS_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing economic value) of group of species of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))==0,paste0("spp_prop_eco_",i,"_seq"):=0];
  data_vessel[is.na(value_eco_year), paste0("spp_prop_eco_",i):=NA]
}









for (i in target_spp) {
  data_vessel[,paste0("spp_prop_weight.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_POIDS[SPP_COD_FAO==i])/sumna(PROD_POIDS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of group of species of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))==0,paste0("spp_prop_weight.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_weight.prod_year), paste0("spp_prop_weight.prod_",i):=NA]
}







for (i in target_spp) {
  data_vessel[,paste0("spp_prop_eco.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_ECO[SPP_COD_FAO==i])/sumna(PROD_ECO), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of group of species of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))==0,paste0("spp_prop_eco.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_eco.prod_year), paste0("spp_prop_eco.prod_",i):=NA]
}


















for (i in target_spp) {
  data_vessel[,paste0("spp_weight_",i,"_seq"):=0]; #attribution of 0 value by default (no observed presence of the target group of species)
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_weight_",i,"_seq"):=
            SACROIS[SPP_COD_FAO==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(SPP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] #for vessels of interest, all sequences with identified group of species captured
                          [,V1/pres] ]; #mean fishing weight of the group of species of interest between sequences, computed only when proven presence of the target group of species
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_spp_year)), paste0("spp_weight_",i,"_seq"):=NA] #attribution of NA values when data not available to attest for the target group of species presence
}





for (i in target_spp) {
  data_vessel[,paste0("spp_eco_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_eco_",i,"_seq"):=
            SACROIS[SPP_COD_FAO==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(SPP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic value of the group of species of interest between sequences, computed only when proven presence of the target group of species
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_spp_year)), paste0("spp_eco_",i,"_seq"):=NA] 
}






for (i in target_spp) {
  data_vessel[,paste0("spp_effort_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_effort_",i,"_seq"):=
            SACROIS[SPP_COD_FAO==i,]
              [!duplicated(SEQ_ID),sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR]
                [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(SPP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                  [,V1/pres] ]; #mean fishing effort of the group of species of interest between sequences, computed only when proven presence of the target group of species
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_spp_year)), paste0("spp_effort_",i,"_seq"):=NA] 
}







for (i in target_spp) {
  data_vessel[,paste0("spp_weight.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_weight.prod_",i,"_seq"):=
            SACROIS[SPP_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(SPP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing productivity of the group of species of interest between sequences, computed only when proven presence of the target group of species
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_spp_year)), paste0("spp_weight.prod_",i,"_seq"):=NA] 
}







for (i in target_spp) {
  data_vessel[,paste0("spp_eco.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("spp_prop_nb_",i)))>0, paste0("spp_eco.prod_",i,"_seq"):=
            SACROIS[SPP_COD_FAO==i, sumna(PROD_ECO), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(SPP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic productivity of the group of species of interest between sequences, computed only when proven presence of the target group of species
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_spp_year)), paste0("spp_eco.prod_",i,"_seq"):=NA] 
}






```

####Family level

```{r fishing activity - Main target (family)}





#1) Main fished family



#a) Year scale


data_vessel[,main_family_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_family_year),main_family_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = length,
        value.var = "FAMILY_COD_FAO")
          [!is.na(FAMILY_COD_FAO)]
            [,.(.==max(.),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main fished family (in sequence number) in a year for each vessel






#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_family_effort_year:=NA_character_]

data_vessel[!is.na(mean_family_value_effort_year),main_family_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)] #then sum of effort within maree for the same family
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [,.(V1==max(V1),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
#assigns the main fished family (in fishing effort) in a year for each vessel





data_vessel[,main_family_weight_year:=NA_character_]

data_vessel[!is.na(mean_family_value_weight_year),main_family_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,.(.==max(.),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
#assigns the main fished family (in fishing weight) in a year for each vessel







data_vessel[,main_family_weight.prod_year:=NA_character_]

data_vessel[!is.na(mean_family_value_weight.prod_year),main_family_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,.(.==max(.),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
#assigns the main fished family (in fishing productivity) in a year for each vessel







data_vessel[,main_family_eco_year:=NA_character_]

data_vessel[!is.na(mean_family_value_eco_year),main_family_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,.(.==max(.),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
 #assigns the main fished family (in fishing economic value) in a year for each vessel






data_vessel[,main_family_eco.prod_year:=NA_character_]

data_vessel[!is.na(mean_family_value_eco.prod_year),main_family_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,.(.==max(.),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
#assigns the main fished family (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_family_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_family_year),prop_family_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = length,
        value.var = "FAMILY_COD_FAO")
          [!is.na(FAMILY_COD_FAO)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values










data_vessel[,prop_family_weight_year:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_year),prop_family_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS") 
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main fished family (in fishing weight) in a year for each vessel









data_vessel[,prop_family_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_family_value_weight.prod_year),prop_family_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished family (in fishing productivity) in a year for each vessel













data_vessel[,prop_family_eco_year:=NA_real_]

data_vessel[!is.na(mean_family_value_eco_year),prop_family_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished family (in fishing economic value) in a year for each vessel










data_vessel[,prop_family_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_family_value_eco.prod_year),prop_family_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished family (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_family_effort_year:=NA_real_]

data_vessel[!is.na(mean_family_value_effort_year),value_main_family_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [,max(V1),by = NAVS_COD_YEAR]
                [,V1] ]
  #assigns the fishing effort value of the main fished family in a year for each vessel





data_vessel[,prop_family_effort_year:=value_main_family_effort_year/effort_year]


 #assigns the proportion of the main fished family (in fishing effort) in a year for each vessel




data_vessel[,value_main_family_weight_year:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_year),value_main_family_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main fished family in a year for each vessel







data_vessel[,value_main_family_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_family_value_weight.prod_year),value_main_family_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main fished family in a year for each vessel











data_vessel[,value_main_family_eco_year:=NA_real_]

data_vessel[!is.na(mean_family_value_eco_year),value_main_family_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main fished family in a year for each vessel










data_vessel[,value_main_family_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_family_eco.prod_year),value_main_family_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main fished family in a year for each vessel


















#As fishing activity often vary among marees, we also explored how it could impact estimation of the main fished taxon




#b) Maree scale


#Potential issue: at the maree scale most of fished family are fished the same amount of time (in term of sequence number, but also using quantitative metrics), the main family in term of fishing sequence is thus often a random sampling in the family fished during the marees... The second methodology presented here (mean across marees) should be more accurate




data_vessel[,main_family_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_family_mean_marees),main_family_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = length,
        value.var = "FAMILY_COD_FAO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of family captured during the trip 
            [!is.na(FAMILY_COD_FAO)] #removal of non attributed family
              [,.(.==max(.),FAMILY_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present family) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,FAMILY_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present family) between marees 
                              [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ] #selection of the first value if there is equality

 #assigns the main fished family (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_family_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_family_mean_marees),main_mean_family_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = length,
        value.var = "FAMILY_COD_FAO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of family captured during the trip 
              [!is.na(FAMILY_COD_FAO)]
                [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] # average the number of occurrence of family between marees
                  [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] # select the family with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ]
#assigns the main fished family (using mean sequence number between marees) among marees for each vessel









data_vessel[,main_family_effort_marees:=NA_character_]

data_vessel[!is.na(mean_family_value_effort_mean_marees),main_family_effort_marees:=
  dcast(SACROIS, 
      MAREE_ID+FAMILY_COD_FAO+SEQ_ID~., 
      fun.aggregate = function(x) x[1],
      value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
        [,sumna(.), by= .(MAREE_ID,FAMILY_COD_FAO)] #then sum of effort within maree for the same family
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [,.(V1==max(V1),FAMILY_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,FAMILY_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ] 
 #assigns the main fished family (using fishing effort within marees) among marees for each vessel




data_vessel[,main_mean_family_effort_marees:=NA_character_]

data_vessel[!is.na(mean_family_value_effort_mean_marees),main_mean_family_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(MAREE_ID,FAMILY_COD_FAO)] #then sum of effort within maree for the same family
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
                  [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ]
 #assigns the main fished family (using mean fishing effort between marees) among marees for each vessel











data_vessel[,main_family_weight_marees:=NA_character_]

data_vessel[!is.na(mean_family_value_weight_mean_marees),main_family_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,.(.==max(.),FAMILY_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,FAMILY_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ] 
 #assigns the main fished family (using fishing weight within marees) among marees for each vessel





data_vessel[,main_mean_family_weight_marees:=NA_character_]

data_vessel[!is.na(mean_family_value_weight_mean_marees),main_mean_family_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(FAMILY_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
                  [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ]
#assigns the main fished family (using mean fishing weight between marees) among marees for each vessel












data_vessel[,main_family_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_family_value_weight.prod_mean_marees),main_family_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,.(.==max(.),FAMILY_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,FAMILY_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ] 
 #assigns the main fished family (using fishing productivity within marees) among marees for each vessel





data_vessel[,main_mean_family_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_family_value_weight.prod_mean_marees),main_mean_family_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(FAMILY_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
                  [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ]
#assigns the main fished family (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,main_family_eco_marees:=NA_character_]

data_vessel[!is.na(mean_family_eco_mean_marees),main_family_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,.(.==max(.),FAMILY_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,FAMILY_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ] 
 #assigns the main fished family (using fishing economic value within marees) among marees for each vessel





data_vessel[,main_mean_family_eco_marees:=NA_character_]

data_vessel[!is.na(mean_family_eco_mean_marees),main_mean_family_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(FAMILY_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
                  [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ]
#assigns the main fished family (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,main_family_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_family_eco.prod_mean_marees),main_family_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,.(.==max(.),FAMILY_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,FAMILY_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ] 
 #assigns the main fished family (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,main_mean_family_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_family_eco.prod_mean_marees),main_mean_family_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(FAMILY_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
                  [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ]
#assigns the main fished family (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main fished family change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_family_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_family_mean_marees),prop_family_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = length,
        value.var = "FAMILY_COD_FAO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(FAMILY_COD_FAO)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main fished family (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_family_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_family_mean_marees),prop_mean_family_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = length,
        value.var = "FAMILY_COD_FAO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO)] 
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main fished family (using mean sequence number between marees) among marees for each vessel










data_vessel[,prop_family_effort_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_effort_mean_marees),prop_family_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,FAMILY_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)] 
              [!duplicated(MAREE_ID),sum:=dcast(SACROIS[!is.na(TP_NAVIRE_SACROIS) & !is.na(FAMILY_COD_FAO)],
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sum,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
                [,max(V1)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the mean proportion of main fished family (using fishing effort within marees) between marees for each vessel




data_vessel[,prop_mean_family_effort_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_effort_mean_marees),prop_mean_family_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,FAMILY_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(FAMILY_COD_FAO) & !is.na(V1)] 
                [,mean(V1),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
                  [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the proportion of main fished family (using mean fishing effort between marees) among marees for each vessel

















data_vessel[,prop_family_weight_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_mean_marees),prop_family_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(FAMILY_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished family (using fishing weight within marees) between marees for each vessel





data_vessel[,prop_mean_family_weight_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_mean_marees),prop_mean_family_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished family (using mean fishing weight between marees) among marees for each vessel














data_vessel[,prop_family_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight.prod_mean_marees),prop_family_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(FAMILY_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished family (using fishing productivity within marees) between marees for each vessel





data_vessel[,prop_mean_family_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight.prod_mean_marees),prop_mean_family_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished family (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,prop_family_eco_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco_mean_marees),prop_family_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(FAMILY_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished family (using fishing economic value within marees) between marees for each vessel





data_vessel[,prop_mean_family_eco_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco_mean_marees),prop_mean_family_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished family (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,prop_family_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco.prod_mean_marees),prop_family_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(FAMILY_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished family (using fishing economic productivity within marees) between marees for each vessel





data_vessel[,prop_mean_family_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco.prod_mean_marees),prop_mean_family_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished family (using mean fishing economic productivity between marees) among marees for each vessel

















data_vessel[,value_family_effort_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_effort_mean_marees),value_family_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,FAMILY_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                  [order(NAVS_COD_YEAR)]
                    [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_effort_marees),main_family_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main family (value repeated for each vessel)
                      [FAMILY_COD_FAO==ESP_MAJ, V1] ] #retaining only main family value

#assigns the mean fishing effort value for main fished family (using fishing effort within marees) among marees for each vessel




data_vessel[,value_mean_family_effort_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_effort_mean_marees),value_mean_family_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,FAMILY_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                  [ ,max(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing effort value for main fished family (using mean fishing effort between marees) among marees for each vessel













data_vessel[,value_family_weight_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_mean_marees),value_family_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_weight_marees),main_family_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [FAMILY_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing weight value for main fished family (using fishing weight within marees) among marees for each vessel




data_vessel[,value_mean_family_weight_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_mean_marees),value_mean_family_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing weight value for main fished family (using mean fishing weight between marees) among marees for each vessel












data_vessel[,value_family_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight.prod_mean_marees),value_family_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_weight.prod_marees),main_family_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [FAMILY_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing productivity value for main fished family (using fishing productivity within marees) among marees for each vessel




data_vessel[,value_mean_family_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight.prod_mean_marees),value_mean_family_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing productivity value for main fished family (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,value_family_eco_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco_mean_marees),value_family_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_eco_marees),main_family_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [FAMILY_COD_FAO==ESP_MAJ, V1] ]

#assigns the mean fishing economic value for main fished family (using fishing economic value within marees) among marees for each vessel




data_vessel[,value_mean_family_eco_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco_mean_marees),value_mean_family_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic value for main fished family (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,value_family_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco.prod_mean_marees),value_family_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_eco.prod_marees),main_family_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [FAMILY_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing economic productivity value for main fished family (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,value_mean_family_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco.prod_mean_marees),value_mean_family_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic productivity value for main fished family (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,sd_family_effort_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_effort_mean_marees),sd_family_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,FAMILY_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
                [,pop.sd(V1),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                  [order(NAVS_COD_YEAR)]
                    [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_effort_marees),main_family_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main family (value repeated for each vessel)
                      [FAMILY_COD_FAO==ESP_MAJ, V1] ] #retaining only main family value

#assigns the variation (sd) in fishing effort value for main fished family (using fishing effort within marees) among marees for each vessel




data_vessel[,sd_mean_family_effort_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_effort_mean_marees),sd_mean_family_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,FAMILY_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
                [,.(mean(V1),pop.sd(V1)),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                  [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                    [V1==T]
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main fished family (using mean fishing effort between marees) among marees for each vessel













data_vessel[,sd_family_weight_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_mean_marees),sd_family_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_weight_marees),main_family_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [FAMILY_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing weight value for main fished family (using fishing weight within marees) among marees for each vessel




data_vessel[,sd_mean_family_weight_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_mean_marees),sd_mean_family_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main fished family (using mean fishing weight between marees) among marees for each vessel












data_vessel[,sd_family_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight.prod_mean_marees),sd_family_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_weight.prod_marees),main_family_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [FAMILY_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing productivity value for main fished family (using fishing productivity within marees) among marees for each vessel




data_vessel[,sd_mean_family_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_value_weight.prod_mean_marees),sd_mean_family_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main fished family (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,sd_family_eco_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco_mean_marees),sd_family_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_eco_marees),main_family_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [FAMILY_COD_FAO==ESP_MAJ, V1] ]

#assigns the variation (sd) in fishing economic value for main fished family (using fishing economic value within marees) among marees for each vessel




data_vessel[,sd_mean_family_eco_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco_mean_marees),sd_mean_family_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main fished family (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,sd_family_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco.prod_mean_marees),sd_family_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_eco.prod_marees),main_family_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [FAMILY_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main fished family (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,sd_mean_family_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_family_eco.prod_mean_marees),sd_mean_family_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main fished family (using mean fishing economic productivity between marees) among marees for each vessel



















#c) Sequence scale








data_vessel[,main_mean_family_effort_seq:=NA_character_]

data_vessel[!is.na(mean_family_value_effort_year),main_mean_family_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
              [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ]
#assigns the main fished family using mean fishing effort between sequences for each vessel







data_vessel[,main_family_weight_seq:=NA_character_]

data_vessel[!is.na(mean_family_value_weight_year),main_family_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,.(.==max(.),FAMILY_COD_FAO,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,FAMILY_COD_FAO) ]  
                      [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ]

 #assigns the main fished family (using fishing weight within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_family_weight_seq:=NA_character_]

data_vessel[!is.na(mean_family_value_weight_year),main_mean_family_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ] #assigns the main fished family using mean fishing weight between fishing sequences for each vessel













data_vessel[,main_mean_family_weight.prod_seq:=NA_character_]

data_vessel[!is.na(mean_family_value_weight.prod_year),main_mean_family_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ]
#assigns the main fished family using mean fishing productivity between sequences for each vessel













data_vessel[,main_family_eco_seq:=NA_character_]

data_vessel[!is.na(mean_family_eco_year),main_family_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,.(.==max(.),FAMILY_COD_FAO,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,FAMILY_COD_FAO) ]  
                      [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ]

 #assigns the main fished family (using fishing economic value within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_family_eco_seq:=NA_character_]

data_vessel[!is.na(mean_family_eco_year),main_mean_family_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ] #assigns the main fished family using mean fishing economic value between fishing sequences for each vessel













data_vessel[,main_mean_family_eco.prod_seq:=NA_character_]

data_vessel[!is.na(mean_family_eco.prod_year),main_mean_family_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), FAMILY_COD_FAO] ]
#assigns the main fished family using mean fishing economic productivity between sequences for each vessel


















data_vessel[,prop_mean_family_effort_seq:=NA_real_]


data_vessel[!is.na(mean_family_value_effort_year),prop_mean_family_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main fished family (using mean fishing effort between sequence) among sequence for each vessel








data_vessel[,prop_family_weight_seq:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_year),prop_family_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished family (using fishing weight within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_family_weight_seq:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_year),prop_mean_family_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished family (using mean fishing weight between sequence) among sequence for each vessel











data_vessel[,prop_mean_family_weight.prod_seq:=NA_real_]


data_vessel[!is.na(mean_family_value_weight.prod_year),prop_mean_family_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main fished family (using mean fishing productivity between sequence) among sequence for each vessel











data_vessel[,prop_family_eco_seq:=NA_real_]

data_vessel[!is.na(mean_family_eco_year),prop_family_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(FAMILY_COD_FAO) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished family (using fishing economic value within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_family_eco_seq:=NA_real_]

data_vessel[!is.na(mean_family_eco_year),prop_mean_family_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished family (using mean fishing economic value between sequence) among sequence for each vessel






data_vessel[,prop_mean_family_eco.prod_seq:=NA_real_]


data_vessel[!is.na(mean_family_eco.prod_year),prop_mean_family_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),FAMILY_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main fished family (using mean fishing economic productivity between sequence) among sequence for each vessel















data_vessel[,value_mean_family_effort_seq:=NA_real_]

data_vessel[!is.na(mean_family_value_effort_year),value_mean_family_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished family using mean fishing effort between fishing sequences for each vessel













data_vessel[,value_family_weight_seq:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_year),value_family_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_weight_seq),main_family_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [FAMILY_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the fishing weight value of main fished family (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_family_weight_seq:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_year),value_mean_family_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing weight value of main fished family using mean fishing weight between fishing sequences for each vessel











data_vessel[,value_mean_family_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_family_value_weight.prod_year),value_mean_family_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished family using mean fishing productivity between fishing sequences for each vessel







data_vessel[,value_family_eco_seq:=NA_real_]

data_vessel[!is.na(mean_family_eco_year),value_family_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_eco_seq),main_family_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [FAMILY_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the fishing economic value of main fished family (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_family_eco_seq:=NA_real_]

data_vessel[!is.na(mean_family_eco_year),value_mean_family_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing economic value of main fished family using mean fishing economic value between fishing sequences for each vessel











data_vessel[,value_mean_family_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_family_eco.prod_year),value_mean_family_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished family using mean fishing economic productivity between fishing sequences for each vessel



















data_vessel[,sd_mean_family_effort_seq:=NA_real_]

data_vessel[!is.na(mean_family_value_effort_year),sd_mean_family_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing effort value of main fished family using mean fishing effort between fishing sequences for each vessel







data_vessel[,sd_family_weight_seq:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_year),sd_family_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_weight_seq),main_family_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [FAMILY_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing weight value of main fished family (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_family_weight_seq:=NA_real_]

data_vessel[!is.na(mean_family_value_weight_year),sd_mean_family_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing weight value of main fished family using mean fishing weight between fishing sequences for each vessel










data_vessel[,sd_mean_family_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_family_value_weight.prod_year),sd_mean_family_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]      #assigns the variation (sd) in fishing productivity value of main fished family using mean fishing productivity between fishing sequences for each vessel














data_vessel[,sd_family_eco_seq:=NA_real_]

data_vessel[!is.na(mean_family_eco_year),sd_family_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(FAMILY_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,FAMILY_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_family_eco_seq),main_family_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [FAMILY_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing economic value of main fished family (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_family_eco_seq:=NA_real_]

data_vessel[!is.na(mean_family_eco_year),sd_mean_family_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing economic value of main fished family using mean fishing economic value between fishing sequences for each vessel












data_vessel[,sd_mean_family_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_family_eco.prod_year),sd_mean_family_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [!is.na(FAMILY_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]   #assigns the variation (sd) in fishing economic productivity value of main fished family using mean fishing economic productivity between fishing sequences for each vessel




```






######Frequent families associations


```{r fishing activity - Frequently associated families}


#2) Specific major fished family


basket=tapply(SACROIS$FAMILY_COD_FAO, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$FAMILY_COD_FAO, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of family (all family captured at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


target_family=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all family implied in a relevant association


target_family= str_extract(target_family, pattern="(?<=\\{)(.*)(?=\\})" )



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()




SACROIS$FAMILY_COD_FAO=as.factor(SACROIS$FAMILY_COD_FAO)
#to properly consider the cases where vessels are not active in a given area, the areas must be considered as a factor variable




#there are many families that are frequently associated (33 in 2019-2022), it may be interesting to efficiently including all of them using data.table environment:



for (i in target_family) {
  data_vessel[,paste0("family_prop_nb_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) {y=table(x); y[names(y)==i]/sum(y)},
              value.var = "FAMILY_COD_FAO")
                [, .] #proportion of time the family of interest were fished among all fishing events
                  ]
}





for (i in target_family) {
  data_vessel[,paste0("family_prop_weight_",i):=0]; #attribution of 0 value by default (no observed presence of the target family)
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_prop_weight_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [, .[.SD$FAMILY_COD_FAO==i & !is.na(.SD$FAMILY_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the family of interest (in terms of fishing weight), computed only when proven presence of the target family
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_family_year)), paste0("family_prop_weight_",i):=NA] #attribution of NA values when data not available to attest for the target family presence
}










for (i in target_family) {
  data_vessel[,paste0("family_prop_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_prop_eco_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "MONTANT_EUROS_SACROIS")
                [, .[.SD$FAMILY_COD_FAO==i & !is.na(.SD$FAMILY_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the family of interest (in terms of fishing economic value)
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_family_year)), paste0("family_prop_eco_",i):=NA] 
}






for (i in target_family) {
    data_vessel[,paste0("family_prop_effort_",i):=
                  SACROIS[, sumna(TP_NAVIRE_SACROIS[.SD$FAMILY_COD_FAO==i][!duplicated(.SD$SEQ_ID)])/sumna(TP_NAVIRE_SACROIS[!duplicated(.SD$SEQ_ID)]), by= NAVS_COD_YEAR] #selecting only one occurrence in the sequence to avoid accounting several time the same effort
                    [,V1]
                      ]; #catches proportion of the family of interest (in terms of fishing effort)
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))==0, paste0("family_prop_effort_",i):=0] #attribution of 0 value when no observed presence of the target family (NA values attributed when no data available on captured family and/or fishing effort)
  data_vessel[is.na(value_effort_year), paste0("family_prop_effort_",i):=NA] #NA attributed when data on family is available but no data on fishing effort is available 
}

#Method use here way more efficient !!!!! => to be applied to all other functions ?





for (i in target_family) {
  data_vessel[,paste0("family_prop_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_prop_weight.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_POIDS")
                [, .[.SD$FAMILY_COD_FAO==i & !is.na(.SD$FAMILY_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the family of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_family_year)), paste0("family_prop_weight.prod_",i):=NA] 
}






for (i in target_family) {
  data_vessel[,paste0("family_prop_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_prop_eco.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_ECO")
                [, .[.SD$FAMILY_COD_FAO==i & !is.na(.SD$FAMILY_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the family of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_family_year)), paste0("family_prop_eco.prod_",i):=NA] 
}



















for (i in target_family) {
  data_vessel[,paste0("family_weight_",i):=0]; #attribution of 0 value by default (no observed presence of the target family)
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_weight_",i):=
            SACROIS[FAMILY_COD_FAO==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the family of interest (in terms of fishing weight), computed only when proven presence of the target family
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_family_year)), paste0("family_weight_",i):=NA] #attribution of NA values when data not available to attest for the target family presence
}


#Alternative way to compute proportion metrics: prop_weight_i=weight_i/weight_year, way faster !)





for (i in target_family) {
  data_vessel[,paste0("family_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_eco_",i):=
            SACROIS[FAMILY_COD_FAO==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the family of interest (in terms of fishing economic values), computed only when proven presence of the target family
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_family_year)), paste0("family_eco_",i):=NA]
}






for (i in target_family) {
  data_vessel[,paste0("family_effort_",i):=0]; 
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_effort_",i):=
            SACROIS[FAMILY_COD_FAO==i,][!duplicated(SEQ_ID), sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the family of interest (in terms of fishing effort), computed only when proven presence of the target family
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_family_year)), paste0("family_effort_",i):=NA]
}







for (i in target_family) {
  data_vessel[,paste0("family_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_weight.prod_",i):=
            SACROIS[FAMILY_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the family of interest (in terms of fishing productivity), computed only when proven presence of the target family
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_family_year)), paste0("family_weight.prod_",i):=NA]
}






for (i in target_family) {
  data_vessel[,paste0("family_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_eco.prod_",i):=
            SACROIS[FAMILY_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the family of interest (in terms of fishing economic productivity), computed only when proven presence of the target family
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_family_year)), paste0("family_eco.prod_",i):=NA]
}











#mean values at the sequence level are also computed to obtain estimate less biased by missing values:





for (i in target_family) {
  data_vessel[,paste0("family_prop_nb_",i,"_seq"):=
            SACROIS[, sumna(FAMILY_COD_FAO==i)/length(na.omit(FAMILY_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][, mean(V1, na.rm=T), by= NAVS_COD_YEAR] #proportion of family occurrence for each sequence
              [,V1]
                ]# mean proportion of time the family of interest were fished among all fishing sequence
}


#all variables computed at the sequence level (average value) are computationally expensive: expect about 20-40 minutes per loop...









for (i in target_family) {
  data_vessel[,paste0("family_prop_weight_",i,"_seq"):=
                SACROIS[, sumna(QUANT_POIDS_VIF_SACROIS[FAMILY_COD_FAO==i])/sumna(QUANT_POIDS_VIF_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1] # mean proportion (in terms of fishing weight) of family of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))==0,paste0("family_prop_weight_",i,"_seq"):=0]; #attribution of 0 value when no observed presence of the target family (NA values attributed when no data available on captured family and/or fishing effort)
  data_vessel[is.na(value_weight_year), paste0("family_prop_weight_",i):=NA] #NA attributed when data on family is available but no data on fishing weight is available
}













for (i in target_family) {
  data_vessel[,paste0("family_prop_eco_",i,"_seq"):=
                SACROIS[, sumna(MONTANT_EUROS_SACROIS[FAMILY_COD_FAO==i])/sumna(MONTANT_EUROS_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing economic value) of family of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))==0,paste0("family_prop_eco_",i,"_seq"):=0];
  data_vessel[is.na(value_eco_year), paste0("family_prop_eco_",i):=NA]
}









for (i in target_family) {
  data_vessel[,paste0("family_prop_weight.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_POIDS[FAMILY_COD_FAO==i])/sumna(PROD_POIDS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of family of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))==0,paste0("family_prop_weight.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_weight.prod_year), paste0("family_prop_weight.prod_",i):=NA]
}







for (i in target_family) {
  data_vessel[,paste0("family_prop_eco.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_ECO[FAMILY_COD_FAO==i])/sumna(PROD_ECO), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of family of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))==0,paste0("family_prop_eco.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_eco.prod_year), paste0("family_prop_eco.prod_",i):=NA]
}


















for (i in target_family) {
  data_vessel[,paste0("family_weight_",i,"_seq"):=0]; #attribution of 0 value by default (no observed presence of the target family)
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_weight_",i,"_seq"):=
            SACROIS[FAMILY_COD_FAO==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(FAMILY_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] #for vessels of interest, all sequences with identified family captured
                          [,V1/pres] ]; #mean fishing weight of the family of interest between sequences, computed only when proven presence of the target family
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_family_year)), paste0("family_weight_",i,"_seq"):=NA] #attribution of NA values when data not available to attest for the target family presence
}





for (i in target_family) {
  data_vessel[,paste0("family_eco_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_eco_",i,"_seq"):=
            SACROIS[FAMILY_COD_FAO==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(FAMILY_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic value of the family of interest between sequences, computed only when proven presence of the target family
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_family_year)), paste0("family_eco_",i,"_seq"):=NA] 
}






for (i in target_family) {
  data_vessel[,paste0("family_effort_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_effort_",i,"_seq"):=
            SACROIS[FAMILY_COD_FAO==i,]
              [!duplicated(SEQ_ID),sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR]
                [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(FAMILY_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                  [,V1/pres] ]; #mean fishing effort of the family of interest between sequences, computed only when proven presence of the target family
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_family_year)), paste0("family_effort_",i,"_seq"):=NA] 
}







for (i in target_family) {
  data_vessel[,paste0("family_weight.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_weight.prod_",i,"_seq"):=
            SACROIS[FAMILY_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(FAMILY_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing productivity of the family of interest between sequences, computed only when proven presence of the target family
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_family_year)), paste0("family_weight.prod_",i,"_seq"):=NA] 
}







for (i in target_family) {
  data_vessel[,paste0("family_eco.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("family_prop_nb_",i)))>0, paste0("family_eco.prod_",i,"_seq"):=
            SACROIS[FAMILY_COD_FAO==i, sumna(PROD_ECO), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(FAMILY_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic productivity of the family of interest between sequences, computed only when proven presence of the target family
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_family_year)), paste0("family_eco.prod_",i,"_seq"):=NA] 
}






```

####Order level

```{r fishing activity - Main target (order)}





#1) Main fished order



#a) Year scale


data_vessel[,main_order_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_order_year),main_order_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ORDER_COD_FAO")
          [!is.na(ORDER_COD_FAO)]
            [,.(.==max(.),ORDER_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main fished order (in sequence number) in a year for each vessel






#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_order_effort_year:=NA_character_]

data_vessel[!is.na(mean_order_value_effort_year),main_order_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)] #then sum of effort within maree for the same order
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [,.(V1==max(V1),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
#assigns the main fished order (in fishing effort) in a year for each vessel





data_vessel[,main_order_weight_year:=NA_character_]

data_vessel[!is.na(mean_order_value_weight_year),main_order_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ORDER_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
#assigns the main fished order (in fishing weight) in a year for each vessel







data_vessel[,main_order_weight.prod_year:=NA_character_]

data_vessel[!is.na(mean_order_value_weight.prod_year),main_order_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ORDER_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
#assigns the main fished order (in fishing productivity) in a year for each vessel







data_vessel[,main_order_eco_year:=NA_character_]

data_vessel[!is.na(mean_order_eco_year),main_order_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ORDER_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
 #assigns the main fished order (in fishing economic value) in a year for each vessel






data_vessel[,main_order_eco.prod_year:=NA_character_]

data_vessel[!is.na(mean_order_eco.prod_year),main_order_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ORDER_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
#assigns the main fished order (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_order_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_order_year),prop_order_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ORDER_COD_FAO")
          [!is.na(ORDER_COD_FAO)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values










data_vessel[,prop_order_weight_year:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_year),prop_order_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS") 
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main fished order (in fishing weight) in a year for each vessel









data_vessel[,prop_order_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_order_value_weight.prod_year),prop_order_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished order (in fishing productivity) in a year for each vessel













data_vessel[,prop_order_eco_year:=NA_real_]

data_vessel[!is.na(mean_order_eco_year),prop_order_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished order (in fishing economic value) in a year for each vessel










data_vessel[,prop_order_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_order_eco.prod_year),prop_order_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished order (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_order_effort_year:=NA_real_]

data_vessel[!is.na(mean_order_value_effort_year),value_main_order_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [,max(V1),by = NAVS_COD_YEAR]
                [,V1] ]
  #assigns the fishing effort value of the main fished order in a year for each vessel





data_vessel[,prop_order_effort_year:=value_main_order_effort_year/effort_year]


 #assigns the proportion of the main fished order (in fishing effort) in a year for each vessel




data_vessel[,value_main_order_weight_year:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_year),value_main_order_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main fished order in a year for each vessel







data_vessel[,value_main_order_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_order_value_weight.prod_year),value_main_order_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main fished order in a year for each vessel











data_vessel[,value_main_order_eco_year:=NA_real_]

data_vessel[!is.na(mean_order_eco_year),value_main_order_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main fished order in a year for each vessel










data_vessel[,value_main_order_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_order_eco.prod_year),value_main_order_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main fished order in a year for each vessel


















#As fishing activity often vary among marees, we also explored how it could impact estimation of the main fished taxon




#b) Maree scale


#Potential issue: at the maree scale most of fished order are fished the same amount of time (in term of sequence number, but also using quantitative metrics), the main order in term of fishing sequence is thus often a random sampling in the order fished during the marees... The second methodology presented here (mean across marees) should be more accurate




data_vessel[,main_order_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_order_mean_marees),main_order_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ORDER_COD_FAO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of order captured during the trip 
            [!is.na(ORDER_COD_FAO)] #removal of non attributed order
              [,.(.==max(.),ORDER_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present order) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ORDER_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present order) between marees 
                              [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ] #selection of the first value if there is equality

 #assigns the main fished order (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_order_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_order_mean_marees),main_mean_order_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ORDER_COD_FAO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of order captured during the trip 
              [!is.na(ORDER_COD_FAO)]
                [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] # average the number of occurrence of order between marees
                  [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] # select the order with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ]
#assigns the main fished order (using mean sequence number between marees) among marees for each vessel









data_vessel[,main_order_effort_marees:=NA_character_]

data_vessel[!is.na(mean_order_value_effort_mean_marees),main_order_effort_marees:=
  dcast(SACROIS, 
      MAREE_ID+ORDER_COD_FAO+SEQ_ID~., 
      fun.aggregate = function(x) x[1],
      value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
        [,sumna(.), by= .(MAREE_ID,ORDER_COD_FAO)] #then sum of effort within maree for the same order
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [,.(V1==max(V1),ORDER_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ORDER_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ] 
 #assigns the main fished order (using fishing effort within marees) among marees for each vessel




data_vessel[,main_mean_order_effort_marees:=NA_character_]

data_vessel[!is.na(mean_order_value_effort_mean_marees),main_mean_order_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(MAREE_ID,ORDER_COD_FAO)] #then sum of effort within maree for the same order
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ORDER_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
                  [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ]
 #assigns the main fished order (using mean fishing effort between marees) among marees for each vessel











data_vessel[,main_order_weight_marees:=NA_character_]

data_vessel[!is.na(mean_order_value_weight_mean_marees),main_order_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ORDER_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ORDER_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ] 
 #assigns the main fished order (using fishing weight within marees) among marees for each vessel





data_vessel[,main_mean_order_weight_marees:=NA_character_]

data_vessel[!is.na(mean_order_value_weight_mean_marees),main_mean_order_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ORDER_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
                  [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ]
#assigns the main fished order (using mean fishing weight between marees) among marees for each vessel












data_vessel[,main_order_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_order_value_weight.prod_mean_marees),main_order_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ORDER_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ORDER_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ] 
 #assigns the main fished order (using fishing productivity within marees) among marees for each vessel





data_vessel[,main_mean_order_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_order_value_weight.prod_mean_marees),main_mean_order_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ORDER_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
                  [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ]
#assigns the main fished order (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,main_order_eco_marees:=NA_character_]

data_vessel[!is.na(mean_order_eco_mean_marees),main_order_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ORDER_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ORDER_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ] 
 #assigns the main fished order (using fishing economic value within marees) among marees for each vessel





data_vessel[,main_mean_order_eco_marees:=NA_character_]

data_vessel[!is.na(mean_order_eco_mean_marees),main_mean_order_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ORDER_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
                  [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ]
#assigns the main fished order (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,main_order_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_order_eco.prod_mean_marees),main_order_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ORDER_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ORDER_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ] 
 #assigns the main fished order (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,main_mean_order_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_order_eco.prod_mean_marees),main_mean_order_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ORDER_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
                  [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ]
#assigns the main fished order (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main fished order change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_order_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_order_mean_marees),prop_order_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ORDER_COD_FAO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ORDER_COD_FAO)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main fished order (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_order_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_order_mean_marees),prop_mean_order_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ORDER_COD_FAO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main fished order (using mean sequence number between marees) among marees for each vessel










data_vessel[,prop_order_effort_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_effort_mean_marees),prop_order_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ORDER_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)] 
              [!duplicated(MAREE_ID),sum:=dcast(SACROIS[!is.na(TP_NAVIRE_SACROIS) & !is.na(ORDER_COD_FAO)],
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sum,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
                [,max(V1)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the mean proportion of main fished order (using fishing effort within marees) between marees for each vessel




data_vessel[,prop_mean_order_effort_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_effort_mean_marees),prop_mean_order_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ORDER_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(ORDER_COD_FAO) & !is.na(V1)] 
                [,mean(V1),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
                  [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the proportion of main fished order (using mean fishing effort between marees) among marees for each vessel

















data_vessel[,prop_order_weight_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_mean_marees),prop_order_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ORDER_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished order (using fishing weight within marees) between marees for each vessel





data_vessel[,prop_mean_order_weight_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_mean_marees),prop_mean_order_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished order (using mean fishing weight between marees) among marees for each vessel














data_vessel[,prop_order_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight.prod_mean_marees),prop_order_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ORDER_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished order (using fishing productivity within marees) between marees for each vessel





data_vessel[,prop_mean_order_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight.prod_mean_marees),prop_mean_order_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished order (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,prop_order_eco_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco_mean_marees),prop_order_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ORDER_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished order (using fishing economic value within marees) between marees for each vessel





data_vessel[,prop_mean_order_eco_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco_mean_marees),prop_mean_order_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished order (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,prop_order_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco.prod_mean_marees),prop_order_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ORDER_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished order (using fishing economic productivity within marees) between marees for each vessel





data_vessel[,prop_mean_order_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco.prod_mean_marees),prop_mean_order_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished order (using mean fishing economic productivity between marees) among marees for each vessel

















data_vessel[,value_order_effort_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_effort_mean_marees),value_order_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ORDER_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(ORDER_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                  [order(NAVS_COD_YEAR)]
                    [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_effort_marees),main_order_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main order (value repeated for each vessel)
                      [ORDER_COD_FAO==ESP_MAJ, V1] ] #retaining only main order value

#assigns the mean fishing effort value for main fished order (using fishing effort within marees) among marees for each vessel




data_vessel[,value_mean_order_effort_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_effort_mean_marees),value_mean_order_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ORDER_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(ORDER_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                  [ ,max(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing effort value for main fished order (using mean fishing effort between marees) among marees for each vessel













data_vessel[,value_order_weight_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_mean_marees),value_order_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_weight_marees),main_order_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ORDER_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing weight value for main fished order (using fishing weight within marees) among marees for each vessel




data_vessel[,value_mean_order_weight_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_mean_marees),value_mean_order_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing weight value for main fished order (using mean fishing weight between marees) among marees for each vessel












data_vessel[,value_order_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight.prod_mean_marees),value_order_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_weight.prod_marees),main_order_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ORDER_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing productivity value for main fished order (using fishing productivity within marees) among marees for each vessel




data_vessel[,value_mean_order_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight.prod_mean_marees),value_mean_order_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing productivity value for main fished order (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,value_order_eco_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco_mean_marees),value_order_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_eco_marees),main_order_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ORDER_COD_FAO==ESP_MAJ, V1] ]

#assigns the mean fishing economic value for main fished order (using fishing economic value within marees) among marees for each vessel




data_vessel[,value_mean_order_eco_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco_mean_marees),value_mean_order_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic value for main fished order (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,value_order_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco.prod_mean_marees),value_order_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_eco.prod_marees),main_order_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ORDER_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing economic productivity value for main fished order (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,value_mean_order_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco.prod_mean_marees),value_mean_order_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic productivity value for main fished order (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,sd_order_effort_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_effort_mean_marees),sd_order_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ORDER_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [!is.na(ORDER_COD_FAO) & !is.na(V1)]
                [,pop.sd(V1),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                  [order(NAVS_COD_YEAR)]
                    [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_effort_marees),main_order_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main order (value repeated for each vessel)
                      [ORDER_COD_FAO==ESP_MAJ, V1] ] #retaining only main order value

#assigns the variation (sd) in fishing effort value for main fished order (using fishing effort within marees) among marees for each vessel




data_vessel[,sd_mean_order_effort_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_effort_mean_marees),sd_mean_order_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ORDER_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [!is.na(ORDER_COD_FAO) & !is.na(V1)]
                [,.(mean(V1),pop.sd(V1)),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                  [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                    [V1==T]
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main fished order (using mean fishing effort between marees) among marees for each vessel













data_vessel[,sd_order_weight_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_mean_marees),sd_order_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_weight_marees),main_order_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ORDER_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing weight value for main fished order (using fishing weight within marees) among marees for each vessel




data_vessel[,sd_mean_order_weight_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_mean_marees),sd_mean_order_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main fished order (using mean fishing weight between marees) among marees for each vessel












data_vessel[,sd_order_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight.prod_mean_marees),sd_order_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_weight.prod_marees),main_order_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ORDER_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing productivity value for main fished order (using fishing productivity within marees) among marees for each vessel




data_vessel[,sd_mean_order_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_value_weight.prod_mean_marees),sd_mean_order_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main fished order (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,sd_order_eco_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco_mean_marees),sd_order_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_eco_marees),main_order_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ORDER_COD_FAO==ESP_MAJ, V1] ]

#assigns the variation (sd) in fishing economic value for main fished order (using fishing economic value within marees) among marees for each vessel




data_vessel[,sd_mean_order_eco_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco_mean_marees),sd_mean_order_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main fished order (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,sd_order_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco.prod_mean_marees),sd_order_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_eco.prod_marees),main_order_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ORDER_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main fished order (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,sd_mean_order_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_order_eco.prod_mean_marees),sd_mean_order_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main fished order (using mean fishing economic productivity between marees) among marees for each vessel



















#c) Sequence scale








data_vessel[,main_mean_order_effort_seq:=NA_character_]

data_vessel[!is.na(mean_order_value_effort_year),main_mean_order_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)]
              [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ]
#assigns the main fished order using mean fishing effort between sequences for each vessel







data_vessel[,main_order_weight_seq:=NA_character_]

data_vessel[!is.na(mean_order_value_weight_year),main_order_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ORDER_COD_FAO,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,ORDER_COD_FAO) ]  
                      [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ]

 #assigns the main fished order (using fishing weight within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_order_weight_seq:=NA_character_]

data_vessel[!is.na(mean_order_value_weight_year),main_mean_order_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ] #assigns the main fished order using mean fishing weight between fishing sequences for each vessel













data_vessel[,main_mean_order_weight.prod_seq:=NA_character_]

data_vessel[!is.na(mean_order_value_weight.prod_year),main_mean_order_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ]
#assigns the main fished order using mean fishing productivity between sequences for each vessel













data_vessel[,main_order_eco_seq:=NA_character_]

data_vessel[!is.na(mean_order_eco_year),main_order_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ORDER_COD_FAO,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,ORDER_COD_FAO) ]  
                      [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ]

 #assigns the main fished order (using fishing economic value within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_order_eco_seq:=NA_character_]

data_vessel[!is.na(mean_order_eco_year),main_mean_order_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ] #assigns the main fished order using mean fishing economic value between fishing sequences for each vessel













data_vessel[,main_mean_order_eco.prod_seq:=NA_character_]

data_vessel[!is.na(mean_order_eco.prod_year),main_mean_order_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ORDER_COD_FAO] ]
#assigns the main fished order using mean fishing economic productivity between sequences for each vessel


















data_vessel[,prop_mean_order_effort_seq:=NA_real_]


data_vessel[!is.na(mean_order_value_effort_year),prop_mean_order_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main fished order (using mean fishing effort between sequence) among sequence for each vessel








data_vessel[,prop_order_weight_seq:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_year),prop_order_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished order (using fishing weight within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_order_weight_seq:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_year),prop_mean_order_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished order (using mean fishing weight between sequence) among sequence for each vessel











data_vessel[,prop_mean_order_weight.prod_seq:=NA_real_]


data_vessel[!is.na(mean_order_value_weight.prod_year),prop_mean_order_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main fished order (using mean fishing productivity between sequence) among sequence for each vessel











data_vessel[,prop_order_eco_seq:=NA_real_]

data_vessel[!is.na(mean_order_eco_year),prop_order_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ORDER_COD_FAO) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished order (using fishing economic value within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_order_eco_seq:=NA_real_]

data_vessel[!is.na(mean_order_eco_year),prop_mean_order_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished order (using mean fishing economic value between sequence) among sequence for each vessel






data_vessel[,prop_mean_order_eco.prod_seq:=NA_real_]


data_vessel[!is.na(mean_order_eco.prod_year),prop_mean_order_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),ORDER_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main fished order (using mean fishing economic productivity between sequence) among sequence for each vessel















data_vessel[,value_mean_order_effort_seq:=NA_real_]

data_vessel[!is.na(mean_order_value_effort_year),value_mean_order_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished order using mean fishing effort between fishing sequences for each vessel













data_vessel[,value_order_weight_seq:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_year),value_order_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_weight_seq),main_order_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ORDER_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the fishing weight value of main fished order (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_order_weight_seq:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_year),value_mean_order_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing weight value of main fished order using mean fishing weight between fishing sequences for each vessel











data_vessel[,value_mean_order_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_order_value_weight.prod_year),value_mean_order_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished order using mean fishing productivity between fishing sequences for each vessel







data_vessel[,value_order_eco_seq:=NA_real_]

data_vessel[!is.na(mean_order_eco_year),value_order_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_eco_seq),main_order_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ORDER_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the fishing economic value of main fished order (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_order_eco_seq:=NA_real_]

data_vessel[!is.na(mean_order_eco_year),value_mean_order_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing economic value of main fished order using mean fishing economic value between fishing sequences for each vessel











data_vessel[,value_mean_order_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_order_eco.prod_year),value_mean_order_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished order using mean fishing economic productivity between fishing sequences for each vessel



















data_vessel[,sd_mean_order_effort_seq:=NA_real_]

data_vessel[!is.na(mean_order_value_effort_year),sd_mean_order_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing effort value of main fished order using mean fishing effort between fishing sequences for each vessel







data_vessel[,sd_order_weight_seq:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_year),sd_order_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_weight_seq),main_order_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ORDER_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing weight value of main fished order (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_order_weight_seq:=NA_real_]

data_vessel[!is.na(mean_order_value_weight_year),sd_mean_order_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing weight value of main fished order using mean fishing weight between fishing sequences for each vessel










data_vessel[,sd_mean_order_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_order_value_weight.prod_year),sd_mean_order_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]      #assigns the variation (sd) in fishing productivity value of main fished order using mean fishing productivity between fishing sequences for each vessel














data_vessel[,sd_order_eco_seq:=NA_real_]

data_vessel[!is.na(mean_order_eco_year),sd_order_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(ORDER_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ORDER_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_order_eco_seq),main_order_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ORDER_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing economic value of main fished order (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_order_eco_seq:=NA_real_]

data_vessel[!is.na(mean_order_eco_year),sd_mean_order_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing economic value of main fished order using mean fishing economic value between fishing sequences for each vessel












data_vessel[,sd_mean_order_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_order_eco.prod_year),sd_mean_order_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [!is.na(ORDER_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]   #assigns the variation (sd) in fishing economic productivity value of main fished order using mean fishing economic productivity between fishing sequences for each vessel




```



######Frequent orders associations


```{r fishing activity - Frequently associated orders}


#2) Specific major fished order


basket=tapply(SACROIS$ORDER_COD_FAO, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$ORDER_COD_FAO, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of order (all order captured at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


target_order=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all order implied in a relevant association


target_order= str_extract(target_order, pattern="(?<=\\{)(.*)(?=\\})" )



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()



SACROIS$ORDER_COD_FAO=as.factor(SACROIS$ORDER_COD_FAO)
#to properly consider the cases where vessels are not active in a given area, the areas must be considered as a factor variable




#there are many orders that are frequently associated (14 in 2019-2022), it may be interesting to efficiently including all of them using data.table environment:



for (i in target_order) {
  data_vessel[,paste0("order_prop_nb_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) {y=table(x); y[names(y)==i]/sum(y)},
              value.var = "ORDER_COD_FAO")
                [, .] #proportion of time the order of interest were fished among all fishing events
                  ]
}





for (i in target_order) {
  data_vessel[,paste0("order_prop_weight_",i):=0]; #attribution of 0 value by default (no observed presence of the target order)
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_prop_weight_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [, .[.SD$ORDER_COD_FAO==i & !is.na(.SD$ORDER_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the order of interest (in terms of fishing weight), computed only when proven presence of the target order
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_order_year)), paste0("order_prop_weight_",i):=NA] #attribution of NA values when data not available to attest for the target order presence
}










for (i in target_order) {
  data_vessel[,paste0("order_prop_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_prop_eco_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "MONTANT_EUROS_SACROIS")
                [, .[.SD$ORDER_COD_FAO==i & !is.na(.SD$ORDER_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the order of interest (in terms of fishing economic value)
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_order_year)), paste0("order_prop_eco_",i):=NA] 
}






for (i in target_order) {
    data_vessel[,paste0("order_prop_effort_",i):=
                  SACROIS[, sumna(TP_NAVIRE_SACROIS[.SD$ORDER_COD_FAO==i][!duplicated(.SD$SEQ_ID)])/sumna(TP_NAVIRE_SACROIS[!duplicated(.SD$SEQ_ID)]), by= NAVS_COD_YEAR] #selecting only one occurrence in the sequence to avoid accounting several time the same effort
                    [,V1]
                      ]; #catches proportion of the order of interest (in terms of fishing effort)
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))==0, paste0("order_prop_effort_",i):=0] #attribution of 0 value when no observed presence of the target order (NA values attributed when no data available on captured order and/or fishing effort)
  data_vessel[is.na(value_effort_year), paste0("order_prop_effort_",i):=NA] #NA attributed when data on order is available but no data on fishing effort is available 
}

#Method use here way more efficient !!!!! => to be applied to all other functions ?





for (i in target_order) {
  data_vessel[,paste0("order_prop_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_prop_weight.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_POIDS")
                [, .[.SD$ORDER_COD_FAO==i & !is.na(.SD$ORDER_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the order of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_order_year)), paste0("order_prop_weight.prod_",i):=NA] 
}






for (i in target_order) {
  data_vessel[,paste0("order_prop_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_prop_eco.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ORDER_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_ECO")
                [, .[.SD$ORDER_COD_FAO==i & !is.na(.SD$ORDER_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the order of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_order_year)), paste0("order_prop_eco.prod_",i):=NA] 
}



















for (i in target_order) {
  data_vessel[,paste0("order_weight_",i):=0]; #attribution of 0 value by default (no observed presence of the target order)
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_weight_",i):=
            SACROIS[ORDER_COD_FAO==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the order of interest (in terms of fishing weight), computed only when proven presence of the target order
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_order_year)), paste0("order_weight_",i):=NA] #attribution of NA values when data not available to attest for the target order presence
}


#Alternative way to compute proportion metrics: prop_weight_i=weight_i/weight_year, way faster !)





for (i in target_order) {
  data_vessel[,paste0("order_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_eco_",i):=
            SACROIS[ORDER_COD_FAO==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the order of interest (in terms of fishing economic values), computed only when proven presence of the target order
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_order_year)), paste0("order_eco_",i):=NA]
}






for (i in target_order) {
  data_vessel[,paste0("order_effort_",i):=0]; 
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_effort_",i):=
            SACROIS[ORDER_COD_FAO==i,][!duplicated(SEQ_ID), sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the order of interest (in terms of fishing effort), computed only when proven presence of the target order
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_order_year)), paste0("order_effort_",i):=NA]
}







for (i in target_order) {
  data_vessel[,paste0("order_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_weight.prod_",i):=
            SACROIS[ORDER_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the order of interest (in terms of fishing productivity), computed only when proven presence of the target order
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_order_year)), paste0("order_weight.prod_",i):=NA]
}






for (i in target_order) {
  data_vessel[,paste0("order_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_eco.prod_",i):=
            SACROIS[ORDER_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the order of interest (in terms of fishing economic productivity), computed only when proven presence of the target order
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_order_year)), paste0("order_eco.prod_",i):=NA]
}











#mean values at the sequence level are also computed to obtain estimate less biased by missing values:





for (i in target_order) {
  data_vessel[,paste0("order_prop_nb_",i,"_seq"):=
            SACROIS[, sumna(ORDER_COD_FAO==i)/length(na.omit(ORDER_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][, mean(V1, na.rm=T), by= NAVS_COD_YEAR] #proportion of order occurrence for each sequence
              [,V1]
                ]# mean proportion of time the order of interest were fished among all fishing sequence
}


#all variables computed at the sequence level (average value) are computationally expensive: expect about 20-40 minutes per loop...









for (i in target_order) {
  data_vessel[,paste0("order_prop_weight_",i,"_seq"):=
                SACROIS[, sumna(QUANT_POIDS_VIF_SACROIS[ORDER_COD_FAO==i])/sumna(QUANT_POIDS_VIF_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1] # mean proportion (in terms of fishing weight) of order of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))==0,paste0("order_prop_weight_",i,"_seq"):=0]; #attribution of 0 value when no observed presence of the target order (NA values attributed when no data available on captured order and/or fishing effort)
  data_vessel[is.na(value_weight_year), paste0("order_prop_weight_",i):=NA] #NA attributed when data on order is available but no data on fishing weight is available
}













for (i in target_order) {
  data_vessel[,paste0("order_prop_eco_",i,"_seq"):=
                SACROIS[, sumna(MONTANT_EUROS_SACROIS[ORDER_COD_FAO==i])/sumna(MONTANT_EUROS_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing economic value) of order of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))==0,paste0("order_prop_eco_",i,"_seq"):=0];
  data_vessel[is.na(value_eco_year), paste0("order_prop_eco_",i):=NA]
}









for (i in target_order) {
  data_vessel[,paste0("order_prop_weight.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_POIDS[ORDER_COD_FAO==i])/sumna(PROD_POIDS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of order of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))==0,paste0("order_prop_weight.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_weight.prod_year), paste0("order_prop_weight.prod_",i):=NA]
}







for (i in target_order) {
  data_vessel[,paste0("order_prop_eco.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_ECO[ORDER_COD_FAO==i])/sumna(PROD_ECO), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of order of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))==0,paste0("order_prop_eco.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_eco.prod_year), paste0("order_prop_eco.prod_",i):=NA]
}


















for (i in target_order) {
  data_vessel[,paste0("order_weight_",i,"_seq"):=0]; #attribution of 0 value by default (no observed presence of the target order)
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_weight_",i,"_seq"):=
            SACROIS[ORDER_COD_FAO==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ORDER_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] #for vessels of interest, all sequences with identified order captured
                          [,V1/pres] ]; #mean fishing weight of the order of interest between sequences, computed only when proven presence of the target order
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_order_year)), paste0("order_weight_",i,"_seq"):=NA] #attribution of NA values when data not available to attest for the target order presence
}





for (i in target_order) {
  data_vessel[,paste0("order_eco_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_eco_",i,"_seq"):=
            SACROIS[ORDER_COD_FAO==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ORDER_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic value of the order of interest between sequences, computed only when proven presence of the target order
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_order_year)), paste0("order_eco_",i,"_seq"):=NA] 
}






for (i in target_order) {
  data_vessel[,paste0("order_effort_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_effort_",i,"_seq"):=
            SACROIS[ORDER_COD_FAO==i,]
              [!duplicated(SEQ_ID),sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR]
                [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ORDER_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                  [,V1/pres] ]; #mean fishing effort of the order of interest between sequences, computed only when proven presence of the target order
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_order_year)), paste0("order_effort_",i,"_seq"):=NA] 
}







for (i in target_order) {
  data_vessel[,paste0("order_weight.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_weight.prod_",i,"_seq"):=
            SACROIS[ORDER_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ORDER_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing productivity of the order of interest between sequences, computed only when proven presence of the target order
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_order_year)), paste0("order_weight.prod_",i,"_seq"):=NA] 
}







for (i in target_order) {
  data_vessel[,paste0("order_eco.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("order_prop_nb_",i)))>0, paste0("order_eco.prod_",i,"_seq"):=
            SACROIS[ORDER_COD_FAO==i, sumna(PROD_ECO), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ORDER_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic productivity of the order of interest between sequences, computed only when proven presence of the target order
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_order_year)), paste0("order_eco.prod_",i,"_seq"):=NA] 
}






```

####ISSCAAP code level

```{r fishing activity - Main target (isscaap code)}





#1) Main fished isscaap code



#a) Year scale


data_vessel[,main_isscaap_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_isscaap_year),main_isscaap_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ISSCAAP_COD_FAO")
          [!is.na(ISSCAAP_COD_FAO)]
            [,.(.==max(.),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main fished isscaap code (in sequence number) in a year for each vessel






#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_isscaap_effort_year:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_effort_year),main_isscaap_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] #then sum of effort within maree for the same isscaap code
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [,.(V1==max(V1),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code (in fishing effort) in a year for each vessel





data_vessel[,main_isscaap_weight_year:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_weight_year),main_isscaap_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code (in fishing weight) in a year for each vessel







data_vessel[,main_isscaap_weight.prod_year:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_year),main_isscaap_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code (in fishing productivity) in a year for each vessel







data_vessel[,main_isscaap_eco_year:=NA_character_]

data_vessel[!is.na(mean_isscaap_eco_year),main_isscaap_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
 #assigns the main fished isscaap code (in fishing economic value) in a year for each vessel






data_vessel[,main_isscaap_eco.prod_year:=NA_character_]

data_vessel[!is.na(mean_isscaap_eco.prod_year),main_isscaap_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_isscaap_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_isscaap_year),prop_isscaap_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ISSCAAP_COD_FAO")
          [!is.na(ISSCAAP_COD_FAO)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values










data_vessel[,prop_isscaap_weight_year:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_year),prop_isscaap_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS") 
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main fished isscaap code (in fishing weight) in a year for each vessel









data_vessel[,prop_isscaap_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_year),prop_isscaap_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished isscaap code (in fishing productivity) in a year for each vessel













data_vessel[,prop_isscaap_eco_year:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_year),prop_isscaap_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished isscaap code (in fishing economic value) in a year for each vessel










data_vessel[,prop_isscaap_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco.prod_year),prop_isscaap_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished isscaap code (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_isscaap_effort_year:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_effort_year),value_main_isscaap_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [,max(V1),by = NAVS_COD_YEAR]
                [,V1] ]
  #assigns the fishing effort value of the main fished isscaap code in a year for each vessel





data_vessel[,prop_isscaap_effort_year:=value_main_isscaap_effort_year/effort_year]


 #assigns the proportion of the main fished isscaap code (in fishing effort) in a year for each vessel




data_vessel[,value_main_isscaap_weight_year:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_year),value_main_isscaap_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main fished isscaap code in a year for each vessel







data_vessel[,value_main_isscaap_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_year),value_main_isscaap_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main fished isscaap code in a year for each vessel











data_vessel[,value_main_isscaap_eco_year:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_year),value_main_isscaap_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main fished isscaap code in a year for each vessel










data_vessel[,value_main_isscaap_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco.prod_year),value_main_isscaap_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main fished isscaap code in a year for each vessel


















#As fishing activity often vary among marees, we also explored how it could impact estimation of the main fished taxon




#b) Maree scale


#Potential issue: at the maree scale most of fished isscaap code are fished the same amount of time (in term of sequence number, but also using quantitative metrics), the main isscaap code in term of fishing sequence is thus often a random sampling in the isscaap code fished during the marees... The second methodology presented here (mean across marees) should be more accurate




data_vessel[,main_isscaap_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_isscaap_mean_marees),main_isscaap_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ISSCAAP_COD_FAO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of isscaap code captured during the trip 
            [!is.na(ISSCAAP_COD_FAO)] #removal of non attributed isscaap code
              [,.(.==max(.),ISSCAAP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present isscaap code) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present isscaap code) between marees 
                              [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ] #selection of the first value if there is equality

 #assigns the main fished isscaap code (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_isscaap_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_isscaap_mean_marees),main_mean_isscaap_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ISSCAAP_COD_FAO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of isscaap code captured during the trip 
              [!is.na(ISSCAAP_COD_FAO)]
                [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] # average the number of occurrence of isscaap code between marees
                  [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] # select the isscaap code with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code (using mean sequence number between marees) among marees for each vessel









data_vessel[,main_isscaap_effort_marees:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_effort_mean_marees),main_isscaap_effort_marees:=
  dcast(SACROIS, 
      MAREE_ID+ISSCAAP_COD_FAO+SEQ_ID~., 
      fun.aggregate = function(x) x[1],
      value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
        [,sumna(.), by= .(MAREE_ID,ISSCAAP_COD_FAO)] #then sum of effort within maree for the same isscaap code
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [,.(V1==max(V1),ISSCAAP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ] 
 #assigns the main fished isscaap code (using fishing effort within marees) among marees for each vessel




data_vessel[,main_mean_isscaap_effort_marees:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_effort_mean_marees),main_mean_isscaap_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(MAREE_ID,ISSCAAP_COD_FAO)] #then sum of effort within maree for the same isscaap code
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
                  [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ]
 #assigns the main fished isscaap code (using mean fishing effort between marees) among marees for each vessel











data_vessel[,main_isscaap_weight_marees:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_weight_mean_marees),main_isscaap_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ISSCAAP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ] 
 #assigns the main fished isscaap code (using fishing weight within marees) among marees for each vessel





data_vessel[,main_mean_isscaap_weight_marees:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_weight_mean_marees),main_mean_isscaap_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
                  [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code (using mean fishing weight between marees) among marees for each vessel












data_vessel[,main_isscaap_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_mean_marees),main_isscaap_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ISSCAAP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ] 
 #assigns the main fished isscaap code (using fishing productivity within marees) among marees for each vessel





data_vessel[,main_mean_isscaap_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_mean_marees),main_mean_isscaap_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
                  [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,main_isscaap_eco_marees:=NA_character_]

data_vessel[!is.na(mean_isscaap_eco_mean_marees),main_isscaap_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ISSCAAP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ] 
 #assigns the main fished isscaap code (using fishing economic value within marees) among marees for each vessel





data_vessel[,main_mean_isscaap_eco_marees:=NA_character_]

data_vessel[!is.na(mean_isscaap_eco_mean_marees),main_mean_isscaap_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
                  [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,main_isscaap_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_isscaap_eco.prod_mean_marees),main_isscaap_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,.(.==max(.),ISSCAAP_COD_FAO),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ] 
 #assigns the main fished isscaap code (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,main_mean_isscaap_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_isscaap_eco.prod_mean_marees),main_mean_isscaap_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
                  [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main fished isscaap code change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_isscaap_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_isscaap_mean_marees),prop_isscaap_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ISSCAAP_COD_FAO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ISSCAAP_COD_FAO)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main fished isscaap code (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_isscaap_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_isscaap_mean_marees),prop_mean_isscaap_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ISSCAAP_COD_FAO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main fished isscaap code (using mean sequence number between marees) among marees for each vessel










data_vessel[,prop_isscaap_effort_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_effort_mean_marees),prop_isscaap_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ISSCAAP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)] 
              [!duplicated(MAREE_ID),sum:=dcast(SACROIS[!is.na(TP_NAVIRE_SACROIS) & !is.na(ISSCAAP_COD_FAO)],
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sum,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
                [,max(V1)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the mean proportion of main fished isscaap code (using fishing effort within marees) between marees for each vessel




data_vessel[,prop_mean_isscaap_effort_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_effort_mean_marees),prop_mean_isscaap_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ISSCAAP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)] 
                [,mean(V1),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
                  [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the proportion of main fished isscaap code (using mean fishing effort between marees) among marees for each vessel

















data_vessel[,prop_isscaap_weight_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_mean_marees),prop_isscaap_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished isscaap code (using fishing weight within marees) between marees for each vessel





data_vessel[,prop_mean_isscaap_weight_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_mean_marees),prop_mean_isscaap_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished isscaap code (using mean fishing weight between marees) among marees for each vessel














data_vessel[,prop_isscaap_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_mean_marees),prop_isscaap_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished isscaap code (using fishing productivity within marees) between marees for each vessel





data_vessel[,prop_mean_isscaap_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_mean_marees),prop_mean_isscaap_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished isscaap code (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,prop_isscaap_eco_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_mean_marees),prop_isscaap_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished isscaap code (using fishing economic value within marees) between marees for each vessel





data_vessel[,prop_mean_isscaap_eco_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_mean_marees),prop_mean_isscaap_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished isscaap code (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,prop_isscaap_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco.prod_mean_marees),prop_isscaap_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished isscaap code (using fishing economic productivity within marees) between marees for each vessel





data_vessel[,prop_mean_isscaap_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco.prod_mean_marees),prop_mean_isscaap_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished isscaap code (using mean fishing economic productivity between marees) among marees for each vessel

















data_vessel[,value_isscaap_effort_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_effort_mean_marees),value_isscaap_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ISSCAAP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                  [order(NAVS_COD_YEAR)]
                    [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_effort_marees),main_isscaap_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main isscaap code (value repeated for each vessel)
                      [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] #retaining only main isscaap code value

#assigns the mean fishing effort value for main fished isscaap code (using fishing effort within marees) among marees for each vessel




data_vessel[,value_mean_isscaap_effort_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_effort_mean_marees),value_mean_isscaap_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ISSCAAP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                  [ ,max(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing effort value for main fished isscaap code (using mean fishing effort between marees) among marees for each vessel













data_vessel[,value_isscaap_weight_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_mean_marees),value_isscaap_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_weight_marees),main_isscaap_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing weight value for main fished isscaap code (using fishing weight within marees) among marees for each vessel




data_vessel[,value_mean_isscaap_weight_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_mean_marees),value_mean_isscaap_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing weight value for main fished isscaap code (using mean fishing weight between marees) among marees for each vessel












data_vessel[,value_isscaap_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_mean_marees),value_isscaap_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_weight.prod_marees),main_isscaap_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing productivity value for main fished isscaap code (using fishing productivity within marees) among marees for each vessel




data_vessel[,value_mean_isscaap_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_mean_marees),value_mean_isscaap_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing productivity value for main fished isscaap code (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,value_isscaap_eco_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_mean_marees),value_isscaap_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_eco_marees),main_isscaap_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ISSCAAP_COD_FAO==ESP_MAJ, V1] ]

#assigns the mean fishing economic value for main fished isscaap code (using fishing economic value within marees) among marees for each vessel




data_vessel[,value_mean_isscaap_eco_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_mean_marees),value_mean_isscaap_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic value for main fished isscaap code (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,value_isscaap_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco.prod_mean_marees),value_isscaap_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_eco.prod_marees),main_isscaap_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the mean fishing economic productivity value for main fished isscaap code (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,value_mean_isscaap_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco.prod_mean_marees),value_mean_isscaap_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic productivity value for main fished isscaap code (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,sd_isscaap_effort_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_effort_mean_marees),sd_isscaap_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ISSCAAP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
                [,pop.sd(V1),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                  [order(NAVS_COD_YEAR)]
                    [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_effort_marees),main_isscaap_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main isscaap code (value repeated for each vessel)
                      [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] #retaining only main isscaap code value

#assigns the variation (sd) in fishing effort value for main fished isscaap code (using fishing effort within marees) among marees for each vessel




data_vessel[,sd_mean_isscaap_effort_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_effort_mean_marees),sd_mean_isscaap_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ISSCAAP_COD_FAO)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
                [,.(mean(V1),pop.sd(V1)),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                  [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                    [V1==T]
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main fished isscaap code (using mean fishing effort between marees) among marees for each vessel













data_vessel[,sd_isscaap_weight_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_mean_marees),sd_isscaap_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_weight_marees),main_isscaap_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing weight value for main fished isscaap code (using fishing weight within marees) among marees for each vessel




data_vessel[,sd_mean_isscaap_weight_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_mean_marees),sd_mean_isscaap_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main fished isscaap code (using mean fishing weight between marees) among marees for each vessel












data_vessel[,sd_isscaap_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_mean_marees),sd_isscaap_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_weight.prod_marees),main_isscaap_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing productivity value for main fished isscaap code (using fishing productivity within marees) among marees for each vessel




data_vessel[,sd_mean_isscaap_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_mean_marees),sd_mean_isscaap_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main fished isscaap code (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,sd_isscaap_eco_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_mean_marees),sd_isscaap_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_eco_marees),main_isscaap_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ISSCAAP_COD_FAO==ESP_MAJ, V1] ]

#assigns the variation (sd) in fishing economic value for main fished isscaap code (using fishing economic value within marees) among marees for each vessel




data_vessel[,sd_mean_isscaap_eco_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_mean_marees),sd_mean_isscaap_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main fished isscaap code (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,sd_isscaap_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco.prod_mean_marees),sd_isscaap_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_eco.prod_marees),main_isscaap_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main fished isscaap code (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,sd_mean_isscaap_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco.prod_mean_marees),sd_mean_isscaap_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main fished isscaap code (using mean fishing economic productivity between marees) among marees for each vessel



















#c) Sequence scale








data_vessel[,main_mean_isscaap_effort_seq:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_effort_year),main_mean_isscaap_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
              [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code using mean fishing effort between sequences for each vessel







data_vessel[,main_isscaap_weight_seq:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_weight_year),main_isscaap_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ISSCAAP_COD_FAO,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO) ]  
                      [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ]

 #assigns the main fished isscaap code (using fishing weight within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_isscaap_weight_seq:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_weight_year),main_mean_isscaap_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ] #assigns the main fished isscaap code using mean fishing weight between fishing sequences for each vessel













data_vessel[,main_mean_isscaap_weight.prod_seq:=NA_character_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_year),main_mean_isscaap_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code using mean fishing productivity between sequences for each vessel













data_vessel[,main_isscaap_eco_seq:=NA_character_]

data_vessel[!is.na(mean_isscaap_eco_year),main_isscaap_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,.(.==max(.),ISSCAAP_COD_FAO,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO) ]  
                      [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ]

 #assigns the main fished isscaap code (using fishing economic value within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_isscaap_eco_seq:=NA_character_]

data_vessel[!is.na(mean_isscaap_eco_year),main_mean_isscaap_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ] #assigns the main fished isscaap code using mean fishing economic value between fishing sequences for each vessel













data_vessel[,main_mean_isscaap_eco.prod_seq:=NA_character_]

data_vessel[!is.na(mean_isscaap_eco.prod_year),main_mean_isscaap_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(V1==max(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ISSCAAP_COD_FAO] ]
#assigns the main fished isscaap code using mean fishing economic productivity between sequences for each vessel


















data_vessel[,prop_mean_isscaap_effort_seq:=NA_real_]


data_vessel[!is.na(mean_isscaap_value_effort_year),prop_mean_isscaap_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main fished isscaap code (using mean fishing effort between sequence) among sequence for each vessel








data_vessel[,prop_isscaap_weight_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_year),prop_isscaap_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished isscaap code (using fishing weight within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_isscaap_weight_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_year),prop_mean_isscaap_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished isscaap code (using mean fishing weight between sequence) among sequence for each vessel











data_vessel[,prop_mean_isscaap_weight.prod_seq:=NA_real_]


data_vessel[!is.na(mean_isscaap_value_weight.prod_year),prop_mean_isscaap_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main fished isscaap code (using mean fishing productivity between sequence) among sequence for each vessel











data_vessel[,prop_isscaap_eco_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_year),prop_isscaap_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished isscaap code (using fishing economic value within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_isscaap_eco_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_year),prop_mean_isscaap_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished isscaap code (using mean fishing economic value between sequence) among sequence for each vessel






data_vessel[,prop_mean_isscaap_eco.prod_seq:=NA_real_]


data_vessel[!is.na(mean_isscaap_eco.prod_year),prop_mean_isscaap_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),ISSCAAP_COD_FAO),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main fished isscaap code (using mean fishing economic productivity between sequence) among sequence for each vessel















data_vessel[,value_mean_isscaap_effort_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_effort_year),value_mean_isscaap_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished isscaap code using mean fishing effort between fishing sequences for each vessel













data_vessel[,value_isscaap_weight_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_year),value_isscaap_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_weight_seq),main_isscaap_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the fishing weight value of main fished isscaap code (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_isscaap_weight_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_year),value_mean_isscaap_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing weight value of main fished isscaap code using mean fishing weight between fishing sequences for each vessel











data_vessel[,value_mean_isscaap_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_year),value_mean_isscaap_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished isscaap code using mean fishing productivity between fishing sequences for each vessel







data_vessel[,value_isscaap_eco_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_year),value_isscaap_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_eco_seq),main_isscaap_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the fishing economic value of main fished isscaap code (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_isscaap_eco_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_year),value_mean_isscaap_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing economic value of main fished isscaap code using mean fishing economic value between fishing sequences for each vessel











data_vessel[,value_mean_isscaap_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco.prod_year),value_mean_isscaap_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main fished isscaap code using mean fishing economic productivity between fishing sequences for each vessel



















data_vessel[,sd_mean_isscaap_effort_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_effort_year),sd_mean_isscaap_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing effort value of main fished isscaap code using mean fishing effort between fishing sequences for each vessel







data_vessel[,sd_isscaap_weight_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_year),sd_isscaap_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_weight_seq),main_isscaap_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing weight value of main fished isscaap code (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_isscaap_weight_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight_year),sd_mean_isscaap_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing weight value of main fished isscaap code using mean fishing weight between fishing sequences for each vessel










data_vessel[,sd_mean_isscaap_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_value_weight.prod_year),sd_mean_isscaap_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]      #assigns the variation (sd) in fishing productivity value of main fished isscaap code using mean fishing productivity between fishing sequences for each vessel














data_vessel[,sd_isscaap_eco_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_year),sd_isscaap_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(ISSCAAP_COD_FAO) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_isscaap_eco_seq),main_isscaap_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [ISSCAAP_COD_FAO==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing economic value of main fished isscaap code (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_isscaap_eco_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco_year),sd_mean_isscaap_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing economic value of main fished isscaap code using mean fishing economic value between fishing sequences for each vessel












data_vessel[,sd_mean_isscaap_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_isscaap_eco.prod_year),sd_mean_isscaap_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [!is.na(ISSCAAP_COD_FAO) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]   #assigns the variation (sd) in fishing economic productivity value of main fished isscaap code using mean fishing economic productivity between fishing sequences for each vessel




```






######Frequent ISSCAAP associations


```{r fishing activity - Frequently associated isscaap codes}


#2) Specific major fished family


basket=tapply(SACROIS$ISSCAAP_COD_FAO, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$ISSCAAP_COD_FAO, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of family (all family captured at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


target_isscaap=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all family implied in a relevant association


target_isscaap= str_extract(target_isscaap, pattern="(?<=\\{)(.*)(?=\\})" )



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()



SACROIS$ISSCAAP_COD_FAO=as.factor(SACROIS$ISSCAAP_COD_FAO)
#to properly consider the cases where vessels are not active in a given area, the areas must be considered as a factor variable




#there are many isscaap codes that are frequently associated (10 in 2019-2022), it may be interesting to efficiently including all of them using data.table environment:



for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_prop_nb_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) {y=table(x); y[names(y)==i]/sum(y)},
              value.var = "ISSCAAP_COD_FAO")
                [, .] #proportion of time the family of interest were fished among all fishing events
                  ]
}





for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_prop_weight_",i):=0]; #attribution of 0 value by default (no observed presence of the target family)
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_prop_weight_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [, .[.SD$ISSCAAP_COD_FAO==i & !is.na(.SD$ISSCAAP_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the family of interest (in terms of fishing weight), computed only when proven presence of the target family
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_prop_weight_",i):=NA] #attribution of NA values when data not available to attest for the target family presence
}










for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_prop_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_prop_eco_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "MONTANT_EUROS_SACROIS")
                [, .[.SD$ISSCAAP_COD_FAO==i & !is.na(.SD$ISSCAAP_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the family of interest (in terms of fishing economic value)
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_prop_eco_",i):=NA] 
}






for (i in target_isscaap) {
    data_vessel[,paste0("isscaap_prop_effort_",i):=
                  SACROIS[, sumna(TP_NAVIRE_SACROIS[.SD$ISSCAAP_COD_FAO==i][!duplicated(.SD$SEQ_ID)])/sumna(TP_NAVIRE_SACROIS[!duplicated(.SD$SEQ_ID)]), by= NAVS_COD_YEAR] #selecting only one occurrence in the sequence to avoid accounting several time the same effort
                    [,V1]
                      ]; #catches proportion of the family of interest (in terms of fishing effort)
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))==0, paste0("isscaap_prop_effort_",i):=0] #attribution of 0 value when no observed presence of the target family (NA values attributed when no data available on captured family and/or fishing effort)
  data_vessel[is.na(value_effort_year), paste0("isscaap_prop_effort_",i):=NA] #NA attributed when data on family is available but no data on fishing effort is available 
}

#Method use here way more efficient !!!!! => to be applied to all other functions ?





for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_prop_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_prop_weight.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_POIDS")
                [, .[.SD$ISSCAAP_COD_FAO==i & !is.na(.SD$ISSCAAP_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the family of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_prop_weight.prod_",i):=NA] 
}






for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_prop_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_prop_eco.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+ISSCAAP_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_ECO")
                [, .[.SD$ISSCAAP_COD_FAO==i & !is.na(.SD$ISSCAAP_COD_FAO)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion of the family of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_prop_eco.prod_",i):=NA] 
}



















for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_weight_",i):=0]; #attribution of 0 value by default (no observed presence of the target family)
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_weight_",i):=
            SACROIS[ISSCAAP_COD_FAO==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the family of interest (in terms of fishing weight), computed only when proven presence of the target family
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_weight_",i):=NA] #attribution of NA values when data not available to attest for the target family presence
}


#Alternative way to compute proportion metrics: prop_weight_i=weight_i/weight_year, way faster !)





for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_eco_",i):=
            SACROIS[ISSCAAP_COD_FAO==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the family of interest (in terms of fishing economic values), computed only when proven presence of the target family
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_eco_",i):=NA]
}






for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_effort_",i):=0]; 
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_effort_",i):=
            SACROIS[ISSCAAP_COD_FAO==i,][!duplicated(SEQ_ID), sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the family of interest (in terms of fishing effort), computed only when proven presence of the target family
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_effort_",i):=NA]
}







for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_weight.prod_",i):=
            SACROIS[ISSCAAP_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the family of interest (in terms of fishing productivity), computed only when proven presence of the target family
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_weight.prod_",i):=NA]
}






for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_eco.prod_",i):=
            SACROIS[ISSCAAP_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion of the family of interest (in terms of fishing economic productivity), computed only when proven presence of the target family
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_eco.prod_",i):=NA]
}











#mean values at the sequence level are also computed to obtain estimate less biased by missing values:





for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_prop_nb_",i,"_seq"):=
            SACROIS[, sumna(ISSCAAP_COD_FAO==i)/length(na.omit(ISSCAAP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][, mean(V1, na.rm=T), by= NAVS_COD_YEAR] #proportion of family occurrence for each sequence
              [,V1]
                ]# mean proportion of time the family of interest were fished among all fishing sequence
}


#all variables computed at the sequence level (average value) are computationally expensive: expect about 20-40 minutes per loop...









for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_prop_weight_",i,"_seq"):=
                SACROIS[, sumna(QUANT_POIDS_VIF_SACROIS[ISSCAAP_COD_FAO==i])/sumna(QUANT_POIDS_VIF_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1] # mean proportion (in terms of fishing weight) of family of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))==0,paste0("isscaap_prop_weight_",i,"_seq"):=0]; #attribution of 0 value when no observed presence of the target family (NA values attributed when no data available on captured family and/or fishing effort)
  data_vessel[is.na(value_weight_year), paste0("isscaap_prop_weight_",i):=NA] #NA attributed when data on family is available but no data on fishing weight is available
}













for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_prop_eco_",i,"_seq"):=
                SACROIS[, sumna(MONTANT_EUROS_SACROIS[ISSCAAP_COD_FAO==i])/sumna(MONTANT_EUROS_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing economic value) of family of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))==0,paste0("isscaap_prop_eco_",i,"_seq"):=0];
  data_vessel[is.na(value_eco_year), paste0("isscaap_prop_eco_",i):=NA]
}









for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_prop_weight.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_POIDS[ISSCAAP_COD_FAO==i])/sumna(PROD_POIDS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of family of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))==0,paste0("isscaap_prop_weight.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_weight.prod_year), paste0("isscaap_prop_weight.prod_",i):=NA]
}







for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_prop_eco.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_ECO[ISSCAAP_COD_FAO==i])/sumna(PROD_ECO), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of family of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))==0,paste0("isscaap_prop_eco.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_eco.prod_year), paste0("isscaap_prop_eco.prod_",i):=NA]
}


















for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_weight_",i,"_seq"):=0]; #attribution of 0 value by default (no observed presence of the target family)
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_weight_",i,"_seq"):=
            SACROIS[ISSCAAP_COD_FAO==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ISSCAAP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] #for vessels of interest, all sequences with identified family captured
                          [,V1/pres] ]; #mean fishing weight of the family of interest between sequences, computed only when proven presence of the target family
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_weight_",i,"_seq"):=NA] #attribution of NA values when data not available to attest for the target family presence
}





for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_eco_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_eco_",i,"_seq"):=
            SACROIS[ISSCAAP_COD_FAO==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ISSCAAP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic value of the family of interest between sequences, computed only when proven presence of the target family
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_eco_",i,"_seq"):=NA] 
}






for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_effort_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_effort_",i,"_seq"):=
            SACROIS[ISSCAAP_COD_FAO==i,]
              [!duplicated(SEQ_ID),sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR]
                [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ISSCAAP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                  [,V1/pres] ]; #mean fishing effort of the family of interest between sequences, computed only when proven presence of the target family
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_effort_",i,"_seq"):=NA] 
}







for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_weight.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_weight.prod_",i,"_seq"):=
            SACROIS[ISSCAAP_COD_FAO==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ISSCAAP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing productivity of the family of interest between sequences, computed only when proven presence of the target family
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_weight.prod_",i,"_seq"):=NA] 
}







for (i in target_isscaap) {
  data_vessel[,paste0("isscaap_eco.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("isscaap_prop_nb_",i)))>0, paste0("isscaap_eco.prod_",i,"_seq"):=
            SACROIS[ISSCAAP_COD_FAO==i, sumna(PROD_ECO), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(ISSCAAP_COD_FAO)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic productivity of the family of interest between sequences, computed only when proven presence of the target family
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_isscaap_year)), paste0("isscaap_eco.prod_",i,"_seq"):=NA] 
}






```


###Secondary targeted taxa

There is a sufficient number of vessels with at least two targeted taxa (~90%) within a year, and even with three targeted taxa (~95%). Multiple target is relevant at year scale but not trip or sequence scale where multiple target are more scarce (>33% of vessels with less than two taxa fished at the trip or sequence level).
For vessels targeting only one species, the targeted species is referred to as NA.



####Species level



```{r secondary targeted taxa (species)}



data_vessel[,second_spe_nb_year:=NA_character_]

data_vessel[nb_spe_year>1,second_spe_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ESP2_COD_FAO")
          [, main:=rep(data_vessel[,main_spe_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                  [V1==T] #selection of maximal values
                    [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the second main fished species (in sequence number) in a year for each vessel







data_vessel[,third_spe_nb_year:=NA_character_]

data_vessel[nb_spe_year>2,third_spe_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ESP2_COD_FAO")
          [, main:=rep(data_vessel[,main_spe_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T] #selection of maximal values
                      [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the third main fished species (in sequence number) in a year for each vessel










#warning: important amount of vessels with missing data for the subsequent metrics




#for the following variables we have to consider the case where the fishing effort is not available for any species fished by the focal vessel OR for secondary/third main species ! The latter case is not taken into account by any of the previously computed variables, we have to produce NA directly in the code for this particular case using the following line: suppressWarnings((max(c(NA), na.rm=T))) => when vector only containing NA max(vector) will return Inf with a warning, suppressWarnings is then used to supress this associated warning. When Inf is produced it will always be compared to NA, for which we will have previously associated NA taxa, these NA will be selected to return NA values for second or third main taxa in these cases.



data_vessel[,second_spe_effort_year:=NA_character_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_effort_year),second_spe_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [, main:=rep(data_vessel[,main_spe_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [is.na(.), ESP2_COD_FAO:=NA] # when fishing effort is not available, we associate NA taxa to it
                  [,.(.==suppressWarnings(max(., na.rm=T)),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T | is.na(V1)] #selection of maximal values and NA values
                      [order(NAVS_COD_YEAR,ESP2_COD_FAO, na.last=T)] #put NA values after non-NA, to give priority to it
                        [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ] #selection of the first maximal values (by alphabetical order) or of NA values if no maximal values observed
 #assigns the second main fished species (in terms of fishing effort) in a year for each vessel







data_vessel[,third_spe_effort_year:=NA_character_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_effort_year),third_spe_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [, main:=rep(data_vessel[,main_spe_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)] 
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [is.na(.), ESP2_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ESP2_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ] 
 #assigns the third main fished species (in terms of fishing effort) in a year for each vessel











data_vessel[,second_spe_weight_year:=NA_character_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_weight_year),second_spe_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spe_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                 [is.na(.), ESP2_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ESP2_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
 #assigns the second main fished species (in terms of fishing weight) in a year for each vessel







data_vessel[,third_spe_weight_year:=NA_character_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_weight_year),third_spe_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spe_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                   [is.na(.), ESP2_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ESP2_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
 #assigns the third main fished species (in terms of fishing weight) in a year for each vessel














data_vessel[,second_spe_weight.prod_year:=NA_character_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_weight.prod_year),second_spe_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spe_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                 [is.na(.), ESP2_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ESP2_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
 #assigns the second main fished species (in terms of fishing productivity) in a year for each vessel







data_vessel[,third_spe_weight.prod_year:=NA_character_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_weight.prod_year),third_spe_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spe_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                   [is.na(.), ESP2_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ESP2_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
 #assigns the third main fished species (in terms of fishing productivity) in a year for each vessel









data_vessel[,second_spe_eco_year:=NA_character_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_eco_year),second_spe_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spe_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                 [is.na(.), ESP2_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ESP2_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
 #assigns the second main fished species (in terms of fishing economic value) in a year for each vessel







data_vessel[,third_spe_eco_year:=NA_character_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_eco_year),third_spe_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spe_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                   [is.na(.), ESP2_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ESP2_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
 #assigns the third main fished species (in terms of fishing economic value) in a year for each vessel













data_vessel[,second_spe_eco.prod_year:=NA_character_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_eco.prod_year),second_spe_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spe_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                 [is.na(.), ESP2_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ESP2_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
 #assigns the second main fished species (in terms of fishing economic productivity) in a year for each vessel







data_vessel[,third_spe_eco.prod_year:=NA_character_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_eco.prod_year),third_spe_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spe_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                   [is.na(.), ESP2_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ESP2_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] ]
 #assigns the third main fished species (in terms of fishing economic productivity) in a year for each vessel



















data_vessel[,second_prop_spe_nb_year:=NA_real_]

data_vessel[nb_spe_year>1,second_prop_spe_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ESP2_COD_FAO")
          [, main:=rep(data_vessel[,main_spe_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the proportion of second main fished species (in sequence number) in a year for each vessel




data_vessel[,third_prop_spe_nb_year:=NA_real_]

data_vessel[nb_spe_year>2,third_prop_spe_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ESP2_COD_FAO")
          [, main:=rep(data_vessel[,main_spe_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished species (in sequence number) in a year for each vessel













data_vessel[,second_prop_spe_weight_year:=NA_real_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_weight_year),second_prop_spe_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spe_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished species (in fishing weight) in a year for each vessel







data_vessel[,third_prop_spe_weight_year:=NA_real_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_weight_year),third_prop_spe_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spe_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished species (in fishing weight) in a year for each vessel















data_vessel[,second_prop_spe_eco_year:=NA_real_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_eco_year),second_prop_spe_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spe_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished species (in economic value) in a year for each vessel







data_vessel[,third_prop_spe_eco_year:=NA_real_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_eco_year),third_prop_spe_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spe_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished species (in economic value) in a year for each vessel















data_vessel[,second_prop_spe_weight.prod_year:=NA_real_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_weight.prod_year),second_prop_spe_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spe_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished species (in productivity) in a year for each vessel







data_vessel[,third_prop_spe_weight.prod_year:=NA_real_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_weight.prod_year),third_prop_spe_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spe_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished species (in productivity) in a year for each vessel















data_vessel[,second_prop_spe_eco.prod_year:=NA_real_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_eco.prod_year),second_prop_spe_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spe_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished species (in economic productivity) in a year for each vessel







data_vessel[,third_prop_spe_eco.prod_year:=NA_real_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_eco.prod_year),third_prop_spe_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spe_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished species (in economic productivity) in a year for each vessel






























data_vessel[,value_second_spe_effort_year:=NA_real_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_effort_year),value_second_spe_effort_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [, main:=rep(data_vessel[,main_spe_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                  [is.infinite(V1), V1:=NA] #attribution of NA values in place of Infinite values (corresponding with cases with only NAs)
                    [,V1] ]
  #assigns the fishing effort value of the second main fished species in a year for each vessel





data_vessel[,value_third_spe_effort_year:=NA_real_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_effort_year),value_third_spe_effort_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [, main:=rep(data_vessel[,main_spe_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
  #assigns the fishing effort value of the third main fished species in a year for each vessel





data_vessel[,second_prop_spe_effort_year:=value_second_spe_effort_year/effort_year]


 #assigns the proportion of the second main fished species (in fishing effort) in a year for each vessel




data_vessel[,third_prop_spe_effort_year:=value_third_spe_effort_year/effort_year]


 #assigns the proportion of the third main fished species (in fishing effort) in a year for each vessel












data_vessel[,value_second_spe_weight_year:=NA_real_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_weight_year),value_second_spe_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spe_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main fished species (in fishing weight) in a year for each vessel







data_vessel[,value_third_spe_weight_year:=NA_real_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_weight_year),value_third_spe_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spe_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished species (in fishing weight) in a year for each vessel















data_vessel[,value_second_spe_eco_year:=NA_real_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_eco_year),value_second_spe_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spe_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main fished species (in economic value) in a year for each vessel







data_vessel[,value_third_spe_eco_year:=NA_real_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_eco_year),value_third_spe_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spe_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished species (in economic value) in a year for each vessel















data_vessel[,value_second_spe_weight.prod_year:=NA_real_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_weight.prod_year),value_second_spe_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spe_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main fished species (in productivity) in a year for each vessel







data_vessel[,value_third_spe_weight.prod_year:=NA_real_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_weight.prod_year),value_third_spe_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spe_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of third main fished species (in productivity) in a year for each vessel















data_vessel[,value_second_spe_eco.prod_year:=NA_real_]

data_vessel[nb_spe_year>1 & !is.na(main_spe_eco.prod_year),value_second_spe_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spe_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ESP2_COD_FAO)]
              [main!=ESP2_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main fished species (in economic productivity) in a year for each vessel







data_vessel[,value_third_spe_eco.prod_year:=NA_real_]

data_vessel[nb_spe_year>2 & !is.na(second_spe_eco.prod_year),value_third_spe_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ESP2_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spe_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spe_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ESP2_COD_FAO)]
                [ESP2_COD_FAO!=main & ESP2_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished species (in economic productivity) in a year for each vessel







```






####Group of species level



```{r secondary targeted taxa (group of species)}



data_vessel[,second_spp_nb_year:=NA_character_]

data_vessel[nb_spp_year>1,second_spp_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "SPP_COD_FAO")
          [, main:=rep(data_vessel[,main_spp_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                [,.(.==max(.),SPP_COD_FAO),by = NAVS_COD_YEAR]
                  [V1==T] #selection of maximal values
                    [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the second main fished group of species (in sequence number) in a year for each vessel







data_vessel[,third_spp_nb_year:=NA_character_]

data_vessel[nb_spp_year>2,third_spp_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "SPP_COD_FAO")
          [, main:=rep(data_vessel[,main_spp_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                  [,.(.==max(.),SPP_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T] #selection of maximal values
                      [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the third main fished group of species (in sequence number) in a year for each vessel










#warning: important amount of vessels with missing data for the subsequent metrics








data_vessel[,second_spp_effort_year:=NA_character_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_effort_year),second_spp_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(NAVS_COD_YEAR,SPP_COD_FAO)] #then sum of effort within maree for the same group of species
            [, main:=rep(data_vessel[,main_spp_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [main!=SPP_COD_FAO,]
                 [is.na(V1), SPP_COD_FAO:=NA] # when fishing effort is not available, we associate NA taxa to it
                  [,.(V1==suppressWarnings(max(V1, na.rm=T)),SPP_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T | is.na(V1)] #selection of maximal values and NA values
                      [order(NAVS_COD_YEAR,SPP_COD_FAO, na.last=T)] #put NA values after non-NA, to give priority to it
                        [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ] 
 #assigns the second main fished group of species (in terms of fishing effort) in a year for each vessel







data_vessel[,third_spp_effort_year:=NA_character_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_effort_year),third_spp_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [, main:=rep(data_vessel[,main_spp_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [, second:=rep(data_vessel[,second_spp_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
                [!is.na(SPP_COD_FAO)]
                  [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                    [is.na(V1), SPP_COD_FAO:=NA] 
                      [,.(V1==suppressWarnings(max(V1, na.rm=T)),SPP_COD_FAO),by = NAVS_COD_YEAR]
                        [V1==T | is.na(V1)] 
                          [order(NAVS_COD_YEAR,SPP_COD_FAO, na.last=T)]
                            [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ] 
 #assigns the third main fished group of species (in terms of fishing effort) in a year for each vessel











data_vessel[,second_spp_weight_year:=NA_character_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_weight_year),second_spp_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spp_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                 [is.na(.), SPP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),SPP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,SPP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
 #assigns the second main fished group of species (in terms of fishing weight) in a year for each vessel







data_vessel[,third_spp_weight_year:=NA_character_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_weight_year),third_spp_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spp_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                   [is.na(.), SPP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),SPP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,SPP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
 #assigns the third main fished group of species (in terms of fishing weight) in a year for each vessel














data_vessel[,second_spp_weight.prod_year:=NA_character_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_weight.prod_year),second_spp_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spp_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                 [is.na(.), SPP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),SPP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,SPP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
 #assigns the second main fished group of species (in terms of fishing productivity) in a year for each vessel







data_vessel[,third_spp_weight.prod_year:=NA_character_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_weight.prod_year),third_spp_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spp_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                   [is.na(.), SPP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),SPP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,SPP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
 #assigns the third main fished group of species (in terms of fishing productivity) in a year for each vessel









data_vessel[,second_spp_eco_year:=NA_character_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_eco_year),second_spp_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spp_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                 [is.na(.), SPP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),SPP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,SPP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
 #assigns the second main fished group of species (in terms of fishing economic value) in a year for each vessel







data_vessel[,third_spp_eco_year:=NA_character_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_eco_year),third_spp_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spp_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                   [is.na(.), SPP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),SPP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,SPP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
 #assigns the third main fished group of species (in terms of fishing economic value) in a year for each vessel













data_vessel[,second_spp_eco.prod_year:=NA_character_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_eco.prod_year),second_spp_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spp_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                 [is.na(.), SPP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),SPP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,SPP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
 #assigns the second main fished group of species (in terms of fishing economic productivity) in a year for each vessel







data_vessel[,third_spp_eco.prod_year:=NA_character_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_eco.prod_year),third_spp_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spp_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                   [is.na(.), SPP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),SPP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,SPP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),SPP_COD_FAO] ]
 #assigns the third main fished group of species (in terms of fishing economic productivity) in a year for each vessel



















data_vessel[,second_prop_spp_nb_year:=NA_real_]

data_vessel[nb_spp_year>1,second_prop_spp_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "SPP_COD_FAO")
          [, main:=rep(data_vessel[,main_spp_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the proportion of second main fished group of species (in sequence number) in a year for each vessel




data_vessel[,third_prop_spp_nb_year:=NA_real_]

data_vessel[nb_spp_year>2,third_prop_spp_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "SPP_COD_FAO")
          [, main:=rep(data_vessel[,main_spp_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished group of species (in sequence number) in a year for each vessel













data_vessel[,second_prop_spp_weight_year:=NA_real_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_weight_year),second_prop_spp_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spp_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished group of species (in fishing weight) in a year for each vessel







data_vessel[,third_prop_spp_weight_year:=NA_real_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_weight_year),third_prop_spp_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spp_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished group of species (in fishing weight) in a year for each vessel















data_vessel[,second_prop_spp_eco_year:=NA_real_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_eco_year),second_prop_spp_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spp_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished group of species (in economic value) in a year for each vessel







data_vessel[,third_prop_spp_eco_year:=NA_real_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_eco_year),third_prop_spp_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spp_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished group of species (in economic value) in a year for each vessel















data_vessel[,second_prop_spp_weight.prod_year:=NA_real_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_weight.prod_year),second_prop_spp_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spp_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished group of species (in productivity) in a year for each vessel







data_vessel[,third_prop_spp_weight.prod_year:=NA_real_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_weight.prod_year),third_prop_spp_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spp_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished group of species (in productivity) in a year for each vessel















data_vessel[,second_prop_spp_eco.prod_year:=NA_real_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_eco.prod_year),second_prop_spp_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spp_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished group of species (in economic productivity) in a year for each vessel







data_vessel[,third_prop_spp_eco.prod_year:=NA_real_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_eco.prod_year),third_prop_spp_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spp_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished group of species (in economic productivity) in a year for each vessel



























data_vessel[,value_second_spp_effort_year:=NA_real_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_effort_year),value_second_spp_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [, main:=rep(data_vessel[,main_spp_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [main!=SPP_COD_FAO,]
                  [,suppressWarnings(max(V1, na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA] #attribution of NA values in place of Infinite values (corresponding with cases with only NAs)
                      [,V1] ]
  #assigns the fishing effort value of the second main fished group of species in a year for each vessel





data_vessel[,value_third_spp_effort_year:=NA_real_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_effort_year),value_third_spp_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,SPP_COD_FAO)]
            [, main:=rep(data_vessel[,main_spp_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [, second:=rep(data_vessel[,second_spp_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
                [!is.na(SPP_COD_FAO)]
                  [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                    [,suppressWarnings(max(V1, na.rm=T)),by = NAVS_COD_YEAR]
                      [is.infinite(V1), V1:=NA]
                        [,V1] ]
  #assigns the fishing effort value of the third main fished group of species in a year for each vessel





data_vessel[,second_prop_spp_effort_year:=value_second_spp_effort_year/effort_year]


 #assigns the proportion of the second main fished group of species (in fishing effort) in a year for each vessel




data_vessel[,third_prop_spp_effort_year:=value_third_spp_effort_year/effort_year]


 #assigns the proportion of the third main fished group of species (in fishing effort) in a year for each vessel












data_vessel[,value_second_spp_weight_year:=NA_real_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_weight_year),value_second_spp_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spp_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main fished group of species (in fishing weight) in a year for each vessel







data_vessel[,value_third_spp_weight_year:=NA_real_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_weight_year),value_third_spp_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_spp_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished group of species (in fishing weight) in a year for each vessel















data_vessel[,value_second_spp_eco_year:=NA_real_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_eco_year),value_second_spp_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spp_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main fished group of species (in economic value) in a year for each vessel







data_vessel[,value_third_spp_eco_year:=NA_real_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_eco_year),value_third_spp_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_spp_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished group of species (in economic value) in a year for each vessel















data_vessel[,value_second_spp_weight.prod_year:=NA_real_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_weight.prod_year),value_second_spp_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spp_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main fished group of species (in productivity) in a year for each vessel







data_vessel[,value_third_spp_weight.prod_year:=NA_real_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_weight.prod_year),value_third_spp_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_spp_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of third main fished group of species (in productivity) in a year for each vessel















data_vessel[,value_second_spp_eco.prod_year:=NA_real_]

data_vessel[nb_spp_year>1 & !is.na(main_spp_eco.prod_year),value_second_spp_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spp_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(SPP_COD_FAO)]
              [main!=SPP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main fished group of species (in economic productivity) in a year for each vessel







data_vessel[,value_third_spp_eco.prod_year:=NA_real_]

data_vessel[nb_spp_year>2 & !is.na(second_spp_eco.prod_year),value_third_spp_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SPP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_spp_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_spp_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(SPP_COD_FAO)]
                [SPP_COD_FAO!=main & SPP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished group of species (in economic productivity) in a year for each vessel






```







####Family level



```{r secondary targeted taxa (family)}



data_vessel[,second_family_nb_year:=NA_character_]

data_vessel[nb_family_year>1,second_family_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = length,
        value.var = "FAMILY_COD_FAO")
          [, main:=rep(data_vessel[,main_family_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                [,.(.==max(.),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                  [V1==T] #selection of maximal values
                    [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the second main fished family (in sequence number) in a year for each vessel







data_vessel[,third_family_nb_year:=NA_character_]

data_vessel[nb_family_year>2,third_family_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = length,
        value.var = "FAMILY_COD_FAO")
          [, main:=rep(data_vessel[,main_family_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                  [,.(.==max(.),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T] #selection of maximal values
                      [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the third main fished family (in sequence number) in a year for each vessel










#warning: important amount of vessels with missing data for the subsequent metrics








data_vessel[,second_family_effort_year:=NA_character_]

data_vessel[nb_family_year>1 & !is.na(main_family_effort_year),second_family_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)] #then sum of effort within maree for the same family
            [, main:=rep(data_vessel[,main_family_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [main!=FAMILY_COD_FAO,]
                 [is.na(V1), FAMILY_COD_FAO:=NA] # when fishing effort is not available, we associate NA taxa to it
                  [,.(V1==suppressWarnings(max(V1, na.rm=T)),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T | is.na(V1)] #selection of maximal values and NA values
                      [order(NAVS_COD_YEAR,FAMILY_COD_FAO, na.last=T)] #put NA values after non-NA, to give priority to it
                        [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ] 
 #assigns the second main fished family (in terms of fishing effort) in a year for each vessel







data_vessel[,third_family_effort_year:=NA_character_]

data_vessel[nb_family_year>2 & !is.na(second_family_effort_year),third_family_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [, main:=rep(data_vessel[,main_family_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [, second:=rep(data_vessel[,second_family_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
                [!is.na(FAMILY_COD_FAO)]
                  [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                    [is.na(V1), FAMILY_COD_FAO:=NA] 
                      [,.(V1==suppressWarnings(max(V1, na.rm=T)),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                        [V1==T | is.na(V1)] 
                          [order(NAVS_COD_YEAR,FAMILY_COD_FAO, na.last=T)]
                            [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ] 
 #assigns the third main fished family (in terms of fishing effort) in a year for each vessel











data_vessel[,second_family_weight_year:=NA_character_]

data_vessel[nb_family_year>1 & !is.na(main_family_weight_year),second_family_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_family_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                 [is.na(.), FAMILY_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,FAMILY_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
 #assigns the second main fished family (in terms of fishing weight) in a year for each vessel







data_vessel[,third_family_weight_year:=NA_character_]

data_vessel[nb_family_year>2 & !is.na(second_family_weight_year),third_family_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_family_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                   [is.na(.), FAMILY_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,FAMILY_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
 #assigns the third main fished family (in terms of fishing weight) in a year for each vessel














data_vessel[,second_family_weight.prod_year:=NA_character_]

data_vessel[nb_family_year>1 & !is.na(main_family_weight.prod_year),second_family_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_family_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                 [is.na(.), FAMILY_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,FAMILY_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
 #assigns the second main fished family (in terms of fishing productivity) in a year for each vessel







data_vessel[,third_family_weight.prod_year:=NA_character_]

data_vessel[nb_family_year>2 & !is.na(second_family_weight.prod_year),third_family_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_family_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                   [is.na(.), FAMILY_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,FAMILY_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
 #assigns the third main fished family (in terms of fishing productivity) in a year for each vessel









data_vessel[,second_family_eco_year:=NA_character_]

data_vessel[nb_family_year>1 & !is.na(main_family_eco_year),second_family_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_family_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                 [is.na(.), FAMILY_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,FAMILY_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
 #assigns the second main fished family (in terms of fishing economic value) in a year for each vessel







data_vessel[,third_family_eco_year:=NA_character_]

data_vessel[nb_family_year>2 & !is.na(second_family_eco_year),third_family_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_family_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                   [is.na(.), FAMILY_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,FAMILY_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
 #assigns the third main fished family (in terms of fishing economic value) in a year for each vessel













data_vessel[,second_family_eco.prod_year:=NA_character_]

data_vessel[nb_family_year>1 & !is.na(main_family_eco.prod_year),second_family_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_family_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                 [is.na(.), FAMILY_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,FAMILY_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
 #assigns the second main fished family (in terms of fishing economic productivity) in a year for each vessel







data_vessel[,third_family_eco.prod_year:=NA_character_]

data_vessel[nb_family_year>2 & !is.na(second_family_eco.prod_year),third_family_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_family_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                   [is.na(.), FAMILY_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,FAMILY_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] ]
 #assigns the third main fished family (in terms of fishing economic productivity) in a year for each vessel



















data_vessel[,second_prop_family_nb_year:=NA_real_]

data_vessel[nb_family_year>1,second_prop_family_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = length,
        value.var = "FAMILY_COD_FAO")
          [, main:=rep(data_vessel[,main_family_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the proportion of second main fished family (in sequence number) in a year for each vessel




data_vessel[,third_prop_family_nb_year:=NA_real_]

data_vessel[nb_family_year>2,third_prop_family_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = length,
        value.var = "FAMILY_COD_FAO")
          [, main:=rep(data_vessel[,main_family_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished family (in sequence number) in a year for each vessel













data_vessel[,second_prop_family_weight_year:=NA_real_]

data_vessel[nb_family_year>1 & !is.na(main_family_weight_year),second_prop_family_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_family_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished family (in fishing weight) in a year for each vessel







data_vessel[,third_prop_family_weight_year:=NA_real_]

data_vessel[nb_family_year>2 & !is.na(second_family_weight_year),third_prop_family_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_family_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished family (in fishing weight) in a year for each vessel















data_vessel[,second_prop_family_eco_year:=NA_real_]

data_vessel[nb_family_year>1 & !is.na(main_family_eco_year),second_prop_family_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_family_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished family (in economic value) in a year for each vessel







data_vessel[,third_prop_family_eco_year:=NA_real_]

data_vessel[nb_family_year>2 & !is.na(second_family_eco_year),third_prop_family_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_family_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished family (in economic value) in a year for each vessel















data_vessel[,second_prop_family_weight.prod_year:=NA_real_]

data_vessel[nb_family_year>1 & !is.na(main_family_weight.prod_year),second_prop_family_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_family_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished family (in productivity) in a year for each vessel







data_vessel[,third_prop_family_weight.prod_year:=NA_real_]

data_vessel[nb_family_year>2 & !is.na(second_family_weight.prod_year),third_prop_family_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_family_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished family (in productivity) in a year for each vessel















data_vessel[,second_prop_family_eco.prod_year:=NA_real_]

data_vessel[nb_family_year>1 & !is.na(main_family_eco.prod_year),second_prop_family_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_family_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished family (in economic productivity) in a year for each vessel







data_vessel[,third_prop_family_eco.prod_year:=NA_real_]

data_vessel[nb_family_year>2 & !is.na(second_family_eco.prod_year),third_prop_family_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_family_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished family (in economic productivity) in a year for each vessel



























data_vessel[,value_second_family_effort_year:=NA_real_]

data_vessel[nb_family_year>1 & !is.na(main_family_effort_year),value_second_family_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [, main:=rep(data_vessel[,main_family_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [main!=FAMILY_COD_FAO,]
                  [,suppressWarnings(max(V1, na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA] #attribution of NA values in place of Infinite values (corresponding with cases with only NAs)
                      [,V1] ]
  #assigns the fishing effort value of the second main fished family in a year for each vessel





data_vessel[,value_third_family_effort_year:=NA_real_]

data_vessel[nb_family_year>2 & !is.na(second_family_effort_year),value_third_family_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,FAMILY_COD_FAO)]
            [, main:=rep(data_vessel[,main_family_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [, second:=rep(data_vessel[,second_family_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
                [!is.na(FAMILY_COD_FAO)]
                  [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                    [,suppressWarnings(max(V1, na.rm=T)),by = NAVS_COD_YEAR]
                      [is.infinite(V1), V1:=NA]
                        [,V1] ]
  #assigns the fishing effort value of the third main fished family in a year for each vessel





data_vessel[,second_prop_family_effort_year:=value_second_family_effort_year/effort_year]


 #assigns the proportion of the second main fished family (in fishing effort) in a year for each vessel




data_vessel[,third_prop_family_effort_year:=value_third_family_effort_year/effort_year]


 #assigns the proportion of the third main fished family (in fishing effort) in a year for each vessel












data_vessel[,value_second_family_weight_year:=NA_real_]

data_vessel[nb_family_year>1 & !is.na(main_family_weight_year),value_second_family_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_family_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main fished family (in fishing weight) in a year for each vessel







data_vessel[,value_third_family_weight_year:=NA_real_]

data_vessel[nb_family_year>2 & !is.na(second_family_weight_year),value_third_family_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_family_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished family (in fishing weight) in a year for each vessel















data_vessel[,value_second_family_eco_year:=NA_real_]

data_vessel[nb_family_year>1 & !is.na(main_family_eco_year),value_second_family_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_family_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main fished family (in economic value) in a year for each vessel







data_vessel[,value_third_family_eco_year:=NA_real_]

data_vessel[nb_family_year>2 & !is.na(second_family_eco_year),value_third_family_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_family_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished family (in economic value) in a year for each vessel















data_vessel[,value_second_family_weight.prod_year:=NA_real_]

data_vessel[nb_family_year>1 & !is.na(main_family_weight.prod_year),value_second_family_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_family_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main fished family (in productivity) in a year for each vessel







data_vessel[,value_third_family_weight.prod_year:=NA_real_]

data_vessel[nb_family_year>2 & !is.na(second_family_weight.prod_year),value_third_family_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_family_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of third main fished family (in productivity) in a year for each vessel















data_vessel[,value_second_family_eco.prod_year:=NA_real_]

data_vessel[nb_family_year>1 & !is.na(main_family_eco.prod_year),value_second_family_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_family_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(FAMILY_COD_FAO)]
              [main!=FAMILY_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main fished family (in economic productivity) in a year for each vessel







data_vessel[,value_third_family_eco.prod_year:=NA_real_]

data_vessel[nb_family_year>2 & !is.na(second_family_eco.prod_year),value_third_family_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+FAMILY_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_family_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_family_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(FAMILY_COD_FAO)]
                [FAMILY_COD_FAO!=main & FAMILY_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished family (in economic productivity) in a year for each vessel






```








####Order level


```{r secondary targeted taxa (order)}



data_vessel[,second_order_nb_year:=NA_character_]

data_vessel[nb_order_year>1,second_order_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ORDER_COD_FAO")
          [, main:=rep(data_vessel[,main_order_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                [,.(.==max(.),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                  [V1==T] #selection of maximal values
                    [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the second main fished order (in sequence number) in a year for each vessel







data_vessel[,third_order_nb_year:=NA_character_]

data_vessel[nb_order_year>2,third_order_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ORDER_COD_FAO")
          [, main:=rep(data_vessel[,main_order_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                  [,.(.==max(.),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T] #selection of maximal values
                      [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the third main fished order (in sequence number) in a year for each vessel










#warning: important amount of vessels with missing data for the subsequent metrics








data_vessel[,second_order_effort_year:=NA_character_]

data_vessel[nb_order_year>1 & !is.na(main_order_effort_year),second_order_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)] #then sum of effort within maree for the same order
            [, main:=rep(data_vessel[,main_order_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [main!=ORDER_COD_FAO,]
                 [is.na(V1), ORDER_COD_FAO:=NA] # when fishing effort is not available, we associate NA taxa to it
                  [,.(V1==suppressWarnings(max(V1, na.rm=T)),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T | is.na(V1)] #selection of maximal values and NA values
                      [order(NAVS_COD_YEAR,ORDER_COD_FAO, na.last=T)] #put NA values after non-NA, to give priority to it
                        [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ] 
 #assigns the second main fished order (in terms of fishing effort) in a year for each vessel







data_vessel[,third_order_effort_year:=NA_character_]

data_vessel[nb_order_year>2 & !is.na(second_order_effort_year),third_order_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [, main:=rep(data_vessel[,main_order_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [, second:=rep(data_vessel[,second_order_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
                [!is.na(ORDER_COD_FAO)]
                  [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                    [is.na(V1), ORDER_COD_FAO:=NA] 
                      [,.(V1==suppressWarnings(max(V1, na.rm=T)),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                        [V1==T | is.na(V1)] 
                          [order(NAVS_COD_YEAR,ORDER_COD_FAO, na.last=T)]
                            [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ] 
 #assigns the third main fished order (in terms of fishing effort) in a year for each vessel











data_vessel[,second_order_weight_year:=NA_character_]

data_vessel[nb_order_year>1 & !is.na(main_order_weight_year),second_order_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_order_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                 [is.na(.), ORDER_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ORDER_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
 #assigns the second main fished order (in terms of fishing weight) in a year for each vessel







data_vessel[,third_order_weight_year:=NA_character_]

data_vessel[nb_order_year>2 & !is.na(second_order_weight_year),third_order_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_order_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                   [is.na(.), ORDER_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ORDER_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
 #assigns the third main fished order (in terms of fishing weight) in a year for each vessel














data_vessel[,second_order_weight.prod_year:=NA_character_]

data_vessel[nb_order_year>1 & !is.na(main_order_weight.prod_year),second_order_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_order_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                 [is.na(.), ORDER_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ORDER_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
 #assigns the second main fished order (in terms of fishing productivity) in a year for each vessel







data_vessel[,third_order_weight.prod_year:=NA_character_]

data_vessel[nb_order_year>2 & !is.na(second_order_weight.prod_year),third_order_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_order_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                   [is.na(.), ORDER_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ORDER_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
 #assigns the third main fished order (in terms of fishing productivity) in a year for each vessel









data_vessel[,second_order_eco_year:=NA_character_]

data_vessel[nb_order_year>1 & !is.na(main_order_eco_year),second_order_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_order_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                 [is.na(.), ORDER_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ORDER_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
 #assigns the second main fished order (in terms of fishing economic value) in a year for each vessel







data_vessel[,third_order_eco_year:=NA_character_]

data_vessel[nb_order_year>2 & !is.na(second_order_eco_year),third_order_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_order_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                   [is.na(.), ORDER_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ORDER_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
 #assigns the third main fished order (in terms of fishing economic value) in a year for each vessel













data_vessel[,second_order_eco.prod_year:=NA_character_]

data_vessel[nb_order_year>1 & !is.na(main_order_eco.prod_year),second_order_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_order_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                 [is.na(.), ORDER_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ORDER_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
 #assigns the second main fished order (in terms of fishing economic productivity) in a year for each vessel







data_vessel[,third_order_eco.prod_year:=NA_character_]

data_vessel[nb_order_year>2 & !is.na(second_order_eco.prod_year),third_order_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_order_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                   [is.na(.), ORDER_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ORDER_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ORDER_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ORDER_COD_FAO] ]
 #assigns the third main fished order (in terms of fishing economic productivity) in a year for each vessel



















data_vessel[,second_prop_order_nb_year:=NA_real_]

data_vessel[nb_order_year>1,second_prop_order_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ORDER_COD_FAO")
          [, main:=rep(data_vessel[,main_order_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the proportion of second main fished order (in sequence number) in a year for each vessel




data_vessel[,third_prop_order_nb_year:=NA_real_]

data_vessel[nb_order_year>2,third_prop_order_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ORDER_COD_FAO")
          [, main:=rep(data_vessel[,main_order_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished order (in sequence number) in a year for each vessel













data_vessel[,second_prop_order_weight_year:=NA_real_]

data_vessel[nb_order_year>1 & !is.na(main_order_weight_year),second_prop_order_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_order_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished order (in fishing weight) in a year for each vessel







data_vessel[,third_prop_order_weight_year:=NA_real_]

data_vessel[nb_order_year>2 & !is.na(second_order_weight_year),third_prop_order_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_order_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished order (in fishing weight) in a year for each vessel















data_vessel[,second_prop_order_eco_year:=NA_real_]

data_vessel[nb_order_year>1 & !is.na(main_order_eco_year),second_prop_order_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_order_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished order (in economic value) in a year for each vessel







data_vessel[,third_prop_order_eco_year:=NA_real_]

data_vessel[nb_order_year>2 & !is.na(second_order_eco_year),third_prop_order_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_order_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished order (in economic value) in a year for each vessel















data_vessel[,second_prop_order_weight.prod_year:=NA_real_]

data_vessel[nb_order_year>1 & !is.na(main_order_weight.prod_year),second_prop_order_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_order_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished order (in productivity) in a year for each vessel







data_vessel[,third_prop_order_weight.prod_year:=NA_real_]

data_vessel[nb_order_year>2 & !is.na(second_order_weight.prod_year),third_prop_order_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_order_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished order (in productivity) in a year for each vessel















data_vessel[,second_prop_order_eco.prod_year:=NA_real_]

data_vessel[nb_order_year>1 & !is.na(main_order_eco.prod_year),second_prop_order_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_order_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished order (in economic productivity) in a year for each vessel







data_vessel[,third_prop_order_eco.prod_year:=NA_real_]

data_vessel[nb_order_year>2 & !is.na(second_order_eco.prod_year),third_prop_order_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_order_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished order (in economic productivity) in a year for each vessel



























data_vessel[,value_second_order_effort_year:=NA_real_]

data_vessel[nb_order_year>1 & !is.na(main_order_effort_year),value_second_order_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [, main:=rep(data_vessel[,main_order_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [main!=ORDER_COD_FAO,]
                  [,suppressWarnings(max(V1, na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA] #attribution of NA values in place of Infinite values (corresponding with cases with only NAs)
                      [,V1] ]
  #assigns the fishing effort value of the second main fished order in a year for each vessel





data_vessel[,value_third_order_effort_year:=NA_real_]

data_vessel[nb_order_year>2 & !is.na(second_order_effort_year),value_third_order_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,ORDER_COD_FAO)]
            [, main:=rep(data_vessel[,main_order_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [, second:=rep(data_vessel[,second_order_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
                [!is.na(ORDER_COD_FAO)]
                  [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                    [,suppressWarnings(max(V1, na.rm=T)),by = NAVS_COD_YEAR]
                      [is.infinite(V1), V1:=NA]
                        [,V1] ]
  #assigns the fishing effort value of the third main fished order in a year for each vessel





data_vessel[,second_prop_order_effort_year:=value_second_order_effort_year/effort_year]


 #assigns the proportion of the second main fished order (in fishing effort) in a year for each vessel




data_vessel[,third_prop_order_effort_year:=value_third_order_effort_year/effort_year]


 #assigns the proportion of the third main fished order (in fishing effort) in a year for each vessel












data_vessel[,value_second_order_weight_year:=NA_real_]

data_vessel[nb_order_year>1 & !is.na(main_order_weight_year),value_second_order_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_order_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main fished order (in fishing weight) in a year for each vessel







data_vessel[,value_third_order_weight_year:=NA_real_]

data_vessel[nb_order_year>2 & !is.na(second_order_weight_year),value_third_order_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_order_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished order (in fishing weight) in a year for each vessel















data_vessel[,value_second_order_eco_year:=NA_real_]

data_vessel[nb_order_year>1 & !is.na(main_order_eco_year),value_second_order_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_order_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main fished order (in economic value) in a year for each vessel







data_vessel[,value_third_order_eco_year:=NA_real_]

data_vessel[nb_order_year>2 & !is.na(second_order_eco_year),value_third_order_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_order_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished order (in economic value) in a year for each vessel















data_vessel[,value_second_order_weight.prod_year:=NA_real_]

data_vessel[nb_order_year>1 & !is.na(main_order_weight.prod_year),value_second_order_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_order_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main fished order (in productivity) in a year for each vessel







data_vessel[,value_third_order_weight.prod_year:=NA_real_]

data_vessel[nb_order_year>2 & !is.na(second_order_weight.prod_year),value_third_order_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_order_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of third main fished order (in productivity) in a year for each vessel















data_vessel[,value_second_order_eco.prod_year:=NA_real_]

data_vessel[nb_order_year>1 & !is.na(main_order_eco.prod_year),value_second_order_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_order_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ORDER_COD_FAO)]
              [main!=ORDER_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main fished order (in economic productivity) in a year for each vessel







data_vessel[,value_third_order_eco.prod_year:=NA_real_]

data_vessel[nb_order_year>2 & !is.na(second_order_eco.prod_year),value_third_order_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ORDER_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_order_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_order_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ORDER_COD_FAO)]
                [ORDER_COD_FAO!=main & ORDER_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished order (in economic productivity) in a year for each vessel






```








####ISSCAAP code level



```{r secondary targeted taxa (isscaap code)}



data_vessel[,second_isscaap_nb_year:=NA_character_]

data_vessel[nb_isscaap_year>1,second_isscaap_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ISSCAAP_COD_FAO")
          [, main:=rep(data_vessel[,main_isscaap_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                [,.(.==max(.),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                  [V1==T] #selection of maximal values
                    [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the second main fished isscaap code (in sequence number) in a year for each vessel







data_vessel[,third_isscaap_nb_year:=NA_character_]

data_vessel[nb_isscaap_year>2,third_isscaap_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ISSCAAP_COD_FAO")
          [, main:=rep(data_vessel[,main_isscaap_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                  [,.(.==max(.),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T] #selection of maximal values
                      [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ] #selection of the first maximal values (by alphabetical order)
 #assigns the third main fished isscaap code (in sequence number) in a year for each vessel










#warning: important amount of vessels with missing data for the subsequent metrics








data_vessel[,second_isscaap_effort_year:=NA_character_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_effort_year),second_isscaap_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)] #then sum of effort within maree for the same isscaap code
            [, main:=rep(data_vessel[,main_isscaap_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [main!=ISSCAAP_COD_FAO,]
                 [is.na(V1), ISSCAAP_COD_FAO:=NA] # when fishing effort is not available, we associate NA taxa to it
                  [,.(V1==suppressWarnings(max(V1, na.rm=T)),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T | is.na(V1)] #selection of maximal values and NA values
                      [order(NAVS_COD_YEAR,ISSCAAP_COD_FAO, na.last=T)] #put NA values after non-NA, to give priority to it
                        [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ] 
 #assigns the second main fished isscaap code (in terms of fishing effort) in a year for each vessel







data_vessel[,third_isscaap_effort_year:=NA_character_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_effort_year),third_isscaap_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [, main:=rep(data_vessel[,main_isscaap_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [, second:=rep(data_vessel[,second_isscaap_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
                [!is.na(ISSCAAP_COD_FAO)]
                  [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                    [is.na(V1), ISSCAAP_COD_FAO:=NA] 
                      [,.(V1==suppressWarnings(max(V1, na.rm=T)),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                        [V1==T | is.na(V1)] 
                          [order(NAVS_COD_YEAR,ISSCAAP_COD_FAO, na.last=T)]
                            [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ] 
 #assigns the third main fished isscaap code (in terms of fishing effort) in a year for each vessel











data_vessel[,second_isscaap_weight_year:=NA_character_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_weight_year),second_isscaap_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                 [is.na(.), ISSCAAP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ISSCAAP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
 #assigns the second main fished isscaap code (in terms of fishing weight) in a year for each vessel







data_vessel[,third_isscaap_weight_year:=NA_character_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_weight_year),third_isscaap_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                   [is.na(.), ISSCAAP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ISSCAAP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
 #assigns the third main fished isscaap code (in terms of fishing weight) in a year for each vessel














data_vessel[,second_isscaap_weight.prod_year:=NA_character_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_weight.prod_year),second_isscaap_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_isscaap_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                 [is.na(.), ISSCAAP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ISSCAAP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
 #assigns the second main fished isscaap code (in terms of fishing productivity) in a year for each vessel







data_vessel[,third_isscaap_weight.prod_year:=NA_character_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_weight.prod_year),third_isscaap_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_isscaap_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                   [is.na(.), ISSCAAP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ISSCAAP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
 #assigns the third main fished isscaap code (in terms of fishing productivity) in a year for each vessel









data_vessel[,second_isscaap_eco_year:=NA_character_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_eco_year),second_isscaap_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                 [is.na(.), ISSCAAP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ISSCAAP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
 #assigns the second main fished isscaap code (in terms of fishing economic value) in a year for each vessel







data_vessel[,third_isscaap_eco_year:=NA_character_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_eco_year),third_isscaap_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                   [is.na(.), ISSCAAP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ISSCAAP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
 #assigns the third main fished isscaap code (in terms of fishing economic value) in a year for each vessel













data_vessel[,second_isscaap_eco.prod_year:=NA_character_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_eco.prod_year),second_isscaap_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_isscaap_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                 [is.na(.), ISSCAAP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ISSCAAP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
 #assigns the second main fished isscaap code (in terms of fishing economic productivity) in a year for each vessel







data_vessel[,third_isscaap_eco.prod_year:=NA_character_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_eco.prod_year),third_isscaap_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_isscaap_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                   [is.na(.), ISSCAAP_COD_FAO:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ISSCAAP_COD_FAO),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ISSCAAP_COD_FAO, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ISSCAAP_COD_FAO] ]
 #assigns the third main fished isscaap code (in terms of fishing economic productivity) in a year for each vessel



















data_vessel[,second_prop_isscaap_nb_year:=NA_real_]

data_vessel[nb_isscaap_year>1,second_prop_isscaap_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ISSCAAP_COD_FAO")
          [, main:=rep(data_vessel[,main_isscaap_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the proportion of second main fished isscaap code (in sequence number) in a year for each vessel




data_vessel[,third_prop_isscaap_nb_year:=NA_real_]

data_vessel[nb_isscaap_year>2,third_prop_isscaap_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = length,
        value.var = "ISSCAAP_COD_FAO")
          [, main:=rep(data_vessel[,main_isscaap_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished isscaap code (in sequence number) in a year for each vessel













data_vessel[,second_prop_isscaap_weight_year:=NA_real_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_weight_year),second_prop_isscaap_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished isscaap code (in fishing weight) in a year for each vessel







data_vessel[,third_prop_isscaap_weight_year:=NA_real_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_weight_year),third_prop_isscaap_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished isscaap code (in fishing weight) in a year for each vessel















data_vessel[,second_prop_isscaap_eco_year:=NA_real_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_eco_year),second_prop_isscaap_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished isscaap code (in economic value) in a year for each vessel







data_vessel[,third_prop_isscaap_eco_year:=NA_real_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_eco_year),third_prop_isscaap_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished isscaap code (in economic value) in a year for each vessel















data_vessel[,second_prop_isscaap_weight.prod_year:=NA_real_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_weight.prod_year),second_prop_isscaap_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_isscaap_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished isscaap code (in productivity) in a year for each vessel







data_vessel[,third_prop_isscaap_weight.prod_year:=NA_real_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_weight.prod_year),third_prop_isscaap_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_isscaap_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished isscaap code (in productivity) in a year for each vessel















data_vessel[,second_prop_isscaap_eco.prod_year:=NA_real_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_eco.prod_year),second_prop_isscaap_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_isscaap_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main fished isscaap code (in economic productivity) in a year for each vessel







data_vessel[,third_prop_isscaap_eco.prod_year:=NA_real_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_eco.prod_year),third_prop_isscaap_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_isscaap_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                   [,V1] ] 
 #assigns the proportion of third main fished isscaap code (in economic productivity) in a year for each vessel



























data_vessel[,value_second_isscaap_effort_year:=NA_real_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_effort_year),value_second_isscaap_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [, main:=rep(data_vessel[,main_isscaap_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [main!=ISSCAAP_COD_FAO,]
                  [,suppressWarnings(max(V1, na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA] #attribution of NA values in place of Infinite values (corresponding with cases with only NAs)
                      [,V1] ]
  #assigns the fishing effort value of the second main fished isscaap code in a year for each vessel





data_vessel[,value_third_isscaap_effort_year:=NA_real_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_effort_year),value_third_isscaap_effort_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [,sumna(.), by= .(NAVS_COD_YEAR,ISSCAAP_COD_FAO)]
            [, main:=rep(data_vessel[,main_isscaap_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [, second:=rep(data_vessel[,second_isscaap_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
                [!is.na(ISSCAAP_COD_FAO)]
                  [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                    [,suppressWarnings(max(V1, na.rm=T)),by = NAVS_COD_YEAR]
                      [is.infinite(V1), V1:=NA]
                        [,V1] ]
  #assigns the fishing effort value of the third main fished isscaap code in a year for each vessel





data_vessel[,second_prop_isscaap_effort_year:=value_second_isscaap_effort_year/effort_year]


 #assigns the proportion of the second main fished isscaap code (in fishing effort) in a year for each vessel




data_vessel[,third_prop_isscaap_effort_year:=value_third_isscaap_effort_year/effort_year]


 #assigns the proportion of the third main fished isscaap code (in fishing effort) in a year for each vessel












data_vessel[,value_second_isscaap_weight_year:=NA_real_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_weight_year),value_second_isscaap_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main fished isscaap code (in fishing weight) in a year for each vessel







data_vessel[,value_third_isscaap_weight_year:=NA_real_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_weight_year),value_third_isscaap_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished isscaap code (in fishing weight) in a year for each vessel















data_vessel[,value_second_isscaap_eco_year:=NA_real_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_eco_year),value_second_isscaap_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main fished isscaap code (in economic value) in a year for each vessel







data_vessel[,value_third_isscaap_eco_year:=NA_real_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_eco_year),value_third_isscaap_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_isscaap_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished isscaap code (in economic value) in a year for each vessel















data_vessel[,value_second_isscaap_weight.prod_year:=NA_real_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_weight.prod_year),value_second_isscaap_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_isscaap_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main fished isscaap code (in productivity) in a year for each vessel







data_vessel[,value_third_isscaap_weight.prod_year:=NA_real_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_weight.prod_year),value_third_isscaap_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_isscaap_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of third main fished isscaap code (in productivity) in a year for each vessel















data_vessel[,value_second_isscaap_eco.prod_year:=NA_real_]

data_vessel[nb_isscaap_year>1 & !is.na(main_isscaap_eco.prod_year),value_second_isscaap_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_isscaap_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ISSCAAP_COD_FAO)]
              [main!=ISSCAAP_COD_FAO,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main fished isscaap code (in economic productivity) in a year for each vessel







data_vessel[,value_third_isscaap_eco.prod_year:=NA_real_]

data_vessel[nb_isscaap_year>2 & !is.na(second_isscaap_eco.prod_year),value_third_isscaap_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ISSCAAP_COD_FAO~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_isscaap_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [, second:=rep(data_vessel[,second_isscaap_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
              [!is.na(ISSCAAP_COD_FAO)]
                [ISSCAAP_COD_FAO!=main & ISSCAAP_COD_FAO!=second,]
                  [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of third main fished isscaap code (in economic productivity) in a year for each vessel






```





###Fishing stocks

```{r fishing activity - Fishing stocks}





SACROIS[SACROIS$STOCK_ORGP=="",]$STOCK_ORGP=NA





all(dcast(SACROIS, subset=.(!is.na(ESP2_COD_FAO)), SEQ_ID+ESP2_COD_FAO~., fun.aggregate= function(x) length(unique(na.omit(x)))<=1, value.var="STOCK_ORGP")$.) #only one stock per sequence and targeted species ! 



  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "STOCK_ORGP")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 1.6% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "STOCK_ORGP")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on fishing stocks, many vessels (87% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "STOCK_ORGP")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "STOCK_ORGP")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 27% +/- 15 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(STOCK_ORGP),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(STOCK_ORGP),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred



# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$STOCK_ORGP)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that many metier are significantly associated to the presence or not of missing data on fishing stocks (less declaration in these metier ?) 











data_vessel[,value_nb_stock_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),
          value.var = "STOCK_ORGP")[,.] ]  # compute the yearly number of visited stocks per vessel






data_vessel[,value_nb_stock_mean_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "STOCK_ORGP")   #computation of visited stocks number per marees
          [,mean(., na.rm=T),by = 
              SACROIS [order(MAREE_ID)] [!duplicated(MAREE_ID),NAVS_COD_YEAR]] #mean of visited stocks number per vessels (need to reorder vessels' ID to match order produced by "dcast" function) (TO BE NOTICED: for marees overlapping two years, marees were attributed to the year in which it began, through the use of "!duplicated(MAREE_ID)")
            [order(SACROIS)] #reordering the estimate in function of vessels' ID
              [,V1] ] 
# compute the average number of visited stocks per marees for each vessel 









data_vessel[,value_nb_stock_sd_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "STOCK_ORGP")
          [,pop.sd(na.omit(.)),by = 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR]]
            [order(SACROIS)]
              [,V1] ] 
 # variation in number of visited stocks for each vessels across marees















#It might be interesting to display how intensively the stocks are exploited:





#1) Year scale



data_vessel[,mean_stock_value_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  #removal of occurences for which the species is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) per visited stock 






data_vessel[,mean_stock_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(STOCK_ORGP), .:=NA] 
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic value) per visited stock 






data_vessel[,mean_stock_value_effort_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (fishing effort) per visited stock 






data_vessel[,mean_stock_value_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(STOCK_ORGP), .:=NA] 
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (productivity) per visited stock 





data_vessel[,mean_stock_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(STOCK_ORGP), .:=NA]  
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic productivity) per visited stock 











data_vessel[,sd_stock_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) per visited stock






data_vessel[,sd_stock_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) per visited stock





data_vessel[,sd_stock_effort_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (fishing effort) per visited stock





data_vessel[,sd_weight.prod_stock:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(STOCK_ORGP), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (productivity) per visited stock





data_vessel[,sd_stock_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(STOCK_ORGP), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic productivity) per visited stock









#2) Marees scale



data_vessel[,mean_stock_value_weight_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of species captured during the trip
          [is.na(STOCK_ORGP), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ] # averaging weight at the stock level for each vessel
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean weight computed for each stock for each vessel
                  [,V1] ]
 # mean amount of fish (weight) per stock and per marees (average amount between stocks of the average amount per marees for each stock)








data_vessel[,sd_stock_weight_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
           [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(STOCK_ORGP), .:=NA]
              [ ,mean(., na.rm=T),by=
                  .(NAVS_COD_YEAR, STOCK_ORGP) ]
                [order(NAVS_COD_YEAR)] 
                  [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                    [,V1] ] 
# variation (sd) between stock in the mean amount of fish (weight) per marees 







data_vessel[,mean_stock_value_weight_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the amount of fish (weight) per marees averaged among stock







data_vessel[,sd_stock_weight_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between stock the variation (sd) in the amount of fish (weight) per marees 







data_vessel[,mean_stock_value_effort_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing effort per stock and per marees (average amount between stock of the average amount per marees for each stock)








data_vessel[,sd_stock_effort_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between stock in the mean fishing effort per marees 







data_vessel[,mean_stock_value_effort_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing effort per marees averaged among stock







data_vessel[,sd_stock_effort_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between stock the variation (sd) in the fishing effort per marees 


















data_vessel[,mean_stock_value_weight.prod_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing productivity per stock and per marees (average amount between stock of the average amount per marees for each stock)








data_vessel[,sd_stock_weight.prod_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between stock in the mean fishing productivity per marees 







data_vessel[,mean_stock_value_weight.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing productivity per marees averaged among stock







data_vessel[,sd_stock_weight.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between stock the variation (sd) in the fishing productivity per marees 











data_vessel[,mean_stock_eco_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of stock captured during the trip
          [is.na(STOCK_ORGP), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ] # averaging economic value at the stock level for each vessel
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean economic value computed for each stock for each vessel
                  [,V1] ]
 # mean amount of fish (economic value) per stock and per marees (average amount between stock of the average amount per marees for each stock)








data_vessel[,sd_stock_eco_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
           [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(STOCK_ORGP), .:=NA]
              [ ,mean(., na.rm=T),by=
                  .(NAVS_COD_YEAR, STOCK_ORGP) ]
                [order(NAVS_COD_YEAR)] 
                  [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                    [,V1] ] 
# variation (sd) between stock in the mean amount of fish (economic value) per marees 







data_vessel[,mean_stock_eco_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the amount of fish (economic value) per marees averaged among stock







data_vessel[,sd_stock_eco_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between stock the variation (sd) in the amount of fish (economic value) per marees 





























data_vessel[,mean_stock_eco.prod_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing economic productivity per stock and per marees (average amount between stock of the average amount per marees for each stock)








data_vessel[,sd_stock_eco.prod_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between stock in the mean fishing economic productivity per marees 







data_vessel[,mean_stock_eco.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing economic productivity per marees averaged among stock







data_vessel[,sd_stock_eco.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+STOCK_ORGP~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(STOCK_ORGP), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, STOCK_ORGP) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between stock the variation (sd) in the fishing economic productivity per marees 














#3) Sequence scale





data_vessel[,mean_stock_value_weight_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  #removal of occurences for which the stock is unknown
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (weight) per stock (and per sequence, as there is for each stock one weight for each sequence)






data_vessel[,sd_stock_weight_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (weight) per stock (and per sequence, as there is for each stock one weight for each sequence)





data_vessel[,mean_stock_value_weight_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (weight) per stock and per sequence



data_vessel[,sd_stock_weight_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between stock the variation (sd) in the amount of fish (weight) per sequence















data_vessel[,mean_stock_value_effort_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean fishing effort per stock (and per sequence, as there is for each stock one weight for each sequence)






data_vessel[,sd_stock_effort_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in fishing effort per stock (and per sequence, as there is for each stock one weight for each sequence)





data_vessel[,mean_stock_value_effort_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in fishing effort per stock and per sequence



data_vessel[,sd_stock_effort_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(STOCK_ORGP), .:=NA] 
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between stock the variation (sd) in the fishing effort per sequence

















data_vessel[,mean_stock_value_weight.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_POIDS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (weight/fishing effort) per stock (and per sequence, as there is for each stock one weight for each sequence)






data_vessel[,sd_stock_weight.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_POIDS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (weight/fishing effort) per stock (and per sequence, as there is for each stock one weight for each sequence)





data_vessel[,mean_stock_value_weight.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_POIDS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (weight/fishing effort) per stock and per sequence



data_vessel[,sd_stock_weight.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_POIDS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between stock the variation (sd) in the amount of fish (weight/fishing effort) per sequence












data_vessel[,mean_stock_eco_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  #removal of occurences for which the stock is unknown
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (economic value) per stock (and per sequence, as there is for each stock one economic value for each sequence)






data_vessel[,sd_stock_eco_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (economic value) per stock (and per sequence, as there is for each stock one economic value for each sequence)





data_vessel[,mean_stock_eco_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (economic value) per stock and per sequence



data_vessel[,sd_stock_eco_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(STOCK_ORGP), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between stock the variation (sd) in the amount of fish (economic value) per sequence















data_vessel[,mean_stock_eco.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_ECO")
            [is.na(STOCK_ORGP), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (economic value/fishing effort) per stock (and per sequence, as there is for each stock one economic value for each sequence)






data_vessel[,sd_stock_eco.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_ECO")
            [is.na(STOCK_ORGP), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (economic value/fishing effort) per stock (and per sequence, as there is for each stock one economic value for each sequence)





data_vessel[,mean_stock_eco.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_ECO")
            [is.na(STOCK_ORGP), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (economic value/fishing effort) per stock and per sequence



data_vessel[,sd_stock_eco.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+STOCK_ORGP ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_ECO")
            [is.na(STOCK_ORGP), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between stock the variation (sd) in the amount of fish (economic value/fishing effort) per sequence






```


#####Main stocks

```{r fishing activity - Main target (stocks)}





#1) Main fished stock



#a) Year scale


data_vessel[,main_stock_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_stock_year),main_stock_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = length,
        value.var = "STOCK_ORGP")
          [!is.na(STOCK_ORGP)]
            [,.(.==max(.),STOCK_ORGP),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),STOCK_ORGP] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main fished stock (in sequence number) in a year for each vessel







#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_stock_effort_year:=NA_character_]

data_vessel[!is.na(mean_stock_value_effort_year),main_stock_effort_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,.(.==max(.),STOCK_ORGP),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),STOCK_ORGP] ]
#assigns the main fished stock (in fishing effort) in a year for each vessel





data_vessel[,main_stock_weight_year:=NA_character_]

data_vessel[!is.na(mean_stock_value_weight_year),main_stock_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,.(.==max(.),STOCK_ORGP),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),STOCK_ORGP] ]
#assigns the main fished stock (in fishing weight) in a year for each vessel







data_vessel[,main_stock_weight.prod_year:=NA_character_]

data_vessel[!is.na(mean_stock_value_weight.prod_year),main_stock_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,.(.==max(.),STOCK_ORGP),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),STOCK_ORGP] ]
#assigns the main fished stock (in fishing productivity) in a year for each vessel







data_vessel[,main_stock_eco_year:=NA_character_]

data_vessel[!is.na(mean_stock_eco_year),main_stock_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,.(.==max(.),STOCK_ORGP),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),STOCK_ORGP] ]
 #assigns the main fished stock (in fishing economic value) in a year for each vessel






data_vessel[,main_stock_eco.prod_year:=NA_character_]

data_vessel[!is.na(mean_stock_eco.prod_year),main_stock_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,.(.==max(.),STOCK_ORGP),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),STOCK_ORGP] ]
#assigns the main fished stock (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_stock_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_stock_year),prop_stock_nb_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = length,
        value.var = "STOCK_ORGP")
          [!is.na(STOCK_ORGP)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values










data_vessel[,prop_stock_weight_year:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_year),prop_stock_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main fished stock (in fishing weight) in a year for each vessel









data_vessel[,prop_stock_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight.prod_year),prop_stock_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished stock (in fishing productivity) in a year for each vessel













data_vessel[,prop_stock_eco_year:=NA_real_]

data_vessel[!is.na(mean_stock_eco_year),prop_stock_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished stock (in fishing economic value) in a year for each vessel










data_vessel[,prop_stock_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_stock_eco.prod_year),prop_stock_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main fished stock (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_stock_effort_year:=NA_real_]

data_vessel[!is.na(mean_stock_value_effort_year),value_main_stock_effort_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main fished stock in a year for each vessel





data_vessel[,prop_stock_effort_year:=value_main_stock_effort_year/effort_year]


 #assigns the proportion of the main fished stock (in fishing effort) in a year for each vessel




data_vessel[,value_main_stock_weight_year:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_year),value_main_stock_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main fished stock in a year for each vessel







data_vessel[,value_main_stock_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight.prod_year),value_main_stock_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main fished stock in a year for each vessel











data_vessel[,value_main_stock_eco_year:=NA_real_]

data_vessel[!is.na(mean_stock_eco_year),value_main_stock_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main fished stock in a year for each vessel










data_vessel[,value_main_stock_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_stock_eco.prod_year),value_main_stock_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main fished stock in a year for each vessel


















#As fishing activity often vary among marees, we also explored how it could impact estimation of the main fished taxon




#b) Maree scale


#Potential issue: at the maree scale most of fished stock are fished the same amount of time (in term of sequence number, but also using quantitative metrics), the main stock in term of fishing sequence is thus often a random sampling in the stock fished during the marees... The second methodology presented here (mean across marees) should be more accurate




data_vessel[,main_stock_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_stock_mean_marees),main_stock_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = length,
        value.var = "STOCK_ORGP")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of stock captured during the trip 
            [!is.na(STOCK_ORGP)] #removal of non attributed stock
              [,.(.==max(.),STOCK_ORGP),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present stock) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,STOCK_ORGP) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present stock) between marees 
                              [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ] #selection of the first value if there is equality

 #assigns the main fished stock (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_stock_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_stock_mean_marees),main_mean_stock_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = length,
        value.var = "STOCK_ORGP")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of stock captured during the trip 
              [!is.na(STOCK_ORGP)]
                [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] # average the number of occurrence of stock between marees
                  [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR]             
                    [V1==T] # select the stock with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ]
#assigns the main fished stock (using mean sequence number between marees) among marees for each vessel









data_vessel[,main_stock_effort_marees:=NA_character_]

data_vessel[!is.na(mean_stock_value_effort_mean_marees),main_stock_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,.(.==max(.),STOCK_ORGP),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,STOCK_ORGP) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ] 
 #assigns the main fished stock (using fishing effort within marees) among marees for each vessel




data_vessel[,main_mean_stock_effort_marees:=NA_character_]

data_vessel[!is.na(mean_stock_value_effort_mean_marees),main_mean_stock_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(STOCK_ORGP) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)]
                  [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ]
 #assigns the main fished stock (using mean fishing effort between marees) among marees for each vessel











data_vessel[,main_stock_weight_marees:=NA_character_]

data_vessel[!is.na(mean_stock_value_weight_mean_marees),main_stock_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,.(.==max(.),STOCK_ORGP),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,STOCK_ORGP) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ] 
 #assigns the main fished stock (using fishing weight within marees) among marees for each vessel





data_vessel[,main_mean_stock_weight_marees:=NA_character_]

data_vessel[!is.na(mean_stock_value_weight_mean_marees),main_mean_stock_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(STOCK_ORGP) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)]
                  [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ]
#assigns the main fished stock (using mean fishing weight between marees) among marees for each vessel












data_vessel[,main_stock_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_stock_value_weight.prod_mean_marees),main_stock_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,.(.==max(.),STOCK_ORGP),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,STOCK_ORGP) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ] 
 #assigns the main fished stock (using fishing productivity within marees) among marees for each vessel





data_vessel[,main_mean_stock_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_stock_value_weight.prod_mean_marees),main_mean_stock_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(STOCK_ORGP) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)]
                  [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ]
#assigns the main fished stock (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,main_stock_eco_marees:=NA_character_]

data_vessel[!is.na(mean_stock_eco_mean_marees),main_stock_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,.(.==max(.),STOCK_ORGP),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,STOCK_ORGP) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ] 
 #assigns the main fished stock (using fishing economic value within marees) among marees for each vessel





data_vessel[,main_mean_stock_eco_marees:=NA_character_]

data_vessel[!is.na(mean_stock_eco_mean_marees),main_mean_stock_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(STOCK_ORGP) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)]
                  [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ]
#assigns the main fished stock (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,main_stock_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_stock_eco.prod_mean_marees),main_stock_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,.(.==max(.),STOCK_ORGP),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,STOCK_ORGP) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ] 
 #assigns the main fished stock (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,main_mean_stock_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_stock_eco.prod_mean_marees),main_mean_stock_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(STOCK_ORGP) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)]
                  [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ]
#assigns the main fished stock (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main fished stock change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_stock_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_stock_mean_marees),prop_stock_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = length,
        value.var = "STOCK_ORGP")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(STOCK_ORGP)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main fished stock (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_stock_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_stock_mean_marees),prop_mean_stock_nb_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = length,
        value.var = "STOCK_ORGP")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(STOCK_ORGP)] 
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main fished stock (using mean sequence number between marees) among marees for each vessel










data_vessel[,prop_stock_effort_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_effort_mean_marees),prop_stock_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
         [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(STOCK_ORGP) & !is.na(.)] 
            [!duplicated(MAREE_ID),sum:=dcast(SACROIS[!is.na(TP_NAVIRE_SACROIS) & !is.na(STOCK_ORGP)],
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sum,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
              [,max(.)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished stock (using fishing effort within marees) between marees for each vessel




data_vessel[,prop_mean_stock_effort_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_effort_mean_marees),prop_mean_stock_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(STOCK_ORGP) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished stock (using mean fishing effort between marees) among marees for each vessel

















data_vessel[,prop_stock_weight_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_mean_marees),prop_stock_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(STOCK_ORGP) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished stock (using fishing weight within marees) between marees for each vessel





data_vessel[,prop_mean_stock_weight_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_mean_marees),prop_mean_stock_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(STOCK_ORGP) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished stock (using mean fishing weight between marees) among marees for each vessel














data_vessel[,prop_stock_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight.prod_mean_marees),prop_stock_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(STOCK_ORGP) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished stock (using fishing productivity within marees) between marees for each vessel





data_vessel[,prop_mean_stock_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight.prod_mean_marees),prop_mean_stock_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(STOCK_ORGP) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished stock (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,prop_stock_eco_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco_mean_marees),prop_stock_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(STOCK_ORGP) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished stock (using fishing economic value within marees) between marees for each vessel





data_vessel[,prop_mean_stock_eco_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco_mean_marees),prop_mean_stock_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(STOCK_ORGP) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished stock (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,prop_stock_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco.prod_mean_marees),prop_stock_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(STOCK_ORGP) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main fished stock (using fishing economic productivity within marees) between marees for each vessel





data_vessel[,prop_mean_stock_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco.prod_mean_marees),prop_mean_stock_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(STOCK_ORGP) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main fished stock (using mean fishing economic productivity between marees) among marees for each vessel

















data_vessel[,value_stock_effort_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_effort_mean_marees),value_stock_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_effort_marees),main_stock_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main stock (value repeated for each vessel)
                    [STOCK_ORGP==ESP_MAJ, V1] ] #retaining only main stock value

#assigns the mean fishing effort value for main fished stock (using fishing effort within marees) among marees for each vessel




data_vessel[,value_mean_stock_effort_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_effort_mean_marees),value_mean_stock_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing effort value for main fished stock (using mean fishing effort between marees) among marees for each vessel













data_vessel[,value_stock_weight_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_mean_marees),value_stock_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_weight_marees),main_stock_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [STOCK_ORGP==ESP_MAJ, V1] ] 

#assigns the mean fishing weight value for main fished stock (using fishing weight within marees) among marees for each vessel




data_vessel[,value_mean_stock_weight_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_mean_marees),value_mean_stock_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing weight value for main fished stock (using mean fishing weight between marees) among marees for each vessel












data_vessel[,value_stock_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight.prod_mean_marees),value_stock_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_weight.prod_marees),main_stock_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [STOCK_ORGP==ESP_MAJ, V1] ] 

#assigns the mean fishing productivity value for main fished stock (using fishing productivity within marees) among marees for each vessel




data_vessel[,value_mean_stock_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight.prod_mean_marees),value_mean_stock_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing productivity value for main fished stock (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,value_stock_eco_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco_mean_marees),value_stock_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_eco_marees),main_stock_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [STOCK_ORGP==ESP_MAJ, V1] ]

#assigns the mean fishing economic value for main fished stock (using fishing economic value within marees) among marees for each vessel




data_vessel[,value_mean_stock_eco_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco_mean_marees),value_mean_stock_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic value for main fished stock (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,value_stock_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco.prod_mean_marees),value_stock_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_eco.prod_marees),main_stock_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [STOCK_ORGP==ESP_MAJ, V1] ] 

#assigns the mean fishing economic productivity value for main fished stock (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,value_mean_stock_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco.prod_mean_marees),value_mean_stock_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic productivity value for main fished stock (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,sd_stock_effort_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_effort_mean_marees),sd_stock_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_effort_marees),main_stock_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main stock (value repeated for each vessel)
                    [STOCK_ORGP==ESP_MAJ, V1] ] #retaining only main stock value

#assigns the variation (sd) in fishing effort value for main fished stock (using fishing effort within marees) among marees for each vessel




data_vessel[,sd_mean_stock_effort_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_effort_mean_marees),sd_mean_stock_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main fished stock (using mean fishing effort between marees) among marees for each vessel













data_vessel[,sd_stock_weight_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_mean_marees),sd_stock_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_weight_marees),main_stock_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [STOCK_ORGP==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing weight value for main fished stock (using fishing weight within marees) among marees for each vessel




data_vessel[,sd_mean_stock_weight_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_mean_marees),sd_mean_stock_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main fished stock (using mean fishing weight between marees) among marees for each vessel












data_vessel[,sd_stock_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight.prod_mean_marees),sd_stock_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_weight.prod_marees),main_stock_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [STOCK_ORGP==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing productivity value for main fished stock (using fishing productivity within marees) among marees for each vessel




data_vessel[,sd_mean_stock_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight.prod_mean_marees),sd_mean_stock_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main fished stock (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,sd_stock_eco_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco_mean_marees),sd_stock_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_eco_marees),main_stock_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [STOCK_ORGP==ESP_MAJ, V1] ]

#assigns the variation (sd) in fishing economic value for main fished stock (using fishing economic value within marees) among marees for each vessel




data_vessel[,sd_mean_stock_eco_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco_mean_marees),sd_mean_stock_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main fished stock (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,sd_stock_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco.prod_mean_marees),sd_stock_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [order(NAVS_COD_YEAR)]
                  [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_eco.prod_marees),main_stock_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [STOCK_ORGP==ESP_MAJ, V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main fished stock (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,sd_mean_stock_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_stock_eco.prod_mean_marees),sd_mean_stock_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main fished stock (using mean fishing economic productivity between marees) among marees for each vessel






















#c) Sequence scale








data_vessel[,main_mean_stock_effort_seq:=NA_character_]

data_vessel[!is.na(mean_stock_value_effort_year),main_mean_stock_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,.(.==max(.),STOCK_ORGP),by= NAVS_COD_YEAR]             
              [V1==T]
                [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ]
#assigns the main fished stock using mean fishing effort between sequences for each vessel







data_vessel[,main_stock_weight_seq:=NA_character_]

data_vessel[!is.na(mean_stock_value_weight_year),main_stock_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,.(.==max(.),STOCK_ORGP,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,STOCK_ORGP) ]  
                      [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ]

 #assigns the main fished stock (using fishing weight within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_stock_weight_seq:=NA_character_]

data_vessel[!is.na(mean_stock_value_weight_year),main_mean_stock_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,.(.==max(.),STOCK_ORGP),by= NAVS_COD_YEAR]             
              [V1==T]
                [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ] #assigns the main fished stock using mean fishing weight between fishing sequences for each vessel










#No computation of main fished taxa through major fishing productivity inside a sequence because equivalent to the estimate about weight (or eco), because corrected by a constant fishing effort within a same sequence 


data_vessel[,main_mean_stock_weight.prod_seq:=NA_character_]

data_vessel[!is.na(mean_stock_value_weight.prod_year),main_mean_stock_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_POIDS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,.(.==max(.),STOCK_ORGP),by= NAVS_COD_YEAR]             
              [V1==T]
                [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ]
#assigns the main fished stock using mean fishing productivity between sequences for each vessel













data_vessel[,main_stock_eco_seq:=NA_character_]

data_vessel[!is.na(mean_stock_eco_year),main_stock_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,.(.==max(.),STOCK_ORGP,NAVS_COD_YEAR),by = SEQ_ID]
              [V1==T] 
                [!duplicated(SEQ_ID)] 
                  [,length(SEQ_ID) ,by= .(NAVS_COD_YEAR,STOCK_ORGP) ]  
                      [ ,.(V1==max(V1),STOCK_ORGP),by= NAVS_COD_YEAR] 
                        [V1==T]  
                          [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ]

 #assigns the main fished stock (using fishing economic value within fishing sequences) among fishing sequences for each vessel





data_vessel[,main_mean_stock_eco_seq:=NA_character_]

data_vessel[!is.na(mean_stock_eco_year),main_mean_stock_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,.(.==max(.),STOCK_ORGP),by= NAVS_COD_YEAR]             
              [V1==T]
                [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ] #assigns the main fished stock using mean fishing economic value between fishing sequences for each vessel













data_vessel[,main_mean_stock_eco.prod_seq:=NA_character_]

data_vessel[!is.na(mean_stock_eco.prod_year),main_mean_stock_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_ECO")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,.(.==max(.),STOCK_ORGP),by= NAVS_COD_YEAR]             
              [V1==T]
                [!duplicated(NAVS_COD_YEAR), STOCK_ORGP] ]
#assigns the main fished stock using mean fishing economic productivity between sequences for each vessel







#variability in estimates are again observed but with less variation when comparing to marees scale in most of cases (~4% of differences in 2023)











data_vessel[,prop_mean_stock_effort_seq:=NA_real_]


data_vessel[!is.na(mean_stock_value_effort_year),prop_mean_stock_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,.(max(.)/sum(.)),by= NAVS_COD_YEAR]             
              [, V1] ]

 #assigns the proportion of main fished stock (using mean fishing effort between sequence) among sequence for each vessel








data_vessel[,prop_stock_weight_seq:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_year),prop_stock_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished stock (using fishing weight within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_stock_weight_seq:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_year),prop_mean_stock_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,.(max(.)/sum(.),STOCK_ORGP),by= NAVS_COD_YEAR]             
              [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished stock (using mean fishing weight between sequence) among sequence for each vessel











data_vessel[,prop_mean_stock_weight.prod_seq:=NA_real_]


data_vessel[!is.na(mean_stock_value_weight.prod_year),prop_mean_stock_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_POIDS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,.(max(.)/sum(.)),by= NAVS_COD_YEAR]             
              [, V1] ]

 #assigns the proportion of main fished stock (using mean fishing productivity between sequence) among sequence for each vessel











data_vessel[,prop_stock_eco_seq:=NA_real_]

data_vessel[!is.na(mean_stock_eco_year),prop_stock_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [,.(max(.)/sum(.), NAVS_COD_YEAR),by = SEQ_ID]
              [, mean(V1, na.rm=T), by= NAVS_COD_YEAR ]  
                [,V1] ]
#assigns the proportion of main fished stock (using fishing economic value within fishing sequences) among fishing sequences for each vessel



data_vessel[,prop_mean_stock_eco_seq:=NA_real_]

data_vessel[!is.na(mean_stock_eco_year),prop_mean_stock_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,.(max(.)/sum(.),STOCK_ORGP),by= NAVS_COD_YEAR]             
              [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main fished stock (using mean fishing economic value between sequence) among sequence for each vessel






data_vessel[,prop_mean_stock_eco.prod_seq:=NA_real_]


data_vessel[!is.na(mean_stock_eco.prod_year),prop_mean_stock_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_ECO")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,.(max(.)/sum(.)),by= NAVS_COD_YEAR]             
              [, V1] ]

 #assigns the proportion of main fished stock (using mean fishing economic productivity between sequence) among sequence for each vessel















data_vessel[,value_mean_stock_effort_seq:=NA_real_]

data_vessel[!is.na(mean_stock_value_effort_year),value_mean_stock_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,max(.),by= NAVS_COD_YEAR]             
              [,V1] ]  #assigns the fishing effort value of main fished stock using mean fishing effort between fishing sequences for each vessel













data_vessel[,value_stock_weight_seq:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_year),value_stock_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_weight_seq),main_stock_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [STOCK_ORGP==ESP_MAJ, V1] ] 
 #assigns the fishing weight value of main fished stock (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_stock_weight_seq:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_year),value_mean_stock_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,max(.),by= NAVS_COD_YEAR]             
              [,V1] ]
 #assigns the fishing weight value of main fished stock using mean fishing weight between fishing sequences for each vessel











data_vessel[,value_mean_stock_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight.prod_year),value_mean_stock_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_POIDS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,max(.),by= NAVS_COD_YEAR]             
              [,V1] ]  #assigns the fishing effort value of main fished stock using mean fishing productivity between fishing sequences for each vessel







data_vessel[,value_stock_eco_seq:=NA_real_]

data_vessel[!is.na(mean_stock_eco_year),value_stock_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_eco_seq),main_stock_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [STOCK_ORGP==ESP_MAJ, V1] ] 
 #assigns the fishing economic value of main fished stock (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,value_mean_stock_eco_seq:=NA_real_]

data_vessel[!is.na(mean_stock_eco_year),value_mean_stock_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,max(.),by= NAVS_COD_YEAR]             
              [,V1] ]
 #assigns the fishing economic value of main fished stock using mean fishing economic value between fishing sequences for each vessel











data_vessel[,value_mean_stock_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_stock_eco.prod_year),value_mean_stock_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_ECO")
          [!is.na(STOCK_ORGP) & !is.na(.)]
            [ ,max(.),by= NAVS_COD_YEAR]             
              [,V1] ]  #assigns the fishing effort value of main fished stock using mean fishing economic productivity between fishing sequences for each vessel



















data_vessel[,sd_mean_stock_effort_seq:=NA_real_]

data_vessel[!is.na(mean_stock_value_effort_year),sd_mean_stock_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = list(V1=function(x) mean(x, na.rm=T), V2=function(x) pop.sd(na.omit(x))),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(TP_NAVIRE_SACROIS_V1)]
            [ ,.(max(TP_NAVIRE_SACROIS_V1)==TP_NAVIRE_SACROIS_V1, TP_NAVIRE_SACROIS_V2),by= NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),TP_NAVIRE_SACROIS_V2] ]    #assigns the variation (sd) in fishing effort value of main fished stock using mean fishing effort between fishing sequences for each vessel







data_vessel[,sd_stock_weight_seq:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_year),sd_stock_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_weight_seq),main_stock_weight_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [STOCK_ORGP==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing weight value of main fished stock (using fishing weight within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_stock_weight_seq:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight_year),sd_mean_stock_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = list(V1=function(x) mean(x, na.rm=T), V2=function(x) pop.sd(na.omit(x))),
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(QUANT_POIDS_VIF_SACROIS_V1)]
            [ ,.(max(QUANT_POIDS_VIF_SACROIS_V1)==QUANT_POIDS_VIF_SACROIS_V1, QUANT_POIDS_VIF_SACROIS_V2),by= NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),QUANT_POIDS_VIF_SACROIS_V2] ]    #assigns the variation (sd) in fishing weight value of main fished stock using mean fishing weight between fishing sequences for each vessel










data_vessel[,sd_mean_stock_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_stock_value_weight.prod_year),sd_mean_stock_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = list(V1=function(x) mean(x, na.rm=T), V2=function(x) pop.sd(na.omit(x))),
        value.var = "PROD_POIDS")
          [!is.na(STOCK_ORGP) & !is.na(PROD_POIDS_V1)]
            [ ,.(max(PROD_POIDS_V1)==PROD_POIDS_V1, PROD_POIDS_V2),by= NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),PROD_POIDS_V2] ]    #assigns the variation (sd) in fishing productivity value of main fished stock using mean fishing productivity between fishing sequences for each vessel














data_vessel[,sd_stock_eco_seq:=NA_real_]

data_vessel[!is.na(mean_stock_eco_year),sd_stock_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+STOCK_ORGP~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [!is.na(STOCK_ORGP) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,STOCK_ORGP)] 
                [,ESP_MAJ:=rep(data_vessel[!is.na(main_stock_eco_seq),main_stock_eco_seq], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                  [STOCK_ORGP==ESP_MAJ, V1] ] 
 #assigns the variation (sd) in fishing economic value of main fished stock (using fishing economic value within fishing sequences) among fishing sequences for each vessel




data_vessel[,sd_mean_stock_eco_seq:=NA_real_]

data_vessel[!is.na(mean_stock_eco_year),sd_mean_stock_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = list(V1=function(x) mean(x, na.rm=T), V2=function(x) pop.sd(na.omit(x))),
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(STOCK_ORGP) & !is.na(MONTANT_EUROS_SACROIS_V1)]
            [ ,.(max(MONTANT_EUROS_SACROIS_V1)==MONTANT_EUROS_SACROIS_V1, MONTANT_EUROS_SACROIS_V2),by= NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MONTANT_EUROS_SACROIS_V2] ]    #assigns the variation (sd) in fishing economic value of main fished stock using mean fishing economic value between fishing sequences for each vessel












data_vessel[,sd_mean_stock_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_stock_eco.prod_year),sd_mean_stock_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+STOCK_ORGP~., 
        fun.aggregate = list(V1=function(x) mean(x, na.rm=T), V2=function(x) pop.sd(na.omit(x))),
        value.var = "PROD_ECO")
          [!is.na(STOCK_ORGP) & !is.na(PROD_ECO_V1)]
            [ ,.(max(PROD_ECO_V1)==PROD_ECO_V1, PROD_ECO_V2),by= NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),PROD_ECO_V2] ]    #assigns the variation (sd) in fishing economic productivity value of main fished stock using mean fishing economic productivity between fishing sequences for each vessel




```





###Fishing engine

####Used engine

```{r Fishing engines - used engine}


#basic unit: fishing sequence



SACROIS[SACROIS$ENGIN_COD=="",]$ENGIN_COD=NA




anyNA(SACROIS$ENGIN_COD) #no missing value for the used engine



table(
    dcast(SACROIS,
            NAVS_COD_YEAR+SEQ_ID ~ ., 
            fun.aggregate = function(x) length(unique(x))==1,
            value.var = "ENGIN_COD")[,.])
 #test whether the flag could change during the year (we expect not, i.e. all test=TRUE)






data_vessel[,value_nb_engine_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),
          value.var = "ENGIN_COD")[,.] ]  # compute the yearly number of used engines per vessel






data_vessel[,value_nb_engine_mean_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ENGIN_COD")   #computation of used engines number per marees
          [,mean(., na.rm=T),by = 
              SACROIS [order(MAREE_ID)] [!duplicated(MAREE_ID),NAVS_COD_YEAR]] #mean of used engines number per vessels (need to reorder vessels' ID to match order produced by "dcast" function) (TO BE NOTICED: for marees overlapping two years, marees were attributed to the year in which it began, through the use of "!duplicated(MAREE_ID)")
            [order(SACROIS)] #reordering the estimate in function of vessels' ID
              [,V1] ] 
# compute the average number of used engines per marees for each vessel 









data_vessel[,nb_engine_sd_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ENGIN_COD")
          [,pop.sd(na.omit(.)),by = 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR]]
            [order(SACROIS)]
              [,V1] ] 
 # variation in number of used engines for each vessels across marees















#It might be interesting to display how intensively the engines are exploited:





#1) Year scale



data_vessel[,mean_engine_value_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  #removal of occurences for which the species is unknown
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (weight) per used engine 






data_vessel[,mean_engine_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ENGIN_COD), .:=NA] 
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (econmoic value) per used engine 






data_vessel[,mean_engine_value_effort_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (fishing effort) per used engine 






data_vessel[,mean_engine_value_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(ENGIN_COD), .:=NA] 
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (productivity) per used engine 





data_vessel[,mean_engine_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(ENGIN_COD), .:=NA]  
              [,mean(., na.rm=T),by =
                  .(NAVS_COD_YEAR)]
                [,V1]]  # mean amount of fish (economic productivity) per used engine 











data_vessel[,sd_engine_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = sumna,
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ENGIN_COD), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (weight) per used engine






data_vessel[,sd_engine_eco_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = sumna,
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ENGIN_COD), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic value) per used engine





data_vessel[,sd_engine_weight_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = sumna,
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ENGIN_COD), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (fishing effort) per used engine





data_vessel[,sd_engine_weight.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_POIDS")
            [is.na(ENGIN_COD), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (productivity) per used engine





data_vessel[,sd_engine_eco.prod_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = sumna,
          value.var = "PROD_ECO")
            [is.na(ENGIN_COD), .:=NA]
              [,pop.sd(na.omit(.)),by =
                  .(NAVS_COD_YEAR)]
                [,V1]] # variation (sd) in amount of fish (economic productivity) per used engine









#2) Marees scale



data_vessel[,mean_engine_value_weight_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of species captured during the trip
          [is.na(ENGIN_COD), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ] # averaging weight at the engine level for each vessel
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean weight computed for each engine for each vessel
                  [,V1] ]
 # mean amount of fish (weight) per engine and per marees (average amount between engines of the average amount per marees for each engine)








data_vessel[,sd_engine_weight_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
           [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ENGIN_COD), .:=NA]
              [ ,mean(., na.rm=T),by=
                  .(NAVS_COD_YEAR, ENGIN_COD) ]
                [order(NAVS_COD_YEAR)] 
                  [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                    [,V1] ] 
# variation (sd) between engine in the mean amount of fish (weight) per marees 







data_vessel[,mean_engine_value_weight_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the amount of fish (weight) per marees averaged among engine







data_vessel[,sd_engine_weight_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "QUANT_POIDS_VIF_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between engine the variation (sd) in the amount of fish (weight) per marees 







data_vessel[,mean_engine_value_effort_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing effort per engine and per marees (average amount between engine of the average amount per marees for each engine)








data_vessel[,sd_engine_effort_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between engine in the mean fishing effort per marees 







data_vessel[,mean_engine_value_effort_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing effort per marees averaged among engine







data_vessel[,sd_engine_effort_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "TP_NAVIRE_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between engine the variation (sd) in the fishing effort per marees 


















data_vessel[,mean_engine_value_weight.prod_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing productivity per engine and per marees (average amount between engine of the average amount per marees for each engine)








data_vessel[,sd_engine_weight.prod_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between engine in the mean fishing productivity per marees 







data_vessel[,mean_engine_value_weight.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing productivity per marees averaged among engine







data_vessel[,sd_engine_weight.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between engine the variation (sd) in the fishing productivity per marees 











data_vessel[,mean_engine_eco_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of engine captured during the trip
          [is.na(ENGIN_COD), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ] # averaging economic value at the engine level for each vessel
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] # averaging the mean economic value computed for each engine for each vessel
                  [,V1] ]
 # mean amount of fish (economic value) per engine and per marees (average amount between engine of the average amount per marees for each engine)








data_vessel[,sd_engine_eco_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
           [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ENGIN_COD), .:=NA]
              [ ,mean(., na.rm=T),by=
                  .(NAVS_COD_YEAR, ENGIN_COD) ]
                [order(NAVS_COD_YEAR)] 
                  [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                    [,V1] ] 
# variation (sd) between engine in the mean amount of fish (economic value) per marees 







data_vessel[,mean_engine_eco_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the amount of fish (economic value) per marees averaged among engine







data_vessel[,sd_engine_eco_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "MONTANT_EUROS_SACROIS") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between engine the variation (sd) in the amount of fish (economic value) per marees 





























data_vessel[,mean_engine_eco.prod_mean_marees:=
  dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ] 
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [,V1] ]
 # mean fishing economic productivity per engine and per marees (average amount between engine of the average amount per marees for each engine)








data_vessel[,sd_engine_eco.prod_mean_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO") 
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,mean(., na.rm=T),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
# variation (sd) between engine in the mean fishing economic productivity per marees 







data_vessel[,mean_engine_eco.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # Variation (sd) in the fishing economic productivity per marees averaged among engine







data_vessel[,sd_engine_eco.prod_sd_marees:=
   dcast(SACROIS,
      MAREE_ID+ENGIN_COD~., 
      fun.aggregate = sumna,
      value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID), NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ENGIN_COD), .:=NA]
            [ ,pop.sd(na.omit(.)),by=
                .(NAVS_COD_YEAR, ENGIN_COD) ]
              [order(NAVS_COD_YEAR)] 
                [ ,pop.sd(na.omit(V1)),by= NAVS_COD_YEAR]  
                  [,V1] ] 
     # How vary (sd) between engine the variation (sd) in the fishing economic productivity per marees 














#3) Sequence scale





data_vessel[,mean_engine_value_weight_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  #removal of occurences for which the engine is unknown
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (weight) per engine (and per sequence, as there is for each engine one weight for each sequence)






data_vessel[,sd_engine_weight_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (weight) per engine (and per sequence, as there is for each engine one weight for each sequence)





data_vessel[,mean_engine_value_weight_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (weight) per engine and per sequence



data_vessel[,sd_engine_weight_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "QUANT_POIDS_VIF_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between engine the variation (sd) in the amount of fish (weight) per sequence















data_vessel[,mean_engine_value_effort_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean fishing effort per engine (and per sequence, as there is for each engine one weight for each sequence)






data_vessel[,sd_engine_effort_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in fishing effort per engine (and per sequence, as there is for each engine one weight for each sequence)





data_vessel[,mean_engine_value_effort_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in fishing effort per engine and per sequence



data_vessel[,sd_engine_effort_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "TP_NAVIRE_SACROIS")
            [is.na(ENGIN_COD), .:=NA] 
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between engine the variation (sd) in the fishing effort per sequence

















data_vessel[,mean_engine_value_weight.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_POIDS")
            [is.na(ENGIN_COD), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (weight/fishing effort) per engine (and per sequence, as there is for each engine one weight for each sequence)






data_vessel[,sd_engine_weight.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_POIDS")
            [is.na(ENGIN_COD), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (weight/fishing effort) per engine (and per sequence, as there is for each engine one weight for each sequence)





data_vessel[,mean_engine_value_weight.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_POIDS")
            [is.na(ENGIN_COD), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (weight/fishing effort) per engine and per sequence



data_vessel[,sd_engine_weight.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_POIDS")
            [is.na(ENGIN_COD), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between engine the variation (sd) in the amount of fish (weight/fishing effort) per sequence












data_vessel[,mean_engine_eco_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  #removal of occurences for which the engine is unknown
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (economic value) per engine (and per sequence, as there is for each engine one economic value for each sequence)






data_vessel[,sd_engine_eco_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (economic value) per engine (and per sequence, as there is for each engine one economic value for each sequence)





data_vessel[,mean_engine_eco_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (economic value) per engine and per sequence



data_vessel[,sd_engine_eco_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "MONTANT_EUROS_SACROIS")
            [is.na(ENGIN_COD), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between engine the variation (sd) in the amount of fish (economic value) per sequence















data_vessel[,mean_engine_eco.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_ECO")
            [is.na(ENGIN_COD), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean amount of fish (economic value/fishing effort) per engine (and per sequence, as there is for each engine one economic value for each sequence)






data_vessel[,sd_engine_eco.prod_mean_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) mean(x, na.rm=T),
          value.var = "PROD_ECO")
            [is.na(ENGIN_COD), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ]
 # variation (sd) in amount of fish (economic value/fishing effort) per engine (and per sequence, as there is for each engine one economic value for each sequence)





data_vessel[,mean_engine_eco.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_ECO")
            [is.na(ENGIN_COD), .:=NA]  
              [,mean(., na.rm=T),by = NAVS_COD_YEAR]
                [,V1] ]
   # mean variation in amount of fish (economic value/fishing effort) per engine and per sequence



data_vessel[,sd_engine_eco.prod_sd_seq:=
    dcast(SACROIS,
          NAVS_COD_YEAR+ENGIN_COD ~ ., 
          fun.aggregate = function(x) pop.sd(na.omit(x)),
          value.var = "PROD_ECO")
            [is.na(ENGIN_COD), .:=NA]  
              [,pop.sd(na.omit(.)),by = NAVS_COD_YEAR]
                [,V1] ] 
   # How vary (sd) between engine the variation (sd) in the amount of fish (economic value/fishing effort) per sequence











```


#####Main engine



```{r fishing engine - Main engine}





#1) Main used engine



#a) Year scale


data_vessel[,main_engine_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_engine_year),main_engine_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], #to not count several time the same fishing sequence (where engine use is constant) 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = length,
        value.var = "ENGIN_COD")
          [!is.na(ENGIN_COD)]
            [,.(.==max(.),ENGIN_COD),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main used engine (in sequence number) in a year for each vessel







#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_engine_effort_year:=NA_character_]

data_vessel[!is.na(mean_engine_value_effort_year),main_engine_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,.(.==max(.),ENGIN_COD),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ]
#assigns the main used engine (in fishing effort) in a year for each vessel





data_vessel[,main_engine_weight_year:=NA_character_]

data_vessel[!is.na(mean_engine_value_weight_year),main_engine_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,.(.==max(.),ENGIN_COD),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ]
#assigns the main used engine (in fishing weight) in a year for each vessel







data_vessel[,main_engine_weight.prod_year:=NA_character_]

data_vessel[!is.na(mean_engine_value_weight.prod_year),main_engine_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,.(.==max(.),ENGIN_COD),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ]
#assigns the main used engine (in fishing productivity) in a year for each vessel







data_vessel[,main_engine_eco_year:=NA_character_]

data_vessel[!is.na(mean_engine_eco_year),main_engine_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,.(.==max(.),ENGIN_COD),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ]
 #assigns the main used engine (in fishing economic value) in a year for each vessel






data_vessel[,main_engine_eco.prod_year:=NA_character_]

data_vessel[!is.na(mean_engine_eco.prod_year),main_engine_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,.(.==max(.),ENGIN_COD),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ]
#assigns the main used engine (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_engine_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_engine_year),prop_engine_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = length,
        value.var = "ENGIN_COD")
          [!is.na(ENGIN_COD)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values










data_vessel[,prop_engine_weight_year:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight_year),prop_engine_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main used engine (in fishing weight) in a year for each vessel









data_vessel[,prop_engine_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight.prod_year),prop_engine_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used engine (in fishing productivity) in a year for each vessel













data_vessel[,prop_engine_eco_year:=NA_real_]

data_vessel[!is.na(mean_engine_eco_year),prop_engine_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used engine (in fishing economic value) in a year for each vessel










data_vessel[,prop_engine_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_engine_eco.prod_year),prop_engine_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used engine (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_engine_effort_year:=NA_real_]

data_vessel[!is.na(mean_engine_value_effort_year),value_main_engine_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main used engine in a year for each vessel





data_vessel[,prop_engine_effort_year:=value_main_engine_effort_year/effort_year]


 #assigns the proportion of the main used engine (in fishing effort) in a year for each vessel




data_vessel[,value_main_engine_weight_year:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight_year),value_main_engine_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main used engine in a year for each vessel







data_vessel[,value_main_engine_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight.prod_year),value_main_engine_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main used engine in a year for each vessel











data_vessel[,value_main_engine_eco_year:=NA_real_]

data_vessel[!is.na(mean_engine_eco_year),value_main_engine_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main used engine in a year for each vessel










data_vessel[,value_main_engine_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_engine_eco.prod_year),value_main_engine_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main used engine in a year for each vessel


















#As fishing activity often vary among marees, we also explored how it could impact estimation of the main used engine




#b) Maree scale


#Potential issue: at the maree scale most of used engine are fished the same amount of time (in term of sequence number, but also using quantitative metrics), the main engine in term of fishing sequence is thus often a random sampling in the engine fished during the marees... The second methodology presented here (mean across marees) should be more accurate




data_vessel[,main_engine_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_engine_mean_marees),main_engine_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = length,
        value.var = "ENGIN_COD")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of engine captured during the trip 
            [!is.na(ENGIN_COD)] #removal of non attributed engine
              [,.(.==max(.),ENGIN_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present engine) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ENGIN_COD) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present engine) between marees 
                              [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ] #selection of the first value if there is equality

 #assigns the main used engine (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_engine_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_engine_mean_marees),main_mean_engine_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = length,
        value.var = "ENGIN_COD")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of engine captured during the trip 
              [!is.na(ENGIN_COD)]
                [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] # average the number of occurrence of engine between marees
                  [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR]             
                    [V1==T] # select the engine with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ]
#assigns the main used engine (using mean sequence number between marees) among marees for each vessel









data_vessel[,main_engine_effort_marees:=NA_character_]

data_vessel[!is.na(mean_engine_value_effort_mean_marees),main_engine_effort_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,.(.==max(.),ENGIN_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ENGIN_COD) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ] 
 #assigns the main used engine (using fishing effort within marees) among marees for each vessel




data_vessel[,main_mean_engine_effort_marees:=NA_character_]

data_vessel[!is.na(mean_engine_value_effort_mean_marees),main_mean_engine_effort_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ENGIN_COD) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)]
                  [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ]
 #assigns the main used engine (using mean fishing effort between marees) among marees for each vessel











data_vessel[,main_engine_weight_marees:=NA_character_]

data_vessel[!is.na(mean_engine_value_weight_mean_marees),main_engine_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,.(.==max(.),ENGIN_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ENGIN_COD) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ] 
 #assigns the main used engine (using fishing weight within marees) among marees for each vessel





data_vessel[,main_mean_engine_weight_marees:=NA_character_]

data_vessel[!is.na(mean_engine_value_weight_mean_marees),main_mean_engine_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ENGIN_COD) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)]
                  [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ]
#assigns the main used engine (using mean fishing weight between marees) among marees for each vessel












data_vessel[,main_engine_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_engine_value_weight.prod_mean_marees),main_engine_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,.(.==max(.),ENGIN_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ENGIN_COD) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ] 
 #assigns the main used engine (using fishing productivity within marees) among marees for each vessel





data_vessel[,main_mean_engine_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_engine_value_weight.prod_mean_marees),main_mean_engine_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ENGIN_COD) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)]
                  [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ]
#assigns the main used engine (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,main_engine_eco_marees:=NA_character_]

data_vessel[!is.na(mean_engine_eco_mean_marees),main_engine_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,.(.==max(.),ENGIN_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ENGIN_COD) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ] 
 #assigns the main used engine (using fishing economic value within marees) among marees for each vessel





data_vessel[,main_mean_engine_eco_marees:=NA_character_]

data_vessel[!is.na(mean_engine_eco_mean_marees),main_mean_engine_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ENGIN_COD) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)]
                  [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ]
#assigns the main used engine (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,main_engine_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_engine_eco.prod_mean_marees),main_engine_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,.(.==max(.),ENGIN_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ENGIN_COD) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ] 
 #assigns the main used engine (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,main_mean_engine_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_engine_eco.prod_mean_marees),main_mean_engine_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(ENGIN_COD) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)]
                  [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ]
#assigns the main used engine (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main used engine change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_engine_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_engine_mean_marees),prop_engine_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = length,
        value.var = "ENGIN_COD")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ENGIN_COD)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main used engine (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_engine_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_engine_mean_marees),prop_mean_engine_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = length,
        value.var = "ENGIN_COD")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ENGIN_COD)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main used engine (using mean sequence number between marees) among marees for each vessel










data_vessel[,prop_engine_effort_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_effort_mean_marees),prop_engine_effort_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
         [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ENGIN_COD) & !is.na(.)] 
            [!duplicated(MAREE_ID),sum:=dcast(SACROIS[!is.na(TP_NAVIRE_SACROIS) & !is.na(ENGIN_COD)],
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sum,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
              [,max(.)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main used engine (using fishing effort within marees) between marees for each vessel




data_vessel[,prop_mean_engine_effort_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_effort_mean_marees),prop_mean_engine_effort_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ENGIN_COD) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used engine (using mean fishing effort between marees) among marees for each vessel

















data_vessel[,prop_engine_weight_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight_mean_marees),prop_engine_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ENGIN_COD) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main used engine (using fishing weight within marees) between marees for each vessel





data_vessel[,prop_mean_engine_weight_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight_mean_marees),prop_mean_engine_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ENGIN_COD) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used engine (using mean fishing weight between marees) among marees for each vessel














data_vessel[,prop_engine_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight.prod_mean_marees),prop_engine_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ENGIN_COD) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main used engine (using fishing productivity within marees) between marees for each vessel





data_vessel[,prop_mean_engine_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight.prod_mean_marees),prop_mean_engine_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ENGIN_COD) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used engine (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,prop_engine_eco_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco_mean_marees),prop_engine_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ENGIN_COD) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main used engine (using fishing economic value within marees) between marees for each vessel





data_vessel[,prop_mean_engine_eco_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco_mean_marees),prop_mean_engine_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ENGIN_COD) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used engine (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,prop_engine_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco.prod_mean_marees),prop_engine_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ENGIN_COD) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main used engine (using fishing economic productivity within marees) between marees for each vessel





data_vessel[,prop_mean_engine_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco.prod_mean_marees),prop_mean_engine_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ENGIN_COD) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used engine (using mean fishing economic productivity between marees) among marees for each vessel

















data_vessel[,value_engine_effort_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_effort_mean_marees),value_engine_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_engine_effort_marees),main_engine_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main engine (value repeated for each vessel)
                    [ENGIN_COD==MAJ, V1] ] #retaining only main engine value

#assigns the mean fishing effort value for main used engine (using fishing effort within marees) among marees for each vessel




data_vessel[,value_mean_engine_effort_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_effort_mean_marees),value_mean_engine_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing effort value for main used engine (using mean fishing effort between marees) among marees for each vessel













data_vessel[,value_engine_weight_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight_mean_marees),value_engine_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_engine_weight_marees),main_engine_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ENGIN_COD==MAJ, V1] ] 

#assigns the mean fishing weight value for main used engine (using fishing weight within marees) among marees for each vessel




data_vessel[,value_mean_engine_weight_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight_mean_marees),value_mean_engine_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing weight value for main used engine (using mean fishing weight between marees) among marees for each vessel












data_vessel[,value_engine_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight.prod_mean_marees),value_engine_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_engine_weight.prod_marees),main_engine_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ENGIN_COD==MAJ, V1] ] 

#assigns the mean fishing productivity value for main used engine (using fishing productivity within marees) among marees for each vessel




data_vessel[,value_mean_engine_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight.prod_mean_marees),value_mean_engine_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing productivity value for main used engine (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,value_engine_eco_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco_mean_marees),value_engine_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_engine_eco_marees),main_engine_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ENGIN_COD==MAJ, V1] ]

#assigns the mean fishing economic value for main used engine (using fishing economic value within marees) among marees for each vessel




data_vessel[,value_mean_engine_eco_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco_mean_marees),value_mean_engine_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic value for main used engine (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,value_engine_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco.prod_mean_marees),value_engine_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_engine_eco.prod_marees),main_engine_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ENGIN_COD==MAJ, V1] ] 

#assigns the mean fishing economic productivity value for main used engine (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,value_mean_engine_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco.prod_mean_marees),value_mean_engine_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic productivity value for main used engine (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,sd_engine_effort_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_effort_mean_marees),sd_engine_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_engine_effort_marees),main_engine_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main engine (value repeated for each vessel)
                    [ENGIN_COD==MAJ, V1] ] #retaining only main engine value

#assigns the variation (sd) in fishing effort value for main used engine (using fishing effort within marees) among marees for each vessel




data_vessel[,sd_mean_engine_effort_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_effort_mean_marees),sd_mean_engine_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main used engine (using mean fishing effort between marees) among marees for each vessel













data_vessel[,sd_engine_weight_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight_mean_marees),sd_engine_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_engine_weight_marees),main_engine_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ENGIN_COD==MAJ, V1] ] 

#assigns the variation (sd) in fishing weight value for main used engine (using fishing weight within marees) among marees for each vessel




data_vessel[,sd_mean_engine_weight_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight_mean_marees),sd_mean_engine_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main used engine (using mean fishing weight between marees) among marees for each vessel












data_vessel[,sd_engine_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight.prod_mean_marees),sd_engine_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_engine_weight.prod_marees),main_engine_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ENGIN_COD==MAJ, V1] ] 

#assigns the variation (sd) in fishing productivity value for main used engine (using fishing productivity within marees) among marees for each vessel




data_vessel[,sd_mean_engine_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight.prod_mean_marees),sd_mean_engine_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main used engine (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,sd_engine_eco_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco_mean_marees),sd_engine_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_engine_eco_marees),main_engine_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ENGIN_COD==MAJ, V1] ]

#assigns the variation (sd) in fishing economic value for main used engine (using fishing economic value within marees) among marees for each vessel




data_vessel[,sd_mean_engine_eco_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco_mean_marees),sd_mean_engine_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main used engine (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,sd_engine_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco.prod_mean_marees),sd_engine_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_engine_eco.prod_marees),main_engine_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [ENGIN_COD==MAJ, V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main used engine (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,sd_mean_engine_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_engine_eco.prod_mean_marees),sd_mean_engine_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(ENGIN_COD) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,ENGIN_COD)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main used engine (using mean fishing economic productivity between marees) among marees for each vessel






















#c) Sequence scale








data_vessel[,main_mean_engine_effort_seq:=NA_character_]

data_vessel[!is.na(mean_engine_value_effort_year),main_mean_engine_effort_seq:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [ ,.(.==max(.),ENGIN_COD),by= NAVS_COD_YEAR]             
              [V1==T]
                [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ]
#assigns the main used engine using mean fishing effort between sequences for each vessel










data_vessel[,main_mean_engine_weight_seq:=NA_character_]

data_vessel[!is.na(mean_engine_value_weight_year),main_mean_engine_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ] #assigns the main used engine using mean fishing weight between fishing sequences for each vessel










data_vessel[,main_mean_engine_weight.prod_seq:=NA_character_]

data_vessel[!is.na(mean_engine_value_weight.prod_year),main_mean_engine_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ] 
#assigns the main used engine using mean fishing productivity between sequences for each vessel













data_vessel[,main_mean_engine_eco_seq:=NA_character_]

data_vessel[!is.na(mean_engine_eco_year),main_mean_engine_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ]  #assigns the main used engine using mean fishing economic value between fishing sequences for each vessel













data_vessel[,main_mean_engine_eco.prod_seq:=NA_character_]

data_vessel[!is.na(mean_engine_eco.prod_year),main_mean_engine_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,.(V1==max(V1),ENGIN_COD),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), ENGIN_COD] ] 
#assigns the main used engine using mean fishing economic productivity between sequences for each vessel







#variability in estimates are again observed but with less variation when comparing to marees scale in most of cases (~4% of differences in 2023)











data_vessel[,prop_mean_engine_effort_seq:=NA_real_]


data_vessel[!is.na(mean_engine_value_effort_year),prop_mean_engine_effort_seq:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [ ,.(max(.)/sum(.)),by= NAVS_COD_YEAR]             
              [, V1] ]

 #assigns the proportion of main used engine (using mean fishing effort between sequence) among sequence for each vessel






data_vessel[,prop_mean_engine_weight_seq:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight_year),prop_mean_engine_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,max(V1)/sum(V1),by= NAVS_COD_YEAR]             
                [,V1] ] 
 #assigns the proportion of main used engine (using mean fishing weight between sequence) among sequence for each vessel











data_vessel[,prop_mean_engine_weight.prod_seq:=NA_real_]


data_vessel[!is.na(mean_engine_value_weight.prod_year),prop_mean_engine_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "PROD_POIDS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [ ,.(max(.)/sum(.)),by= NAVS_COD_YEAR]             
              [, V1] ]

 #assigns the proportion of main used engine (using mean fishing productivity between sequence) among sequence for each vessel







data_vessel[,prop_mean_engine_eco_seq:=NA_real_]

data_vessel[!is.na(mean_engine_eco_year),prop_mean_engine_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,max(V1)/sum(V1),by= NAVS_COD_YEAR]             
                [,V1] ] 
 #assigns the proportion of main used engine (using mean fishing economic value between sequence) among sequence for each vessel






data_vessel[,prop_mean_engine_eco.prod_seq:=NA_real_]


data_vessel[!is.na(mean_engine_eco.prod_year),prop_mean_engine_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,max(V1)/sum(V1),by= NAVS_COD_YEAR]             
                [,V1] ] 

 #assigns the proportion of main used engine (using mean fishing economic productivity between sequence) among sequence for each vessel















data_vessel[,value_mean_engine_effort_seq:=NA_real_]

data_vessel[!is.na(mean_engine_value_effort_year),value_mean_engine_effort_seq:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = function(x) mean(x, na.rm=T),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(.)]
            [ ,max(.),by= NAVS_COD_YEAR]             
              [,V1] ]  #assigns the fishing effort value of main used engine using mean fishing effort between fishing sequences for each vessel











data_vessel[,value_mean_engine_weight_seq:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight_year),value_mean_engine_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ] 
 #assigns the fishing weight value of main used engine using mean fishing weight between fishing sequences for each vessel











data_vessel[,value_mean_engine_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight.prod_year),value_mean_engine_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main used engine using mean fishing productivity between fishing sequences for each vessel






data_vessel[,value_mean_engine_eco_seq:=NA_real_]

data_vessel[!is.na(mean_engine_eco_year),value_mean_engine_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ] 
 #assigns the fishing economic value of main used engine using mean fishing economic value between fishing sequences for each vessel











data_vessel[,value_mean_engine_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_engine_eco.prod_year),value_mean_engine_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main used engine using mean fishing economic productivity between fishing sequences for each vessel



















data_vessel[,sd_mean_engine_effort_seq:=NA_real_]

data_vessel[!is.na(mean_engine_value_effort_year),sd_mean_engine_effort_seq:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = list(V1=function(x) mean(x, na.rm=T), V2=function(x) pop.sd(na.omit(x))),
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(ENGIN_COD) & !is.na(TP_NAVIRE_SACROIS_V1)]
            [ ,.(max(TP_NAVIRE_SACROIS_V1)==TP_NAVIRE_SACROIS_V1, TP_NAVIRE_SACROIS_V2),by= NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),TP_NAVIRE_SACROIS_V2] ]    #assigns the variation (sd) in fishing effort value of main used engine using mean fishing effort between fishing sequences for each vessel








data_vessel[,sd_mean_engine_weight_seq:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight_year),sd_mean_engine_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, .(mean(., na.rm=T), pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,.(V1==max(V1), V2),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), V2] ]     #assigns the variation (sd) in fishing weight value of main used engine using mean fishing weight between fishing sequences for each vessel










data_vessel[,sd_mean_engine_weight.prod_seq:=NA_real_]

data_vessel[!is.na(mean_engine_value_weight.prod_year),sd_mean_engine_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, .(mean(., na.rm=T), pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,.(V1==max(V1), V2),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), V2] ]   #assigns the variation (sd) in fishing productivity value of main used engine using mean fishing productivity between fishing sequences for each vessel













data_vessel[,sd_mean_engine_eco_seq:=NA_real_]

data_vessel[!is.na(mean_engine_eco_year),sd_mean_engine_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, .(mean(., na.rm=T), pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,.(V1==max(V1), V2),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), V2] ]    #assigns the variation (sd) in fishing economic value of main used engine using mean fishing economic value between fishing sequences for each vessel












data_vessel[,sd_mean_engine_eco.prod_seq:=NA_real_]

data_vessel[!is.na(mean_engine_eco.prod_year),sd_mean_engine_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, .(mean(., na.rm=T), pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,ENGIN_COD)]
            [!is.na(ENGIN_COD) & !is.na(V1)]
              [ ,.(V1==max(V1), V2),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), V2] ]    #assigns the variation (sd) in fishing economic productivity value of main used engine using mean fishing economic productivity between fishing sequences for each vessel



















#Correspondence with survey data:


table(data_vessel$ENG1==data_vessel$main_engine) # 33% similar

table(data_vessel$ENG2==data_vessel$main_engine) # 13% similar


#surprisingly there is huge differences (in 2023) between the engine declared on survey and the main engine deduced from SACROIS data !!!!!!
#Where does come from such differences ???




```





######Frequent engine associations


```{r fishing engine - Frequently associated engines}






#2) Specific major engines













basket=tapply(SACROIS$ENGIN_COD, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$ENGIN_COD, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of engine (all engine captured at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


used_engines=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all engine implied in a relevant association


used_engines= str_extract(used_engines, pattern="(?<=\\{)(.*)(?=\\})" )



#there is no significant association of engines ! Potential problem, in the current form it is quite difficult to precisely apprehend the strategy of polyvalent vessels in term of engines used...



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()




```




#####Secondary used engines

There is a non-negligible number of vessels with at least two used engines (~56%) within a year, but scarcer vessels with three or more used engines (~27%). Multiple target is relevant at year scale for potentially describing polyvalent fleet in several subfleet ! Secondary use of engine is not relevant at trip scale where multiple target are more scarce (>75% of vessels with less than two taxa fished at the trip level).
For vessels using only one engine, the secondary engine is referred to as NA.






```{r secondary used engines}



data_vessel[,second_engine_nb_year:=NA_character_]

data_vessel[nb_engine_year>1,second_engine_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = length,
        value.var = "ENGIN_COD")
          [, main:=rep(data_vessel[,main_engine_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [,.(.==max(.),ENGIN_COD),by = NAVS_COD_YEAR]
                  [V1==T] #selection of maximal values
                    [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ] #selection of the first maximal values (by alphabetical order)
 #assigns the second main used engine (in sequence number) in a year for each vessel










#warning: important amount of vessels with missing data for the subsequent metrics




#for the following variables we have to consider the case where the fishing effort is not available for any engine used by the focal vessel OR for secondary/third main engine ! The latter case is not taken into account by any of the previously computed variables, we have to produce NA directly in the code for this particular case using the following line: suppressWarnings((max(c(NA), na.rm=T))) => when vector only containing NA max(vector) will return Inf with a warning, suppressWarnings is then used to supress this associated warning. When Inf is produced it will always be compared to NA, for which we will have previously associated NA taxa, these NA will be selected to return NA values for second or third main taxa in these cases.



data_vessel[,second_engine_effort_year:=NA_character_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_effort_year),second_engine_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [, main:=rep(data_vessel[,main_engine_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [is.na(.), ENGIN_COD:=NA] # when fishing effort is not available, we associate NA taxa to it
                  [,.(.==suppressWarnings(max(., na.rm=T)),ENGIN_COD),by = NAVS_COD_YEAR]
                    [V1==T | is.na(V1)] #selection of maximal values and NA values
                      [order(NAVS_COD_YEAR,ENGIN_COD, na.last=T)] #put NA values after non-NA, to give priority to it
                        [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ] #selection of the first maximal values (by alphabetical order) or of NA values if no maximal values observed
 #assigns the second main used engine (in terms of fishing effort) in a year for each vessel













data_vessel[,second_engine_weight_year:=NA_character_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_weight_year),second_engine_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_engine_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                 [is.na(.), ENGIN_COD:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ENGIN_COD),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ENGIN_COD, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ]
 #assigns the second main used engine (in terms of fishing weight) in a year for each vessel















data_vessel[,second_engine_weight.prod_year:=NA_character_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_weight.prod_year),second_engine_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_engine_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                 [is.na(.), ENGIN_COD:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ENGIN_COD),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ENGIN_COD, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ]
 #assigns the second main used engine (in terms of fishing productivity) in a year for each vessel












data_vessel[,second_engine_eco_year:=NA_character_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_eco_year),second_engine_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_engine_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                 [is.na(.), ENGIN_COD:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ENGIN_COD),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ENGIN_COD, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ]
 #assigns the second main used engine (in terms of fishing economic value) in a year for each vessel















data_vessel[,second_engine_eco.prod_year:=NA_character_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_eco.prod_year),second_engine_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_engine_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                 [is.na(.), ENGIN_COD:=NA] 
                    [,.(.==suppressWarnings(max(., na.rm=T)),ENGIN_COD),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR,ENGIN_COD, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),ENGIN_COD] ]
 #assigns the second main used engine (in terms of fishing economic productivity) in a year for each vessel
















data_vessel[,second_prop_engine_nb_year:=NA_real_]

data_vessel[nb_engine_year>1,second_prop_engine_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = length,
        value.var = "ENGIN_COD")
          [, main:=rep(data_vessel[,main_engine_nb_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ]
 #assigns the proportion of second main used engine (in sequence number) in a year for each vessel












data_vessel[,second_prop_engine_weight_year:=NA_real_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_weight_year),second_prop_engine_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_engine_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main used engine (in fishing weight) in a year for each vessel



















data_vessel[,second_prop_engine_eco_year:=NA_real_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_eco_year),second_prop_engine_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_engine_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main used engine (in economic value) in a year for each vessel















data_vessel[,second_prop_engine_weight.prod_year:=NA_real_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_weight.prod_year),second_prop_engine_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_engine_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main used engine (in productivity) in a year for each vessel



















data_vessel[,second_prop_engine_eco.prod_year:=NA_real_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_eco.prod_year),second_prop_engine_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_engine_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [,suppressWarnings(max(., na.rm=T))/sumna(.),by = NAVS_COD_YEAR]
                  [,V1] ] 
 #assigns the proportion of second main used engine (in economic productivity) in a year for each vessel





























data_vessel[,value_second_engine_effort_year:=NA_real_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_effort_year),value_second_engine_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [, main:=rep(data_vessel[,main_engine_effort_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                  [is.infinite(V1), V1:=NA] #attribution of NA values in place of Infinite values (corresponding with cases with only NAs)
                    [,V1] ]
  #assigns the fishing effort value of the second main used engine in a year for each vessel






data_vessel[,second_prop_engine_effort_year:=value_second_engine_effort_year/effort_year]


 #assigns the proportion of the second main used engine (in fishing effort) in a year for each vessel












data_vessel[,value_second_engine_weight_year:=NA_real_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_weight_year),value_second_engine_weight_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, main:=rep(data_vessel[,main_engine_weight_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main used engine (in fishing weight) in a year for each vessel


















data_vessel[,value_second_engine_eco_year:=NA_real_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_eco_year),value_second_engine_eco_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, main:=rep(data_vessel[,main_engine_eco_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main used engine (in economic value) in a year for each vessel















data_vessel[,value_second_engine_weight.prod_year:=NA_real_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_weight.prod_year),value_second_engine_weight.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, main:=rep(data_vessel[,main_engine_weight.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ]
 #assigns the proportion of second main used engine (in productivity) in a year for each vessel

















data_vessel[,value_second_engine_eco.prod_year:=NA_real_]

data_vessel[nb_engine_year>1 & !is.na(main_engine_eco.prod_year),value_second_engine_eco.prod_year:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ENGIN_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, main:=rep(data_vessel[,main_engine_eco.prod_year], tapply(.SD$NAVS_COD_YEAR,.SD$NAVS_COD_YEAR, length))]
            [!is.na(ENGIN_COD)]
              [main!=ENGIN_COD,]
                [,suppressWarnings(max(., na.rm=T)),by = NAVS_COD_YEAR]
                    [is.infinite(V1), V1:=NA]
                      [,V1] ] 
 #assigns the proportion of second main used engine (in economic productivity) in a year for each vessel









```






#####Engine size

######Mesh size

```{r Fishing engines - engine size (mesh)}


#mesh size: in mm, some values are clear outliers, or represent length ?

#we did not discard 0 value because it may represent very small mesh size (<1mm), but we discarded aberrant values >1000mm, that should not exist. It should be kept in mind that this variable is declarative and therefore rather uncertain...




  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "MAILLAGE")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 24% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "MAILLAGE")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on used mesh size, many vessels (39% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "MAILLAGE")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "MAILLAGE")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 32% +/- 31 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(MAILLAGE),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(MAILLAGE),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred



# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$MAILLAGE)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier (in 2023: palangres, dragues... => consistent as inapplicable) are significantly associated to the presence or not of missing data on mesh size 







    
data_vessel[,mean_mesh_size_year:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
      NAVS_COD_YEAR ~ ., 
      fun.aggregate = function(x) mean(x, na.rm=T),
      value.var = "MAILLAGE")[,.] ]  #compute the mean mesh size throughout the year



data_vessel[,sd_mesh_size_year:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
      NAVS_COD_YEAR ~ ., 
      fun.aggregate = function(x) pop.sd(na.omit(x)),
      value.var = "MAILLAGE")[,.] ]  #compute the variation (sd) in mesh size throughout the year








# the mean and sd weighted by fishing activity (weight, eco, effort, productivity => summed within the sequence except for effort !) were also computed:



    
data_vessel[,mean_mesh_size_value_weight_year:=
    SACROIS[order(SEQ_ID), #necessary to order by SEQ_ID to avoid mismatch
            {sum= tapply(QUANT_POIDS_VIF_SACROIS, SEQ_ID, sumna);
             weighted.mean(
               MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], #we have to remove cases with NAs in weight vector as it is not handle by the function
               na.rm=T) }, 
            keyby = #reordering by vessels ID
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the mean mesh size weighted by fishing weight throughout the year




data_vessel[,sd_mesh_size_weight_year:=
    SACROIS[order(SEQ_ID), #necessary to order by SEQ_ID to avoid mismatch
            {sum= tapply(QUANT_POIDS_VIF_SACROIS, SEQ_ID, sumna);
             wm= weighted.mean(
                  MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], #we have to remove cases with NAs in weight vector as it is not handle by the function
                  na.rm=T);
             weighted.mean( (MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, #To be noticed: biased estimates of the variance
                keyby = #reordering by vessels ID
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in mesh size weighted by fishing weight throughout the year







    
data_vessel[,mean_mesh_size_eco_year:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(MONTANT_EUROS_SACROIS, SEQ_ID, sumna);
             weighted.mean(
               MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the mean mesh size weighted by fishing economic value throughout the year




data_vessel[,sd_mesh_size_eco_year:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(MONTANT_EUROS_SACROIS, SEQ_ID, sumna);
             wm= weighted.mean(
                  MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
#compute the vaiation in mesh size weighted by fishing economic value throughout the year









    
data_vessel[,mean_mesh_size_value_effort_year:=
    SACROIS[!duplicated(SEQ_ID),
            weighted.mean(
               MAILLAGE[!is.na(TP_NAVIRE_SACROIS)],
               TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)], 
               na.rm=T), 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the mean mesh size weighted by fishing effort throughout the year




data_vessel[,sd_mesh_size_effort_year:=
    SACROIS[!duplicated(SEQ_ID), 
            {wm= weighted.mean(
                  MAILLAGE[!is.na(TP_NAVIRE_SACROIS)],
                  TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)], 
                  na.rm=T);
             weighted.mean( (MAILLAGE[!is.na(TP_NAVIRE_SACROIS)]-wm)^2, TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
#compute the variation in mesh size weighted by fishing effort throughout the year










    
data_vessel[,mean_mesh_size_value_weight.prod_year:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_POIDS, SEQ_ID, sumna);
             weighted.mean(
               MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the mean mesh size weighted by fishing productivity throughout the year




data_vessel[,sd_mesh_size_weight.prod_year:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_POIDS, SEQ_ID, sumna);
             wm= weighted.mean(
                  MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
#compute the variation in mesh size weighted by fishing productivity throughout the year










    
data_vessel[,mean_mesh_size_eco.prod_year:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_ECO, SEQ_ID, sumna);
             weighted.mean(
               MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the mean mesh size weighted by fishing economic productivity throughout the year




data_vessel[,sd_mesh_size_eco.prod_year:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_ECO, SEQ_ID, sumna);
             wm= weighted.mean(
                  MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (MAILLAGE[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
#compute the variation in mesh size weighted by fishing economic productivity throughout the year







#the weighted and non-weighted mean are extremely close (R²>0.99 in 2023), except when looking at productivity weighted mean (R²~0.94 in 2023)
#the weighted and non-weighted sd diverged more (R²~0.65-0.8 in 2023), except when considering effort or productivity metrics





# the mesh size variable could also be considered as a categorical variable (low variation in its value, but also possible uncertainty in declaration, with possibly consistent behavior across fleet):


SACROIS[,MAILLAGE:=as.character(MAILLAGE)]





data_vessel[,value_nb_mesh_size_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),
          value.var = "MAILLAGE")[,.] ]   #assigns how many mesh size are used


















data_vessel[,main_mesh_size_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_mesh_size_year),main_mesh_size_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = length,
        value.var = "MAILLAGE")
          [!is.na(MAILLAGE)]
            [,.(.==max(.),MAILLAGE),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),MAILLAGE] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main used mesh size (in sequence number) in a year for each vessel







#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_mesh_size_effort_year:=NA_character_]

data_vessel[!is.na(mean_mesh_size_value_effort_year),main_mesh_size_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,.(.==max(.),MAILLAGE),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MAILLAGE] ]
#assigns the main used mesh size (in fishing effort) in a year for each vessel





data_vessel[,main_mesh_size_weight_year:=NA_character_]

data_vessel[!is.na(mean_mesh_size_value_weight_year),main_mesh_size_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,.(.==max(.),MAILLAGE),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MAILLAGE] ]
#assigns the main used mesh size (in fishing weight) in a year for each vessel







data_vessel[,main_mesh_size_weight.prod_year:=NA_character_]

data_vessel[!is.na(mean_mesh_size_value_weight.prod_year),main_mesh_size_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,.(.==max(.),MAILLAGE),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MAILLAGE] ]
#assigns the main used mesh size (in fishing productivity) in a year for each vessel







data_vessel[,main_mesh_size_eco_year:=NA_character_]

data_vessel[!is.na(mean_mesh_size_eco_year),main_mesh_size_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,.(.==max(.),MAILLAGE),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MAILLAGE] ]
 #assigns the main used mesh size (in fishing economic value) in a year for each vessel






data_vessel[,main_mesh_size_eco.prod_year:=NA_character_]

data_vessel[!is.na(mean_mesh_size_eco.prod_year),main_mesh_size_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,.(.==max(.),MAILLAGE),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MAILLAGE] ]
#assigns the main used mesh size (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_mesh_size_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_mesh_size_year),prop_mesh_size_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = length,
        value.var = "MAILLAGE")
          [!is.na(MAILLAGE)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values










data_vessel[,prop_mesh_size_weight_year:=NA_real_]

data_vessel[!is.na(mean_mesh_size_value_weight_year),prop_mesh_size_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main used mesh size (in fishing weight) in a year for each vessel









data_vessel[,prop_mesh_size_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_mesh_size_value_weight.prod_year),prop_mesh_size_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used mesh size (in fishing productivity) in a year for each vessel













data_vessel[,prop_mesh_size_eco_year:=NA_real_]

data_vessel[!is.na(mean_mesh_size_eco_year),prop_mesh_size_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used mesh size (in fishing economic value) in a year for each vessel










data_vessel[,prop_mesh_size_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_mesh_size_eco.prod_year),prop_mesh_size_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used mesh size (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_mesh_size_effort_year:=NA_real_]

data_vessel[!is.na(mean_mesh_size_value_effort_year),value_main_mesh_size_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main used mesh size in a year for each vessel





data_vessel[,prop_mesh_size_effort_year:=value_main_mesh_size_effort_year/effort_year]


 #assigns the proportion of the main used mesh size (in fishing effort) in a year for each vessel




data_vessel[,value_main_mesh_size_weight_year:=NA_real_]

data_vessel[!is.na(mean_mesh_size_value_weight_year),value_main_mesh_size_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main used mesh size in a year for each vessel







data_vessel[,value_main_mesh_size_weight.prod_year:=NA_real_]

data_vessel[!is.na(mean_mesh_size_value_weight.prod_year),value_main_mesh_size_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main used mesh size in a year for each vessel











data_vessel[,value_main_mesh_size_eco_year:=NA_real_]

data_vessel[!is.na(mean_mesh_size_eco_year),value_main_mesh_size_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main used mesh size in a year for each vessel










data_vessel[,value_main_mesh_size_eco.prod_year:=NA_real_]

data_vessel[!is.na(mean_mesh_size_eco.prod_year),value_main_mesh_size_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MAILLAGE~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(MAILLAGE) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main used mesh size in a year for each vessel
















#2) Specific major mesh size




# 
# 
# 
# 
# comb=combn(names(table(SACROIS$MAILLAGE)), 2, simplify=F)
# 
# pres=sapply(comb, function(x) {
#   y=x
#   return(sum(as.vector(tapply(SACROIS$MAILLAGE, SACROIS$NAVS_COD, function(x) all(y %in% x) ))))})
# 
# 
# comb[pres>32] #most frequent associations between fishing mesh size (chosen threshold: >5% of vessels displaying such association), precise information on these zones (in terms of fishing activity) could be interesting to better understand mixed fishing strategies 
# 
# #here there is no association of interest in 2023
# 
# 
# 
# 





```

######Dimensions

```{r Fishing engines - engine size (dimension)}

#to be noticed: engine dimensions have been well filled in in 2023 but it is probably not the case before. Dimensions are probably in meter, with the length and (when applicable) the height. Data will be processed as categories as it could be difficult to compare different fishing engine (e.g. fish line/net) 



SACROIS[DIMENSION=="",DIMENSION:=NA]









  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "DIMENSION")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 1.6% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "DIMENSION")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on used engine dimensions, many vessels (87% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "DIMENSION")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "DIMENSION")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 27% +/- 15 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(DIMENSION),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(DIMENSION),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred




# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$DIMENSION)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier (palangres, ligne traine, palangre... => consistent as inapplicable, or only for engine length) are significantly associated to the presence or not of missing data on engine dimensions 









data_vessel[,value_nb_engine_dim:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),
          value.var = "DIMENSION")[,.] ]   #assigns how many fishing engine dimensions are used

















#Warning: classification into dimensions results in a high number of categories, such data will probably be too demanding to process






 #another proxy for engines' dimensions will be tested here (length/surface):   INEXPLOITABLE FOR THE MOMENT (except for the most recent years) because of different notation systems, and in particular notation without separation totally unusable and confusing
# 
# 
# 
# 
# 
# 
# SACROIS$engine_surf=NA
# 
# sep=str_split_fixed(SACROIS[str_detect(SACROIS$DIMENSION, ";") & !is.na(SACROIS$DIMENSION) & !duplicated(SACROIS$SEQ_ID),]$DIMENSION, ";", 2) # split the two engine dimensions (length and height), for engine with two dimensions filled in
# 
# sep[sep[,2]=="0.0",2]="1" # for engine associated with a null length, we set the height to 1 for the surface computation (so as to compute the length of such engine, probably fishing line)
# 
# surf=as.numeric(sep[,1])*as.numeric(sep[,2]) #compute engine surface
# 
# 
# long=as.numeric(SACROIS[!str_detect(SACROIS$DIMENSION, ";") & !is.na(SACROIS$DIMENSION) & !duplicated(SACROIS$SEQ_ID),]$DIMENSION) # extract the length for unidimensional engine
# 
# 
# SACROIS[str_detect(SACROIS$DIMENSION, ";") & !is.na(SACROIS$DIMENSION) & !duplicated(SACROIS$SEQ_ID),]$engine_surf=surf
# 
# SACROIS[!str_detect(SACROIS$DIMENSION, ";") & !is.na(SACROIS$DIMENSION) & !duplicated(SACROIS$SEQ_ID),]$engine_surf=long
# # attribute the surface or length according to the engine nature
# 
# 
# data_vessel$engine_surf=
#   as.numeric(
#     tapply(SACROIS[!duplicated(SACROIS$SEQ_ID),]$engine_surf, SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) mean(x, na.rm=T) ) ) #assigns the mean engine surface/length throughout the year
# 
# 
# 
# data_vessel$sd_engine_surf=
#   as.numeric(
#     tapply(SACROIS[!duplicated(SACROIS$SEQ_ID),]$engine_surf, SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) sd(x, na.rm=T) ) )#compute the engine surface/length standard deviation throughout the year
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# # the mean and sd weighted by fishing activity (weight, eco, effort, productivity) were also computed:
# 
# 
# 
# 
# data_vessel$mean_value_weight_surf=
#   as.numeric(
#     by(SACROIS[!duplicated(SACROIS$SEQ_ID),c("engine_surf","QUANT_POIDS_VIF_SACROIS")], SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) weighted.mean(x$engine_surf, x$QUANT_POIDS_VIF_SACROIS, na.rm=T) ) ) #compute the mean engine surface weighted by fishing weight throughout the year
# 
# 
# 
# data_vessel$sd_weight_surf=
#   as.numeric(
#     by(SACROIS[!duplicated(SACROIS$SEQ_ID),c("engine_surf","QUANT_POIDS_VIF_SACROIS")], SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) sqrt(
#          sumna(x$QUANT_POIDS_VIF_SACROIS * (x$engine_surf - weighted.mean(x$engine_surf, x$QUANT_POIDS_VIF_SACROIS, na.rm=T))^2)*(sumna(x$QUANT_POIDS_VIF_SACROIS)/(sumna(x$QUANT_POIDS_VIF_SACROIS)^2-sumna(x$QUANT_POIDS_VIF_SACROIS^2)))
#        ))) #correction "*sum(Weight)/(sum(weight)²-sum(weight²))" to obtain unbiased estimate (as in R function sd) when having reliability weight
# #compute the mean engine surface weighted by fishing weight throughout the year
# 
# 
# 
# 
# 
# 
# data_vessel$mean_value_eco_surf=
#   as.numeric(
#     by(SACROIS[!duplicated(SACROIS$SEQ_ID),c("engine_surf","MONTANT_EUROS_SACROIS")], SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) weighted.mean(x$engine_surf, x$MONTANT_EUROS_SACROIS, na.rm=T) ) ) #compute the mean engine surface weighted by fishing economic value throughout the year
# 
# 
# 
# data_vessel$sd_eco_surf=
#   as.numeric(
#     by(SACROIS[!duplicated(SACROIS$SEQ_ID),c("engine_surf","MONTANT_EUROS_SACROIS")], SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) sqrt(
#          sumna(x$MONTANT_EUROS_SACROIS * (x$engine_surf - weighted.mean(x$engine_surf, x$MONTANT_EUROS_SACROIS, na.rm=T))^2)*(sumna(x$MONTANT_EUROS_SACROIS)/(sumna(x$MONTANT_EUROS_SACROIS)^2-sumna(x$MONTANT_EUROS_SACROIS^2)))
#        ))) #compute the mean engine surface weighted by fishing economic value throughout the year
# 
# 
# 
# 
# 
# 
# data_vessel$mean_value_effort_surf=
#   as.numeric(
#     by(SACROIS[!duplicated(SACROIS$SEQ_ID),c("engine_surf","TP_NAVIRE_SACROIS")], SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) weighted.mean(x$engine_surf, x$TP_NAVIRE_SACROIS, na.rm=T) ) ) #compute the mean engine surface weighted by fishing effort throughout the year
# 
# 
# 
# data_vessel$sd_effort_surf=
#   as.numeric(
#     by(SACROIS[!duplicated(SACROIS$SEQ_ID),c("engine_surf","TP_NAVIRE_SACROIS")], SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) sqrt(
#          sumna(x$TP_NAVIRE_SACROIS * (x$engine_surf - weighted.mean(x$engine_surf, x$TP_NAVIRE_SACROIS, na.rm=T))^2)*(sumna(x$TP_NAVIRE_SACROIS)/(sumna(x$TP_NAVIRE_SACROIS)^2-sumna(x$TP_NAVIRE_SACROIS^2)))
#        ))) #compute the mean engine surface weighted by fishing effort throughout the year
# 
# 
# 
# 
# 
# 
# 
# 
# data_vessel$mean_value_weight.prod_surf=
#   as.numeric(
#     by(SACROIS[!duplicated(SACROIS$SEQ_ID),c("engine_surf","QUANT_POIDS_VIF_SACROIS","TP_NAVIRE_SACROIS")], SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) weighted.mean(x$engine_surf, x$QUANT_POIDS_VIF_SACROIS/x$TP_NAVIRE_SACROIS, na.rm=T) ) ) #compute the mean engine surface weighted by fishing productivity throughout the year
# 
# 
# 
# data_vessel$sd_weight.prod_surf=
#   as.numeric(
#     by(SACROIS[!duplicated(SACROIS$SEQ_ID),c("engine_surf","QUANT_POIDS_VIF_SACROIS","TP_NAVIRE_SACROIS")], SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) sqrt(
#          sumna(x$QUANT_POIDS_VIF_SACROIS/x$TP_NAVIRE_SACROIS * (x$engine_surf - weighted.mean(x$engine_surf, x$QUANT_POIDS_VIF_SACROIS/x$TP_NAVIRE_SACROIS, na.rm=T))^2)*(sumna(x$QUANT_POIDS_VIF_SACROIS/x$TP_NAVIRE_SACROIS)/(sumna(x$QUANT_POIDS_VIF_SACROIS/x$TP_NAVIRE_SACROIS)^2-sumna(x$QUANT_POIDS_VIF_SACROIS/x$TP_NAVIRE_SACROIS^2)))
#        ))) #compute the mean engine surface weighted by fishing productivity throughout the year
# 
# 
# 
# 
# 
# 
# 
# 
# data_vessel$mean_value_eco.prod_surf=
#   as.numeric(
#     by(SACROIS[!duplicated(SACROIS$SEQ_ID),c("engine_surf","MONTANT_EUROS_SACROIS","TP_NAVIRE_SACROIS")], SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) weighted.mean(x$engine_surf, x$MONTANT_EUROS_SACROIS/x$TP_NAVIRE_SACROIS, na.rm=T) ) ) #compute the mean engine surface weighted by fishing economic productivity throughout the year
# 
# 
# 
# data_vessel$sd_eco.prod_surf=
#   as.numeric(by(SACROIS[!duplicated(SACROIS$SEQ_ID),c("engine_surf","MONTANT_EUROS_SACROIS","TP_NAVIRE_SACROIS")], SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD,
#        function(x) sqrt(
#          sumna(x$MONTANT_EUROS_SACROIS/x$TP_NAVIRE_SACROIS * (x$engine_surf - weighted.mean(x$engine_surf, x$MONTANT_EUROS_SACROIS/x$TP_NAVIRE_SACROIS, na.rm=T))^2)*(sumna(x$MONTANT_EUROS_SACROIS/x$TP_NAVIRE_SACROIS)/(sumna(x$MONTANT_EUROS_SACROIS/x$TP_NAVIRE_SACROIS)^2-sumna(x$MONTANT_EUROS_SACROIS/x$TP_NAVIRE_SACROIS^2)))
#        ))) #compute the mean engine surface weighted by fishing economic productivity throughout the year
# 
# 
# 
# 
# 
# 
# 
# 
# 
# #the weighted and non-weighted mean are extremely close (R²>0.99 in 2023)
# #the weighted and non-weighted sd are extremely close (R²>0.98 in 2023), except when considering weight or economic metrics
# 
# 
# 




```










### Spatial information


#### Fishing flag

```{r spatial variables - fishing flag}



anyNA(SACROIS[,PAVILLON]) #no missing value for fishing flag information



table(
    dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(unique(x))==1,
            value.var = "PAVILLON")[,.])
 #test whether the flag could change during the year (we expect not, i.e. all test=TRUE)


#to be noticed: vessels id are automatically sorted by ascending order when using "table" and "tapply" functions


data_vessel$PAVILLON=
    dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) x[1],
            value.var = "PAVILLON")[,.] # assigns to each vessel its flag (first occurrence as flag did not vary inside the year)

```

#### Fishing ports


#####Departure

```{r spatial variables - ports (departure)}



#1) Departure places (basic unit: marées)


anyNA(SACROIS[,LIEU_COD_DEP_SACROIS]) #no missing value about departure location


table(
    dcast(SACROIS,
            MAREE_ID ~ ., 
            fun.aggregate = function(x) length(unique(x))==1,
            value.var = "PAVILLON")[,.]) #test whether the departure could change during a marée (we expect not, i.e. all test=TRUE)








data_vessel[,value_nb_dep_port_year:=
    dcast(SACROIS[!duplicated(MAREE_ID),],
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),
          value.var = "LIEU_COD_DEP_SACROIS")[,.] ]  #assigns how many ports of departure are used








#a) Year scale







data_vessel[,main_dep_port_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_dep_port_year),main_dep_port_nb_year:=
  dcast(SACROIS[!duplicated(MAREE_ID)], #to not count several time the same trip (where port of departure is constant) 
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = length,
        value.var = "LIEU_COD_DEP_SACROIS")
          [!is.na(LIEU_COD_DEP_SACROIS)]
            [,.(.==max(.),LIEU_COD_DEP_SACROIS),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_DEP_SACROIS] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main used port of departure (in marees number) in a year for each vessel



# dcast(SACROIS, NAVS_COD+LIEU_COD_DEP_SACROIS~., fun.aggregate = sumna, value.var = "QUANT_POIDS_VIF_SACROIS")[,.(Main=.SD[.==max(., na.rm=T),LIEU_COD_DEP_SACROIS]), by=NAVS_COD] #recursive way of doing it: elegant but NOT EFFICIENT ! (still perform better than tapply method)



#Important note: in some cases different ports of departure or return were used in the same proportion, in this case we retained for the moment each time the first one (alphabetically) considering that in such cases the equivalently used port were most of the time located nearly (e.g. Saint jean de Luz / Bayonne)






#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_dep_port_effort_year:=NA_character_]

data_vessel[!is.na(value_effort_year),main_dep_port_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,.(.==max(.),LIEU_COD_DEP_SACROIS),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_DEP_SACROIS] ]
#assigns the main used port of departure (in fishing effort) in a year for each vessel





data_vessel[,main_dep_port_weight_year:=NA_character_]

data_vessel[!is.na(value_weight_year),main_dep_port_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,.(.==max(.),LIEU_COD_DEP_SACROIS),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_DEP_SACROIS] ]
#assigns the main used port of departure (in fishing weight) in a year for each vessel







data_vessel[,main_dep_port_weight.prod_year:=NA_character_]

data_vessel[!is.na(value_weight.prod_year),main_dep_port_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,.(.==max(.),LIEU_COD_DEP_SACROIS),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_DEP_SACROIS] ]
#assigns the main used port of departure (in fishing productivity) in a year for each vessel







data_vessel[,main_dep_port_eco_year:=NA_character_]

data_vessel[!is.na(value_eco_year),main_dep_port_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,.(.==max(.),LIEU_COD_DEP_SACROIS),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_DEP_SACROIS] ]
 #assigns the main used port of departure (in fishing economic value) in a year for each vessel






data_vessel[,main_dep_port_eco.prod_year:=NA_character_]

data_vessel[!is.na(value_eco.prod_year),main_dep_port_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,.(.==max(.),LIEU_COD_DEP_SACROIS),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_DEP_SACROIS] ]
#assigns the main used port of departure (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_dep_port_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_dep_port_year),prop_dep_port_nb_year:=
  dcast(SACROIS[!duplicated(MAREE_ID)], 
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = length,
        value.var = "LIEU_COD_DEP_SACROIS")
          [!is.na(LIEU_COD_DEP_SACROIS)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values
#assigns the proportion of the main used port of departure (in maree number) in a year for each vessel










data_vessel[,prop_dep_port_weight_year:=NA_real_]

data_vessel[!is.na(value_weight_year),prop_dep_port_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main used port of departure (in fishing weight) in a year for each vessel









data_vessel[,prop_dep_port_weight.prod_year:=NA_real_]

data_vessel[!is.na(value_weight.prod_year),prop_dep_port_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used port of departure (in fishing productivity) in a year for each vessel













data_vessel[,prop_dep_port_eco_year:=NA_real_]

data_vessel[!is.na(value_eco_year),prop_dep_port_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used port of departure (in fishing economic value) in a year for each vessel










data_vessel[,prop_dep_port_eco.prod_year:=NA_real_]

data_vessel[!is.na(value_eco.prod_year),prop_dep_port_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used port of departure (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_dep_port_effort_year:=NA_real_]

data_vessel[!is.na(value_effort_year),value_main_dep_port_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main used port of departure in a year for each vessel





data_vessel[,prop_dep_port_effort_year:=value_main_dep_port_effort_year/effort_year]


 #assigns the proportion of the main used port of departure (in fishing effort) in a year for each vessel




data_vessel[,value_main_dep_port_weight_year:=NA_real_]

data_vessel[!is.na(value_weight_year),value_main_dep_port_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main used port of departure in a year for each vessel







data_vessel[,value_main_dep_port_weight.prod_year:=NA_real_]

data_vessel[!is.na(value_weight.prod_year),value_main_dep_port_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main used port of departure in a year for each vessel











data_vessel[,value_main_dep_port_eco_year:=NA_real_]

data_vessel[!is.na(value_eco_year),value_main_dep_port_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main used port of departure in a year for each vessel










data_vessel[,value_main_dep_port_eco.prod_year:=NA_real_]

data_vessel[!is.na(value_eco.prod_year),value_main_dep_port_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main used port of departure in a year for each vessel









table(data_vessel$main_weight_dep_port==data_vessel$main_nb_dep_port) #few vessels (in 2023: 6%) differ in their main port depending on the method used  



table(data_vessel$main_eco_dep_port==data_vessel$main_weight_dep_port)
table(data_vessel$main_eco_dep_port==data_vessel$main_nb_dep_port)
#few vessels (in 2023: 3/5%) differ in their main port depending on the method used  










#b) Maree scale










data_vessel[,main_mean_dep_port_effort_marees:=NA_character_]

data_vessel[!is.na(mean_value_effort_marees),main_mean_dep_port_effort_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)]
                  [ ,.(V1==max(V1),LIEU_COD_DEP_SACROIS),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), LIEU_COD_DEP_SACROIS] ]
 #assigns the main used port of departure (using mean fishing effort between marees) among marees for each vessel













data_vessel[,main_mean_dep_port_weight_marees:=NA_character_]

data_vessel[!is.na(mean_value_weight_marees),main_mean_dep_port_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)]
                  [ ,.(V1==max(V1),LIEU_COD_DEP_SACROIS),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), LIEU_COD_DEP_SACROIS] ]
#assigns the main used port of departure (using mean fishing weight between marees) among marees for each vessel















data_vessel[,main_mean_dep_port_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_value_weight.prod_marees),main_mean_dep_port_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)]
                  [ ,.(V1==max(V1),LIEU_COD_DEP_SACROIS),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), LIEU_COD_DEP_SACROIS] ]
#assigns the main used port of departure (using mean fishing productivity between marees) among marees for each vessel

















data_vessel[,main_mean_dep_port_eco_marees:=NA_character_]

data_vessel[!is.na(mean_value_eco_marees),main_mean_dep_port_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)]
                  [ ,.(V1==max(V1),LIEU_COD_DEP_SACROIS),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), LIEU_COD_DEP_SACROIS] ]
#assigns the main used port of departure (using mean fishing economic value between marees) among marees for each vessel













data_vessel[,main_mean_dep_port_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_value_eco.prod_marees),main_mean_dep_port_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)]
                  [ ,.(V1==max(V1),LIEU_COD_DEP_SACROIS),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), LIEU_COD_DEP_SACROIS] ]
#assigns the main used port of departure (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main used port of departure change a lot when comparing estimates at marees and year scale (in 2023)

















data_vessel[,prop_mean_dep_port_effort_marees:=NA_real_]

data_vessel[!is.na(mean_value_effort_marees),prop_mean_dep_port_effort_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used port of departure (using mean fishing effort between marees) among marees for each vessel




















data_vessel[,prop_mean_dep_port_weight_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight_marees),prop_mean_dep_port_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used port of departure (using mean fishing weight between marees) among marees for each vessel


















data_vessel[,prop_mean_dep_port_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight.prod_marees),prop_mean_dep_port_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used port of departure (using mean fishing productivity between marees) among marees for each vessel




















data_vessel[,prop_mean_dep_port_eco_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco_marees),prop_mean_dep_port_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used port of departure (using mean fishing economic value between marees) among marees for each vessel















data_vessel[,prop_mean_dep_port_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco.prod_marees),prop_mean_dep_port_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used port of departure (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,value_mean_dep_port_effort_marees:=NA_real_]

data_vessel[!is.na(mean_value_effort_marees),value_mean_dep_port_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing effort value for main used port of departure (using mean fishing effort between marees) among marees for each vessel
















data_vessel[,value_mean_dep_port_weight_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight_marees),value_mean_dep_port_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing weight value for main used port of departure (using mean fishing weight between marees) among marees for each vessel















data_vessel[,value_mean_dep_port_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight.prod_marees),value_mean_dep_port_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing productivity value for main used port of departure (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,value_mean_dep_port_eco_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco_marees),value_mean_dep_port_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic value for main used port of departure (using mean fishing economic value between marees) among marees for each vessel











data_vessel[,value_mean_dep_port_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco.prod_marees),value_mean_dep_port_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic productivity value for main used port of departure (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,sd_mean_dep_port_effort_marees:=NA_real_]

data_vessel[!is.na(mean_value_effort_marees),sd_mean_dep_port_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main used port of departure (using mean fishing effort between marees) among marees for each vessel













data_vessel[,sd_mean_dep_port_weight_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight_marees),sd_mean_dep_port_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main used port of departure (using mean fishing weight between marees) among marees for each vessel












data_vessel[,sd_mean_dep_port_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight.prod_marees),sd_mean_dep_port_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main used port of departure (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,sd_mean_dep_port_eco_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco_marees),sd_mean_dep_port_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main used port of departure (using mean fishing economic value between marees) among marees for each vessel











data_vessel[,sd_mean_dep_port_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco.prod_marees),sd_mean_dep_port_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_DEP_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_DEP_SACROIS) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,LIEU_COD_DEP_SACROIS)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main used port of departure (using mean fishing economic productivity between marees) among marees for each vessel


```








#####Arrival


```{r spatial variables - ports (arrival)}



#1) Departure places (basic unit: marées)


anyNA(SACROIS[,LIEU_COD_RET_SACROIS]) #no missing value about arrival location


table(
    dcast(SACROIS,
            MAREE_ID ~ ., 
            fun.aggregate = function(x) length(unique(x))==1,
            value.var = "PAVILLON")[,.]) #test whether the arrival could change during a marée (we expect not, i.e. all test=TRUE)








data_vessel[,value_nb_ret_port_year:=
    dcast(SACROIS[!duplicated(MAREE_ID),],
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),
          value.var = "LIEU_COD_RET_SACROIS")[,.] ]  #assigns how many ports of arrival are used








#a) Year scale







data_vessel[,main_ret_port_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_ret_port_year),main_ret_port_nb_year:=
  dcast(SACROIS[!duplicated(MAREE_ID)], #to not count several time the same trip (where port of arrival is constant) 
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = length,
        value.var = "LIEU_COD_RET_SACROIS")
          [!is.na(LIEU_COD_RET_SACROIS)]
            [,.(.==max(.),LIEU_COD_RET_SACROIS),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_RET_SACROIS] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main used port of arrival (in marees number) in a year for each vessel



# dcast(SACROIS, NAVS_COD+LIEU_COD_RET_SACROIS~., fun.aggregate = sumna, value.var = "QUANT_POIDS_VIF_SACROIS")[,.(Main=.SD[.==max(., na.rm=T),LIEU_COD_RET_SACROIS]), by=NAVS_COD] #recursive way of doing it: elegant but NOT EFFICIENT ! (still perform better than tapply method)



#Important note: in some cases different ports of arrival or return were used in the same proportion, in this case we retained for the moment each time the first one (alphabetically) considering that in such cases the equivalently used port were most of the time located nearly (e.g. Saint jean de Luz / Bayonne)






#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_ret_port_effort_year:=NA_character_]

data_vessel[!is.na(value_effort_year),main_ret_port_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,.(.==max(.),LIEU_COD_RET_SACROIS),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_RET_SACROIS] ]
#assigns the main used port of arrival (in fishing effort) in a year for each vessel





data_vessel[,main_ret_port_weight_year:=NA_character_]

data_vessel[!is.na(value_weight_year),main_ret_port_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,.(.==max(.),LIEU_COD_RET_SACROIS),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_RET_SACROIS] ]
#assigns the main used port of arrival (in fishing weight) in a year for each vessel







data_vessel[,main_ret_port_weight.prod_year:=NA_character_]

data_vessel[!is.na(value_weight.prod_year),main_ret_port_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,.(.==max(.),LIEU_COD_RET_SACROIS),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_RET_SACROIS] ]
#assigns the main used port of arrival (in fishing productivity) in a year for each vessel







data_vessel[,main_ret_port_eco_year:=NA_character_]

data_vessel[!is.na(value_eco_year),main_ret_port_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,.(.==max(.),LIEU_COD_RET_SACROIS),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_RET_SACROIS] ]
 #assigns the main used port of arrival (in fishing economic value) in a year for each vessel






data_vessel[,main_ret_port_eco.prod_year:=NA_character_]

data_vessel[!is.na(value_eco.prod_year),main_ret_port_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,.(.==max(.),LIEU_COD_RET_SACROIS),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),LIEU_COD_RET_SACROIS] ]
#assigns the main used port of arrival (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_ret_port_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_ret_port_year),prop_ret_port_nb_year:=
  dcast(SACROIS[!duplicated(MAREE_ID)], 
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = length,
        value.var = "LIEU_COD_RET_SACROIS")
          [!is.na(LIEU_COD_RET_SACROIS)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values
#assigns the proportion of the main used port of arrival (in maree number) in a year for each vessel










data_vessel[,prop_ret_port_weight_year:=NA_real_]

data_vessel[!is.na(value_weight_year),prop_ret_port_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main used port of arrival (in fishing weight) in a year for each vessel









data_vessel[,prop_ret_port_weight.prod_year:=NA_real_]

data_vessel[!is.na(value_weight.prod_year),prop_ret_port_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used port of arrival (in fishing productivity) in a year for each vessel













data_vessel[,prop_ret_port_eco_year:=NA_real_]

data_vessel[!is.na(value_eco_year),prop_ret_port_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used port of arrival (in fishing economic value) in a year for each vessel










data_vessel[,prop_ret_port_eco.prod_year:=NA_real_]

data_vessel[!is.na(value_eco.prod_year),prop_ret_port_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main used port of arrival (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_ret_port_effort_year:=NA_real_]

data_vessel[!is.na(value_effort_year),value_main_ret_port_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main used port of arrival in a year for each vessel





data_vessel[,prop_ret_port_effort_year:=value_main_ret_port_effort_year/effort_year]


 #assigns the proportion of the main used port of arrival (in fishing effort) in a year for each vessel




data_vessel[,value_main_ret_port_weight_year:=NA_real_]

data_vessel[!is.na(value_weight_year),value_main_ret_port_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main used port of arrival in a year for each vessel







data_vessel[,value_main_ret_port_weight.prod_year:=NA_real_]

data_vessel[!is.na(value_weight.prod_year),value_main_ret_port_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main used port of arrival in a year for each vessel











data_vessel[,value_main_ret_port_eco_year:=NA_real_]

data_vessel[!is.na(value_eco_year),value_main_ret_port_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main used port of arrival in a year for each vessel










data_vessel[,value_main_ret_port_eco.prod_year:=NA_real_]

data_vessel[!is.na(value_eco.prod_year),value_main_ret_port_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main used port of arrival in a year for each vessel






table(data_vessel$main_weight_ret_port==data_vessel$main_nb_ret_port) #few vessels (in 2023: 6%) differ in their main port depending on the method used  



table(data_vessel$main_eco_ret_port==data_vessel$main_weight_ret_port)
table(data_vessel$main_eco_ret_port==data_vessel$main_nb_ret_port)
#few vessels (in 2023: 3/4%) differ in their main port depending on the method used  










#b) Maree scale










data_vessel[,main_mean_ret_port_effort_marees:=NA_character_]

data_vessel[!is.na(mean_value_effort_marees),main_mean_ret_port_effort_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)]
                  [ ,.(V1==max(V1),LIEU_COD_RET_SACROIS),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), LIEU_COD_RET_SACROIS] ]
 #assigns the main used port of arrival (using mean fishing effort between marees) among marees for each vessel













data_vessel[,main_mean_ret_port_weight_marees:=NA_character_]

data_vessel[!is.na(mean_value_weight_marees),main_mean_ret_port_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)]
                  [ ,.(V1==max(V1),LIEU_COD_RET_SACROIS),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), LIEU_COD_RET_SACROIS] ]
#assigns the main used port of arrival (using mean fishing weight between marees) among marees for each vessel















data_vessel[,main_mean_ret_port_weight.prod_marees:=NA_character_]

data_vessel[!is.na(mean_value_weight.prod_marees),main_mean_ret_port_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)]
                  [ ,.(V1==max(V1),LIEU_COD_RET_SACROIS),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), LIEU_COD_RET_SACROIS] ]
#assigns the main used port of arrival (using mean fishing productivity between marees) among marees for each vessel

















data_vessel[,main_mean_ret_port_eco_marees:=NA_character_]

data_vessel[!is.na(mean_value_eco_marees),main_mean_ret_port_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)]
                  [ ,.(V1==max(V1),LIEU_COD_RET_SACROIS),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), LIEU_COD_RET_SACROIS] ]
#assigns the main used port of arrival (using mean fishing economic value between marees) among marees for each vessel













data_vessel[,main_mean_ret_port_eco.prod_marees:=NA_character_]

data_vessel[!is.na(mean_value_eco.prod_marees),main_mean_ret_port_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)]
                  [ ,.(V1==max(V1),LIEU_COD_RET_SACROIS),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), LIEU_COD_RET_SACROIS] ]
#assigns the main used port of arrival (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main used port of arrival change a lot when comparing estimates at marees and year scale (in 2023)

















data_vessel[,prop_mean_ret_port_effort_marees:=NA_real_]

data_vessel[!is.na(mean_value_effort_marees),prop_mean_ret_port_effort_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used port of arrival (using mean fishing effort between marees) among marees for each vessel




















data_vessel[,prop_mean_ret_port_weight_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight_marees),prop_mean_ret_port_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used port of arrival (using mean fishing weight between marees) among marees for each vessel


















data_vessel[,prop_mean_ret_port_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight.prod_marees),prop_mean_ret_port_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used port of arrival (using mean fishing productivity between marees) among marees for each vessel




















data_vessel[,prop_mean_ret_port_eco_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco_marees),prop_mean_ret_port_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used port of arrival (using mean fishing economic value between marees) among marees for each vessel















data_vessel[,prop_mean_ret_port_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco.prod_marees),prop_mean_ret_port_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main used port of arrival (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,value_mean_ret_port_effort_marees:=NA_real_]

data_vessel[!is.na(mean_value_effort_marees),value_mean_ret_port_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing effort value for main used port of arrival (using mean fishing effort between marees) among marees for each vessel
















data_vessel[,value_mean_ret_port_weight_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight_marees),value_mean_ret_port_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing weight value for main used port of arrival (using mean fishing weight between marees) among marees for each vessel















data_vessel[,value_mean_ret_port_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight.prod_marees),value_mean_ret_port_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing productivity value for main used port of arrival (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,value_mean_ret_port_eco_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco_marees),value_mean_ret_port_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic value for main used port of arrival (using mean fishing economic value between marees) among marees for each vessel











data_vessel[,value_mean_ret_port_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco.prod_marees),value_mean_ret_port_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic productivity value for main used port of arrival (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,sd_mean_ret_port_effort_marees:=NA_real_]

data_vessel[!is.na(mean_value_effort_marees),sd_mean_ret_port_effort_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main used port of arrival (using mean fishing effort between marees) among marees for each vessel













data_vessel[,sd_mean_ret_port_weight_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight_marees),sd_mean_ret_port_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main used port of arrival (using mean fishing weight between marees) among marees for each vessel












data_vessel[,sd_mean_ret_port_weight.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_weight.prod_marees),sd_mean_ret_port_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main used port of arrival (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,sd_mean_ret_port_eco_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco_marees),sd_mean_ret_port_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main used port of arrival (using mean fishing economic value between marees) among marees for each vessel











data_vessel[,sd_mean_ret_port_eco.prod_marees:=NA_real_]

data_vessel[!is.na(mean_value_eco.prod_marees),sd_mean_ret_port_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+LIEU_COD_RET_SACROIS~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(LIEU_COD_RET_SACROIS) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,LIEU_COD_RET_SACROIS)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main used port of arrival (using mean fishing economic productivity between marees) among marees for each vessel


```



#####Match


```{r spatial variables - ports (match)}

#3) Correspondence




data_vessel[,prop_change_port:=
    SACROIS[!duplicated(MAREE_ID),
            sum(LIEU_COD_DEP_SACROIS==LIEU_COD_RET_SACROIS)/length(LIEU_COD_DEP_SACROIS),
            by= NAVS_COD_YEAR] [,V1]
           ]  #assigns the proportion of time where port of departure and arrival are the same




table(data_vessel$PORT_EXPL_ACT_COD==data_vessel$main_nb_dep_port)

 table(data_vessel$PORT_EXPL_ACT_COD==data_vessel$main_weight_dep_port)

 table(data_vessel$PORT_EXPL_ACT_COD==data_vessel$main_eco_dep_port)

table(data_vessel$PORT_EXPL_ACT_COD==data_vessel$main_nb_ret_port)

 table(data_vessel$PORT_EXPL_ACT_COD==data_vessel$main_weight_ret_port)

 table(data_vessel$PORT_EXPL_ACT_COD==data_vessel$main_eco_ret_port)

# declared exploitation port often differ from main port deduced from SACROIS data (in ~14% of cases in 2021)




```

#### Fishing areas

To be noticed: high level division are not always subdivided (e.g. subrectangle only near to the shore ?) and subdivision sometimes overlap several division.

#####ICES Divisions

```{r spatial variables - Fishing areas - ICES division}








#Warning: when data is not provided, it should be treated as non available (NA) to avoid to be taken into account for further computation (e.g. the main element is computed without taking into account the fishing sequences without provided data)





# To be noticed: the basic unit for areas at sea are the fishing sequence





SACROIS[SECT_COD_SACROIS_NIV3=="", SECT_COD_SACROIS_NIV3:=NA]




  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "SECT_COD_SACROIS_NIV3")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => OK in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "SECT_COD_SACROIS_NIV3")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on visited ices divisions, few vessels (1% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "SECT_COD_SACROIS_NIV3")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "SECT_COD_SACROIS_NIV3")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 6% +/- 18 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(SECT_COD_SACROIS_NIV3),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(SECT_COD_SACROIS_NIV3),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred




# Missing data are here anecdotal and should not cause major bias in the data analysis




#1) Main exploited area






data_vessel[,value_nb_ICES_div_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),
          value.var = "SECT_COD_SACROIS_NIV3")[,.] ]  #assigns how many ICES division are visited








data_vessel[,value_nb_ICES_div_mean_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "SECT_COD_SACROIS_NIV3")   
          [,mean(., na.rm=T),by = 
              SACROIS [order(MAREE_ID)] [!duplicated(MAREE_ID),NAVS_COD_YEAR]] 
            [order(SACROIS)] 
              [,V1] ] 
# compute the average number of visited ICES division per marees for each vessel 









data_vessel[,nb_ICES_div_sd_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "SECT_COD_SACROIS_NIV3")
          [,pop.sd(na.omit(.)),by = 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR]]
            [order(SACROIS)]
              [,V1] ] 
 # variation in number of visited ICES division for each vessels across marees











#a) Year scale







data_vessel[,main_ICES_div_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year),main_ICES_div_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], #to not count several time the same fishing sequence (where ICES division is constant) 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV3")
          [!is.na(SECT_COD_SACROIS_NIV3)]
            [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV3] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main visited ICES division (in marees number) in a year for each vessel








#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_ICES_div_effort_year:=NA_character_]

data_vessel[!is.na(value_effort_year),main_ICES_div_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES division (in fishing effort) in a year for each vessel





data_vessel[,main_ICES_div_weight_year:=NA_character_]

data_vessel[!is.na(value_weight_year),main_ICES_div_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES division (in fishing weight) in a year for each vessel







data_vessel[,main_ICES_div_weight.prod_year:=NA_character_]

data_vessel[!is.na(value_weight.prod_year),main_ICES_div_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES division (in fishing productivity) in a year for each vessel







data_vessel[,main_ICES_div_eco_year:=NA_character_]

data_vessel[!is.na(value_eco_year),main_ICES_div_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV3] ]
 #assigns the main visited ICES division (in fishing economic value) in a year for each vessel






data_vessel[,main_ICES_div_eco.prod_year:=NA_character_]

data_vessel[!is.na(value_eco.prod_year),main_ICES_div_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES division (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_ICES_div_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year),prop_ICES_div_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV3")
          [!is.na(SECT_COD_SACROIS_NIV3)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values
#assigns the proportion of the main visited ICES division (in maree number) in a year for each vessel










data_vessel[,prop_ICES_div_weight_year:=NA_real_]

data_vessel[!is.na(value_weight_year),prop_ICES_div_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main visited ICES division (in fishing weight) in a year for each vessel









data_vessel[,prop_ICES_div_weight.prod_year:=NA_real_]

data_vessel[!is.na(value_weight.prod_year),prop_ICES_div_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited ICES division (in fishing productivity) in a year for each vessel













data_vessel[,prop_ICES_div_eco_year:=NA_real_]

data_vessel[!is.na(value_eco_year),prop_ICES_div_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited ICES division (in fishing economic value) in a year for each vessel










data_vessel[,prop_ICES_div_eco.prod_year:=NA_real_]

data_vessel[!is.na(value_eco.prod_year),prop_ICES_div_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited ICES division (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_ICES_div_effort_year:=NA_real_]

data_vessel[!is.na(value_effort_year),value_main_ICES_div_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main visited ICES division in a year for each vessel





data_vessel[,prop_ICES_div_effort_year:=value_main_ICES_div_effort_year/effort_year]


 #assigns the proportion of the main visited ICES division (in fishing effort) in a year for each vessel




data_vessel[,value_main_ICES_div_weight_year:=NA_real_]

data_vessel[!is.na(value_weight_year),value_main_ICES_div_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main visited ICES division in a year for each vessel







data_vessel[,value_main_ICES_div_weight.prod_year:=NA_real_]

data_vessel[!is.na(value_weight.prod_year),value_main_ICES_div_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main visited ICES division in a year for each vessel











data_vessel[,value_main_ICES_div_eco_year:=NA_real_]

data_vessel[!is.na(value_eco_year),value_main_ICES_div_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main visited ICES division in a year for each vessel










data_vessel[,value_main_ICES_div_eco.prod_year:=NA_real_]

data_vessel[!is.na(value_eco.prod_year),value_main_ICES_div_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main visited ICES division in a year for each vessel






#to be noticed: the main fishing areas in terms of fishing weight and economic value were extremely close to the results when considering number of fishing sequence (<2% of difference in 2023, see below, and were therefore not included)



#in the same way the amount of fish and economic value in the main exploited area were highly correlated to the same metrics computed throughout the year without area distinction (R²>0.99, not displayed here)



















#b) Maree scale







data_vessel[,main_ICES_div_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_mean_marees),main_ICES_div_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV3")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of ICES divisions visited during the trip 
            [!is.na(SECT_COD_SACROIS_NIV3)] #removal of non attributed ICES divisions
              [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present ICES divisions) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present ICES divisions) between marees 
                              [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ] #selection of the first value if there is equality

 #assigns the main visited ICES divisions (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_ICES_div_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_mean_marees),main_mean_ICES_div_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV3")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of ICES divisions captured during the trip 
              [!is.na(SECT_COD_SACROIS_NIV3)]
                [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] # average the number of occurrence of ICES divisions between marees
                  [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                    [V1==T] # select the ICES divisions with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES divisions (using mean sequence number between marees) among marees for each vessel









data_vessel[,main_ICES_div_effort_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_effort_marees),main_ICES_div_effort_marees:=
  dcast(SACROIS, 
      MAREE_ID+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
      fun.aggregate = function(x) x[1],
      value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
        [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV3)] #then sum of effort within maree for the same ICES divisions
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ] 
 #assigns the main visited ICES divisions (using fishing effort within marees) among marees for each vessel




data_vessel[,main_mean_ICES_div_effort_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_effort_marees),main_mean_ICES_div_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV3)] #then sum of effort within maree for the same ICES divisions
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
                  [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ]
 #assigns the main visited ICES divisions (using mean fishing effort between marees) among marees for each vessel











data_vessel[,main_ICES_div_weight_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight_marees),main_ICES_div_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ] 
 #assigns the main visited ICES divisions (using fishing weight within marees) among marees for each vessel





data_vessel[,main_mean_ICES_div_weight_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight_marees),main_mean_ICES_div_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
                  [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES divisions (using mean fishing weight between marees) among marees for each vessel












data_vessel[,main_ICES_div_weight.prod_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight.prod_marees),main_ICES_div_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ] 
 #assigns the main visited ICES divisions (using fishing productivity within marees) among marees for each vessel





data_vessel[,main_mean_ICES_div_weight.prod_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight.prod_marees),main_mean_ICES_div_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
                  [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES divisions (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,main_ICES_div_eco_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco_marees),main_ICES_div_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ] 
 #assigns the main visited ICES divisions (using fishing economic value within marees) among marees for each vessel





data_vessel[,main_mean_ICES_div_eco_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco_marees),main_mean_ICES_div_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
                  [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES divisions (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,main_ICES_div_eco.prod_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco.prod_marees),main_ICES_div_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] 
                  [!duplicated(MAREE_ID)] 
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3) ]  
                        [order(NAVS_COD_YEAR)]
                          [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR] 
                            [V1==T] 
                              [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ] 
 #assigns the main visited ICES divisions (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,main_mean_ICES_div_eco.prod_marees:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco.prod_marees),main_mean_ICES_div_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
                [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
                  [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                    [V1==T] 
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES divisions (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main visited ICES divisions change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_ICES_div_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_mean_marees),prop_ICES_div_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV3")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SECT_COD_SACROIS_NIV3)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main visited ICES divisions (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_ICES_div_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_mean_marees),prop_mean_ICES_div_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV3")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SECT_COD_SACROIS_NIV3)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main visited ICES divisions (using mean sequence number between marees) among marees for each vessel










data_vessel[,prop_ICES_div_effort_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_effort_marees),prop_ICES_div_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV3)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)] 
              [!duplicated(MAREE_ID),sum:=dcast(SACROIS[!is.na(TP_NAVIRE_SACROIS) & !is.na(SECT_COD_SACROIS_NIV3)],
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sum,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
                [,max(V1)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the mean proportion of main visited ICES divisions (using fishing effort within marees) between marees for each vessel




data_vessel[,prop_mean_ICES_div_effort_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_effort_marees),prop_mean_ICES_div_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV3)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)] 
                [,mean(V1),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
                  [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the proportion of main visited ICES divisions (using mean fishing effort between marees) among marees for each vessel

















data_vessel[,prop_ICES_div_weight_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight_marees),prop_ICES_div_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited ICES divisions (using fishing weight within marees) between marees for each vessel





data_vessel[,prop_mean_ICES_div_weight_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight_marees),prop_mean_ICES_div_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited ICES divisions (using mean fishing weight between marees) among marees for each vessel














data_vessel[,prop_ICES_div_weight.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight.prod_marees),prop_ICES_div_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited ICES divisions (using fishing productivity within marees) between marees for each vessel





data_vessel[,prop_mean_ICES_div_weight.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight.prod_marees),prop_mean_ICES_div_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited ICES divisions (using mean fishing productivity between marees) among marees for each vessel
















data_vessel[,prop_ICES_div_eco_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco_marees),prop_ICES_div_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited ICES divisions (using fishing economic value within marees) between marees for each vessel





data_vessel[,prop_mean_ICES_div_eco_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco_marees),prop_mean_ICES_div_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited ICES divisions (using mean fishing economic value between marees) among marees for each vessel












data_vessel[,prop_ICES_div_eco.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco.prod_marees),prop_ICES_div_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited ICES divisions (using fishing economic productivity within marees) between marees for each vessel





data_vessel[,prop_mean_ICES_div_eco.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco.prod_marees),prop_mean_ICES_div_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited ICES divisions (using mean fishing economic productivity between marees) among marees for each vessel

















data_vessel[,value_ICES_div_effort_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_effort_marees),value_ICES_div_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV3)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[!is.na(main_ICES_div_effort_marees),main_ICES_div_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main ICES divisions (value repeated for each vessel)
                      [SECT_COD_SACROIS_NIV3==MAJ, V1] ] #retaining only main ICES divisions value

#assigns the mean fishing effort value for main visited ICES divisions (using fishing effort within marees) among marees for each vessel




data_vessel[,value_mean_ICES_div_effort_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_effort_marees),value_mean_ICES_div_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV3)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
                [,mean(V1),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                  [ ,max(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing effort value for main visited ICES divisions (using mean fishing effort between marees) among marees for each vessel













data_vessel[,value_ICES_div_weight_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight_marees),value_ICES_div_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_ICES_div_weight_marees),main_ICES_div_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SECT_COD_SACROIS_NIV3==MAJ, V1] ] 

#assigns the mean fishing weight value for main visited ICES divisions (using fishing weight within marees) among marees for each vessel




data_vessel[,value_mean_ICES_div_weight_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight_marees),value_mean_ICES_div_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing weight value for main visited ICES divisions (using mean fishing weight between marees) among marees for each vessel












data_vessel[,value_ICES_div_weight.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight.prod_marees),value_ICES_div_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_ICES_div_weight.prod_marees),main_ICES_div_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SECT_COD_SACROIS_NIV3==MAJ, V1] ] 

#assigns the mean fishing productivity value for main visited ICES divisions (using fishing productivity within marees) among marees for each vessel




data_vessel[,value_mean_ICES_div_weight.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight.prod_marees),value_mean_ICES_div_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing productivity value for main visited ICES divisions (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,value_ICES_div_eco_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco_marees),value_ICES_div_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_ICES_div_eco_marees),main_ICES_div_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SECT_COD_SACROIS_NIV3==MAJ, V1] ]

#assigns the mean fishing economic value for main visited ICES divisions (using fishing economic value within marees) among marees for each vessel




data_vessel[,value_mean_ICES_div_eco_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco_marees),value_mean_ICES_div_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic value for main visited ICES divisions (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,value_ICES_div_eco.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco.prod_marees),value_ICES_div_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_ICES_div_eco.prod_marees),main_ICES_div_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SECT_COD_SACROIS_NIV3==MAJ, V1] ] 

#assigns the mean fishing economic productivity value for main visited ICES divisions (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,value_mean_ICES_div_eco.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco.prod_marees),value_mean_ICES_div_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [ ,max(V1),by= NAVS_COD_YEAR]             
                  [order(NAVS_COD_YEAR)] 
                    [, V1] ]
#assigns the mean fishing economic productivity value for main visited ICES divisions (using mean fishing economic productivity between marees) among marees for each vessel




















data_vessel[,sd_ICES_div_effort_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_effort_marees),sd_ICES_div_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV3)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
                [,pop.sd(V1),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[!is.na(main_ICES_div_effort_marees),main_ICES_div_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main ICES divisions (value repeated for each vessel)
                      [SECT_COD_SACROIS_NIV3==MAJ, V1] ] #retaining only main ICES divisions value

#assigns the variation (sd) in fishing effort value for main visited ICES divisions (using fishing effort within marees) among marees for each vessel




data_vessel[,sd_mean_ICES_div_effort_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_effort_marees),sd_mean_ICES_div_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV3)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
                [,.(mean(V1),pop.sd(V1)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                  [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                    [V1==T]
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main visited ICES divisions (using mean fishing effort between marees) among marees for each vessel













data_vessel[,sd_ICES_div_weight_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight_marees),sd_ICES_div_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_ICES_div_weight_marees),main_ICES_div_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SECT_COD_SACROIS_NIV3==MAJ, V1] ] 

#assigns the variation (sd) in fishing weight value for main visited ICES divisions (using fishing weight within marees) among marees for each vessel




data_vessel[,sd_mean_ICES_div_weight_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight_marees),sd_mean_ICES_div_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main visited ICES divisions (using mean fishing weight between marees) among marees for each vessel












data_vessel[,sd_ICES_div_weight.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight.prod_marees),sd_ICES_div_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_ICES_div_weight.prod_marees),main_ICES_div_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SECT_COD_SACROIS_NIV3==MAJ, V1] ] 

#assigns the variation (sd) in fishing productivity value for main visited ICES divisions (using fishing productivity within marees) among marees for each vessel




data_vessel[,sd_mean_ICES_div_weight.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_weight.prod_marees),sd_mean_ICES_div_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main visited ICES divisions (using mean fishing productivity between marees) among marees for each vessel














data_vessel[,sd_ICES_div_eco_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco_marees),sd_ICES_div_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_ICES_div_eco_marees),main_ICES_div_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SECT_COD_SACROIS_NIV3==MAJ, V1] ]

#assigns the variation (sd) in fishing economic value for main visited ICES divisions (using fishing economic value within marees) among marees for each vessel




data_vessel[,sd_mean_ICES_div_eco_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco_marees),sd_mean_ICES_div_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main visited ICES divisions (using mean fishing economic value between marees) among marees for each vessel









data_vessel[,sd_ICES_div_eco.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco.prod_marees),sd_ICES_div_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,pop.sd(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [order(NAVS_COD_YEAR)]
                  [,MAJ:=rep(data_vessel[!is.na(main_ICES_div_eco.prod_marees),main_ICES_div_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                    [SECT_COD_SACROIS_NIV3==MAJ, V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main visited ICES divisions (using fishing economic productivity within marees) among marees for each vessel




data_vessel[,sd_mean_ICES_div_eco.prod_marees:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(mean_value_eco.prod_marees),sd_mean_ICES_div_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
              [,.(mean(.),pop.sd(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)] 
                [ ,.(max(V1)==V1,V2),by= NAVS_COD_YEAR] 
                  [V1==T]
                    [order(NAVS_COD_YEAR)] 
                      [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main visited ICES divisions (using mean fishing economic productivity between marees) among marees for each vessel



















#c) Sequence scale








data_vessel[,main_mean_ICES_div_effort_seq:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_effort_year),main_mean_ICES_div_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(.)]
            [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
              [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES divisions using mean fishing effort between sequences for each vessel











data_vessel[,main_mean_ICES_div_weight_seq:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_weight_year),main_mean_ICES_div_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ] #assigns the main visited ICES divisions using mean fishing weight between fishing sequences for each vessel













data_vessel[,main_mean_ICES_div_weight.prod_seq:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_weight.prod_year),main_mean_ICES_div_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES divisions using mean fishing productivity between sequences for each vessel
















data_vessel[,main_mean_ICES_div_eco_seq:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_eco_year),main_mean_ICES_div_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ] #assigns the main visited ICES divisions using mean fishing economic value between fishing sequences for each vessel













data_vessel[,main_mean_ICES_div_eco.prod_seq:=NA_character_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_eco.prod_year),main_mean_ICES_div_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV3] ]
#assigns the main visited ICES divisions using mean fishing economic productivity between sequences for each vessel


















data_vessel[,prop_mean_ICES_div_effort_seq:=NA_real_]


data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_effort_year),prop_mean_ICES_div_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited ICES divisions (using mean fishing effort between sequence) among sequence for each vessel









data_vessel[,prop_mean_ICES_div_weight_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_weight_year),prop_mean_ICES_div_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main visited ICES divisions (using mean fishing weight between sequence) among sequence for each vessel











data_vessel[,prop_mean_ICES_div_weight.prod_seq:=NA_real_]


data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_weight.prod_year),prop_mean_ICES_div_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main visited ICES divisions (using mean fishing productivity between sequence) among sequence for each vessel











data_vessel[,prop_mean_ICES_div_eco_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_eco_year),prop_mean_ICES_div_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main visited ICES divisions (using mean fishing economic value between sequence) among sequence for each vessel






data_vessel[,prop_mean_ICES_div_eco.prod_seq:=NA_real_]


data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_eco.prod_year),prop_mean_ICES_div_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),SECT_COD_SACROIS_NIV3),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main visited ICES divisions (using mean fishing economic productivity between sequence) among sequence for each vessel















data_vessel[,value_mean_ICES_div_effort_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_effort_year),value_mean_ICES_div_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main visited ICES divisions using mean fishing effort between fishing sequences for each vessel













data_vessel[,value_mean_ICES_div_weight_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_weight_year),value_mean_ICES_div_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing weight value of main visited ICES divisions using mean fishing weight between fishing sequences for each vessel











data_vessel[,value_mean_ICES_div_weight.prod_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_weight.prod_year),value_mean_ICES_div_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main visited ICES divisions using mean fishing productivity between fishing sequences for each vessel







data_vessel[,value_mean_ICES_div_eco_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_eco_year),value_mean_ICES_div_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing economic value of main visited ICES divisions using mean fishing economic value between fishing sequences for each vessel











data_vessel[,value_mean_ICES_div_eco.prod_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_eco.prod_year),value_mean_ICES_div_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main visited ICES divisions using mean fishing economic productivity between fishing sequences for each vessel



















data_vessel[,sd_mean_ICES_div_effort_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_effort_year),sd_mean_ICES_div_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing effort value of main visited ICES divisions using mean fishing effort between fishing sequences for each vessel









data_vessel[,sd_mean_ICES_div_weight_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_weight_year),sd_mean_ICES_div_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing weight value of main visited ICES divisions using mean fishing weight between fishing sequences for each vessel










data_vessel[,sd_mean_ICES_div_weight.prod_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_weight.prod_year),sd_mean_ICES_div_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]      #assigns the variation (sd) in fishing productivity value of main visited ICES divisions using mean fishing productivity between fishing sequences for each vessel















data_vessel[,sd_mean_ICES_div_eco_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_eco_year),sd_mean_ICES_div_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing economic value of main visited ICES divisions using mean fishing economic value between fishing sequences for each vessel












data_vessel[,sd_mean_ICES_div_eco.prod_seq:=NA_real_]

data_vessel[!is.na(value_nb_ICES_div_year) & !is.na(value_eco.prod_year),sd_mean_ICES_div_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV3~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV3)]
            [!is.na(SECT_COD_SACROIS_NIV3) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]   #assigns the variation (sd) in fishing economic productivity value of main visited ICES divisions using mean fishing economic productivity between fishing sequences for each vessel












```



######Frequently associated divisions


```{r r spatial variables - Fishing areas - ICES division (association)}





#2) Specific major areas












basket=tapply(SACROIS$SECT_COD_SACROIS_NIV3, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$SECT_COD_SACROIS_NIV3, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of visited ICES divisions (all ICES divisions visited at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


used_ices_div=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all engine implied in a relevant association


used_ices_div= str_extract(used_ices_div, pattern="(?<=\\{)(.*)(?=\\})" )



#there is no significant association of ices divisions ! Yet, the distribution in the two main studied area (27.8.a / 27.8.b) should be of interest and are therefore studied



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()













SACROIS[,SECT_COD_SACROIS_NIV3:=as.factor(SACROIS$SECT_COD_SACROIS_NIV3)]
#to properly consider the cases where vessels are not active in a given area, the areas must be considered as a factor variable









for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_prop_nb_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) {y=table(x); y[names(y)==i]/sum(y)},
              value.var = "SECT_COD_SACROIS_NIV3")
                [, .] #proportion of time the ICES division of interest was visited among all fishing events
                  ]
}





for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_prop_weight_",i):=0]; #attribution of 0 value by default (no observed visit of the target ICES division)
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_prop_weight_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3 ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [, .[.SD$SECT_COD_SACROIS_NIV3==i & !is.na(.SD$SECT_COD_SACROIS_NIV3)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the ICES division of interest (in terms of fishing weight), computed only when proven visit of the target ICES division
  data_vessel[is.na(value_weight_year), paste0("ICES_div_prop_weight_",i):=NA] #attribution of NA values when data not available to attest for the target ICES division visit
}










for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_prop_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_prop_eco_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3 ~ ., 
              fun.aggregate = sumna,
              value.var = "MONTANT_EUROS_SACROIS")
                [, .[.SD$SECT_COD_SACROIS_NIV3==i & !is.na(.SD$SECT_COD_SACROIS_NIV3)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the ICES division of interest (in terms of fishing economic value)
  data_vessel[is.na(value_eco_year), paste0("ICES_div_prop_eco_",i):=NA] 
}






for (i in c("27.8.a","27.8.b")) {
    data_vessel[,paste0("ICES_div_prop_effort_",i):=
                  SACROIS[, sumna(TP_NAVIRE_SACROIS[.SD$SECT_COD_SACROIS_NIV3==i][!duplicated(.SD$SEQ_ID)])/sumna(TP_NAVIRE_SACROIS[!duplicated(.SD$SEQ_ID)]), by= NAVS_COD_YEAR] #selecting only one occurrence in the sequence to avoid accounting several time the same effort
                    [,V1]
                      ]; #catches proportion in the ICES division of interest (in terms of fishing effort)
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))==0, paste0("ICES_div_prop_effort_",i):=0] #attribution of 0 value when no observed visit of the target ICES division (NA values attributed when no data available on visited ICES division and/or fishing effort)
  data_vessel[is.na(value_effort_year), paste0("ICES_div_prop_effort_",i):=NA] #NA attributed when data on ICES division is available but no data on fishing effort is available 
}

#Method use here way more efficient !!!!! => to be applied to all other functions ?





for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_prop_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_prop_weight.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3 ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_POIDS")
                [, .[.SD$SECT_COD_SACROIS_NIV3==i & !is.na(.SD$SECT_COD_SACROIS_NIV3)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the ICES division of interest (in terms of fishing productivity)
  data_vessel[is.na(value_weight.prod_year), paste0("ICES_div_prop_weight.prod_",i):=NA] 
}






for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_prop_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_prop_eco.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3 ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_ECO")
                [, .[.SD$SECT_COD_SACROIS_NIV3==i & !is.na(.SD$SECT_COD_SACROIS_NIV3)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the ICES division of interest (in terms of fishing productivity)
  data_vessel[is.na(value_eco.prod_year), paste0("ICES_div_prop_eco.prod_",i):=NA] 
}



















for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_weight_",i):=0]; #attribution of 0 value by default (no observed visit of the target ICES division)
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_weight_",i):=
            SACROIS[SECT_COD_SACROIS_NIV3==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the ICES division of interest (in terms of fishing weight), computed only when proven visit of the target ICES division
  data_vessel[is.na(value_weight_year), paste0("ICES_div_weight_",i):=NA] #attribution of NA values when data not available to attest for the target ICES division visit
}


#Alternative way to compute proportion metrics: prop_weight_i=weight_i/weight_year, way faster !)





for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_eco_",i):=
            SACROIS[SECT_COD_SACROIS_NIV3==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the ICES division of interest (in terms of fishing economic values), computed only when proven visit of the target ICES division
  data_vessel[is.na(value_eco_year), paste0("ICES_div_eco_",i):=NA]
}






for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_effort_",i):=0]; 
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_effort_",i):=
            SACROIS[SECT_COD_SACROIS_NIV3==i,][!duplicated(SEQ_ID), sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the ICES division of interest (in terms of fishing effort), computed only when proven visit of the target ICES division
  data_vessel[is.na(value_effort_year), paste0("ICES_div_effort_",i):=NA]
}







for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_weight.prod_",i):=
            SACROIS[SECT_COD_SACROIS_NIV3==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the ICES division of interest (in terms of fishing productivity), computed only when proven visit of the target ICES division
  data_vessel[is.na(value_weight.prod_year), paste0("ICES_div_weight.prod_",i):=NA]
}






for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_eco.prod_",i):=
            SACROIS[SECT_COD_SACROIS_NIV3==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the ICES division of interest (in terms of fishing economic productivity), computed only when proven visit of the target ICES division
  data_vessel[is.na(value_eco.prod_year), paste0("ICES_div_eco.prod_",i):=NA]
}











#mean values at the sequence level are also computed to obtain estimate less biased by missing values:





for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_prop_nb_",i,"_seq"):=
            SACROIS[, sumna(SECT_COD_SACROIS_NIV3==i)/length(na.omit(SECT_COD_SACROIS_NIV3)), by= .(NAVS_COD_YEAR,SEQ_ID)][, mean(V1, na.rm=T), by= NAVS_COD_YEAR] #proportion in ICES division occurrence for each sequence
              [,V1]
                ]# mean proportion of time the ICES division of interest was visited among all fishing sequence
}


#all variables computed at the sequence level (average value) are computationally expensive: expect about 20-40 minutes per loop...









for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_prop_weight_",i,"_seq"):=
                SACROIS[, sumna(QUANT_POIDS_VIF_SACROIS[SECT_COD_SACROIS_NIV3==i])/sumna(QUANT_POIDS_VIF_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1] # mean proportion (in terms of fishing weight) of ICES division of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))==0,paste0("ICES_div_prop_weight_",i,"_seq"):=0]; #attribution of 0 value when no observed visit of the target ICES division (NA values attributed when no data available on visited ICES division and/or fishing effort)
  data_vessel[is.na(value_weight_year), paste0("ICES_div_prop_weight_",i):=NA] #NA attributed when data on ICES division is available but no data on fishing weight is available
}













for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_prop_eco_",i,"_seq"):=
                SACROIS[, sumna(MONTANT_EUROS_SACROIS[SECT_COD_SACROIS_NIV3==i])/sumna(MONTANT_EUROS_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing economic value) of ICES division of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))==0,paste0("ICES_div_prop_eco_",i,"_seq"):=0];
  data_vessel[is.na(value_eco_year), paste0("ICES_div_prop_eco_",i):=NA]
}









for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_prop_weight.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_POIDS[SECT_COD_SACROIS_NIV3==i])/sumna(PROD_POIDS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of ICES division of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))==0,paste0("ICES_div_prop_weight.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_weight.prod_year), paste0("ICES_div_prop_weight.prod_",i):=NA]
}







for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_prop_eco.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_ECO[SECT_COD_SACROIS_NIV3==i])/sumna(PROD_ECO), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of ICES division of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))==0,paste0("ICES_div_prop_eco.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_eco.prod_year), paste0("ICES_div_prop_eco.prod_",i):=NA]
}


















for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_weight_",i,"_seq"):=0]; #attribution of 0 value by default (no observed visit of the target ICES division)
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_weight_",i,"_seq"):=
            SACROIS[SECT_COD_SACROIS_NIV3==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(SECT_COD_SACROIS_NIV3)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] #for vessels of interest, all sequences with identified ICES division
                          [,V1/pres] ]; #mean fishing weight of the ICES division of interest between sequences, computed only when proven visit of the target ICES division
  data_vessel[is.na(value_weight_year), paste0("ICES_div_weight_",i,"_seq"):=NA] #attribution of NA values when data not available to attest for the target ICES division visit
}





for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_eco_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_eco_",i,"_seq"):=
            SACROIS[SECT_COD_SACROIS_NIV3==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(SECT_COD_SACROIS_NIV3)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic value of the ICES division of interest between sequences, computed only when proven visit of the target ICES division
  data_vessel[is.na(value_eco_year), paste0("ICES_div_eco_",i,"_seq"):=NA] 
}






for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_effort_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_effort_",i,"_seq"):=
            SACROIS[SECT_COD_SACROIS_NIV3==i,]
              [!duplicated(SEQ_ID),sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR]
                [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(SECT_COD_SACROIS_NIV3)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                  [,V1/pres] ]; #mean fishing effort of the ICES division of interest between sequences, computed only when proven visit of the target ICES division
  data_vessel[is.na(value_effort_year), paste0("ICES_div_effort_",i,"_seq"):=NA] 
}







for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_weight.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_weight.prod_",i,"_seq"):=
            SACROIS[SECT_COD_SACROIS_NIV3==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(SECT_COD_SACROIS_NIV3)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing productivity of the ICES division of interest between sequences, computed only when proven visit of the target ICES division
  data_vessel[is.na(value_weight.prod_year), paste0("ICES_div_weight.prod_",i,"_seq"):=NA] 
}







for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_eco.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0, paste0("ICES_div_eco.prod_",i,"_seq"):=
            SACROIS[SECT_COD_SACROIS_NIV3==i, sumna(PROD_ECO), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(SECT_COD_SACROIS_NIV3)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic productivity of the ICES division of interest between sequences, computed only when proven visit of the target ICES division
  data_vessel[is.na(value_eco.prod_year), paste0("ICES_div_eco.prod_",i,"_seq"):=NA] 
}












#### We also add other metrics of activity previously computed (number and main engine, species, family / only at year scale):


#To be noticed: the following metrics are applicable only if there is activity in the area of interest, they are therefore applicable only in a subset of vessels and should be of interest only for subfleet classification when precising specific fleet behaviors 






for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_nb_spe_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0,paste0("ICES_div_nb_spe_",i):=
            dcast(SACROIS[SECT_COD_SACROIS_NIV3==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "ESP2_COD_FAO")
                [, .] #number of species in the ICES division of interest among all fishing events
                  ]
}






for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_simpson_weight_spe_",i):=NA_real_];
  data_vessel[eval(as.name(paste0("ICES_div_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("ICES_div_nb_spe_",i)))), paste0("ICES_div_simpson_weight_spe_",i):=
            dcast(SACROIS[SECT_COD_SACROIS_NIV3==i,],
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(ESP2_COD_FAO)]
                  [!is.na(.)]
                    [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                      [,V1] #species diversity (simpson index, weight as abundance) in the ICES division of interest among all fishing events
            ]
}





for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_main_spe_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("ICES_div_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("ICES_div_nb_spe_",i)))), paste0("ICES_div_main_spe_weight_",i):=
            dcast(SACROIS[SECT_COD_SACROIS_NIV3==i,],
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(ESP2_COD_FAO) & !is.na(.)]
                  [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] #main fished species (in fishing weight) in the ICES division of interest among all fishing events
            ]
}














for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_nb_family_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0,paste0("ICES_div_nb_family_",i):=
            dcast(SACROIS[SECT_COD_SACROIS_NIV3==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "FAMILY_COD_FAO")
                [, .] #number of family in the ICES division of interest among all fishing events
                  ]
}





for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_simpson_weight_family_",i):=NA_real_];
  data_vessel[eval(as.name(paste0("ICES_div_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("ICES_div_nb_family_",i)))),paste0("ICES_div_simpson_weight_family_",i):=
            dcast(SACROIS[SECT_COD_SACROIS_NIV3==i,],
              NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(FAMILY_COD_FAO)]
                  [!is.na(.)]
                    [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                      [,V1] #family diversity (simpson index, weight as abundance) in the ICES division of interest among all fishing events
            ]
}




for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_main_family_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("ICES_div_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("ICES_div_nb_family_",i)))), paste0("ICES_div_main_family_weight_",i):=
            dcast(SACROIS[SECT_COD_SACROIS_NIV3==i,],
            NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(FAMILY_COD_FAO) & !is.na(.)]
                  [,.(.==max(.),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] #main fished family (in fishing weight) in the ICES division of interest among all fishing events
            ]
}









for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_nb_engine_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("ICES_div_prop_nb_",i)))>0,paste0("ICES_div_nb_engine_",i):=
            dcast(SACROIS[SECT_COD_SACROIS_NIV3==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "ENGIN_COD")
                [, .] #number of used engines in the ICES division of interest among all fishing events
                  ]
}








for (i in c("27.8.a","27.8.b")) {
  data_vessel[,paste0("ICES_div_main_engine_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("ICES_div_prop_weight_",i)))>0 & eval(as.name(paste0("ICES_div_nb_engine_",i)))>0,paste0("ICES_div_main_engine_weight_",i):=
            dcast(SACROIS[SECT_COD_SACROIS_NIV3==i,],
            NAVS_COD_YEAR+ENGIN_COD ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(.)]
                  [,.(.==max(.),ENGIN_COD),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),ENGIN_COD] #main used engine (in fishing weight) in the ICES division of interest among all fishing events
            ]
}








```







#####ICES subdivision




```{r spatial variables - Fishing areas - ICES subdivision}




# To be noticed: the basic unit for areas at sea are the fishing sequence





SACROIS[SECT_COD_SACROIS_NIV4=="", SECT_COD_SACROIS_NIV4:=NA]




  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "SECT_COD_SACROIS_NIV4")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => OK in 2019->2022






table(SACROIS[,SECT_COD_SACROIS_NIV4]) #this sub-division concerns only the offshore areas, it has only very little interest given the distribution of observations that concerns us and is very close to distribution in ICES division, for these reason it is not used for the moment



```




#####Statistic rectangles

```{r spatial variables - Fishing areas - Statistic rectangles}







SACROIS[SECT_COD_SACROIS_NIV5=="", SECT_COD_SACROIS_NIV5:=NA]




  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "SECT_COD_SACROIS_NIV5")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 0.7% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "SECT_COD_SACROIS_NIV5")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on visited statistic rectangles, some vessels (9% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "SECT_COD_SACROIS_NIV5")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "SECT_COD_SACROIS_NIV5")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 9% +/- 19 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(SECT_COD_SACROIS_NIV5),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(SECT_COD_SACROIS_NIV5),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred




# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$SECT_COD_SACROIS_NIV5)~SACROIS$ENGIN_COD, family=binomial)) #we only use fishing engine and not metier here because the amount of NA is not sufficient here to have this level of precision

#we clearly observed that some engine are significantly associated to the presence or not of missing data on statistic rectangle (e.g. sennes, filet maillant, trémail in 2023)









#1) Main exploited area






data_vessel[,value_nb_stat_rect_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),
          value.var = "SECT_COD_SACROIS_NIV5")[,.] ]  #assigns how many statistic rectangles are visited within a year









data_vessel[,value_nb_stat_rect_mean_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "SECT_COD_SACROIS_NIV5")   
          [,mean(., na.rm=T),by = 
              SACROIS [order(MAREE_ID)] [!duplicated(MAREE_ID),NAVS_COD_YEAR]] 
            [order(SACROIS)] 
              [,V1] ] 
# compute the average number of visited statistic rectangle per marees for each vessel 









data_vessel[,nb_stat_rect_sd_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "SECT_COD_SACROIS_NIV5")
          [,pop.sd(na.omit(.)),by = 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR]]
            [order(SACROIS)]
              [,V1] ] 
 # variation in number of visited statistic rectangle for each vessels across marees









#a) Year scale







data_vessel[,main_stat_rect_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_stat_rect_year),main_stat_rect_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], #to not count several time the same fishing sequence (where engine use is constant) 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV5")
          [!is.na(SECT_COD_SACROIS_NIV5)]
            [,.(.==max(.),SECT_COD_SACROIS_NIV5),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV5] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main visited statistic rectangle (in marees number) in a year for each vessel








#warning: important amount of vessels with missing data for the subsequent metrics




data_vessel[,main_stat_rect_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA] #ensure that cases were NAs are distributed on each half of the two columns are taken into account
              [,.(.==max(c(0,.), na.rm=T),SECT_COD_SACROIS_NIV5),by = NAVS_COD_YEAR] #return NA==0 => NA when only NA are present, without warning message
                [V1==T | is.na(V1)] #select NA cases too
                  [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] #distribute NAs at the end of each vessels' ID => they are selected only if there is exclusively NA values
                    [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangle (in fishing effort) in a year for each vessel



#the former code should be generalized because it better accounts for NA value presence !!!!!!!!!!








data_vessel[,main_stat_rect_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),SECT_COD_SACROIS_NIV5),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangle (in fishing weight) in a year for each vessel







data_vessel[,main_stat_rect_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),SECT_COD_SACROIS_NIV5),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangle (in fishing productivity) in a year for each vessel







data_vessel[,main_stat_rect_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),SECT_COD_SACROIS_NIV5),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV5] ]
 #assigns the main visited statistic rectangle (in fishing economic value) in a year for each vessel






data_vessel[,main_stat_rect_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),SECT_COD_SACROIS_NIV5),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangle (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_stat_rect_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_stat_rect_year),prop_stat_rect_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV5")
          [!is.na(SECT_COD_SACROIS_NIV5)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values
#assigns the proportion of the main visited statistic rectangle (in maree number) in a year for each vessel











data_vessel[,prop_stat_rect_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main visited statistic rectangle (in fishing weight) in a year for each vessel









data_vessel[,prop_stat_rect_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited statistic rectangle (in fishing productivity) in a year for each vessel













data_vessel[,prop_stat_rect_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited statistic rectangle (in fishing economic value) in a year for each vessel










data_vessel[,prop_stat_rect_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited statistic rectangle (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_stat_rect_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main visited statistic rectangle in a year for each vessel





data_vessel[,prop_stat_rect_effort_year:=value_main_stat_rect_effort_year/effort_year]


 #assigns the proportion of the main visited statistic rectangle (in fishing effort) in a year for each vessel




data_vessel[,value_main_stat_rect_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main visited statistic rectangle in a year for each vessel







data_vessel[,value_main_stat_rect_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main visited statistic rectangle in a year for each vessel











data_vessel[,value_main_stat_rect_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main visited statistic rectangle in a year for each vessel










data_vessel[,value_main_stat_rect_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main visited statistic rectangle in a year for each vessel






#to be noticed: the main fishing areas in terms of fishing weight and economic value were extremely close to the results when considering number of fishing sequence (<2% of difference in 2023, see below, and were therefore not included)



#in the same way the amount of fish and economic value in the main exploited area were highly correlated to the same metrics computed throughout the year without area distinction (R²>0.99, not displayed here)




















#b) Maree scale







data_vessel[,main_stat_rect_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_stat_rect_mean_marees),main_stat_rect_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV5")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of statistic rectangles visited during the trip 
            [!is.na(SECT_COD_SACROIS_NIV5)] #removal of non attributed statistic rectangles
              [,.(.==max(.),SECT_COD_SACROIS_NIV5),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present statistic rectangles) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present statistic rectangles) between marees 
                              [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ] #selection of the first value if there is equality

 #assigns the main visited statistic rectangles (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_stat_rect_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_stat_rect_mean_marees),main_mean_stat_rect_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV5")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of statistic rectangles captured during the trip 
              [!is.na(SECT_COD_SACROIS_NIV5)]
                [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] # average the number of occurrence of statistic rectangles between marees
                  [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]             
                    [V1==T] # select the statistic rectangles with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangles (using mean sequence number between marees) among marees for each vessel










data_vessel[,main_stat_rect_effort_marees:=
  dcast(SACROIS, 
      MAREE_ID+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
      fun.aggregate = function(x) x[1],
      value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
        [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV5)] #then sum of effort within maree for the same statistic rectangles
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV5:=NA]
                [,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, SECT_COD_SACROIS_NIV5, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(SECT_COD_SACROIS_NIV5) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5) ]  
                          [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ] 
 #assigns the main visited statistic rectangles (using fishing effort within marees) among marees for each vessel





data_vessel[,main_mean_stat_rect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV5)] #then sum of effort within maree for the same statistic rectangles
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
                [is.na(V1), SECT_COD_SACROIS_NIV5:=NA]
                  [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                    [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ]
 #assigns the main visited statistic rectangles (using mean fishing effort between marees) among marees for each vessel












data_vessel[,main_stat_rect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                [,.(.==maxna(.),SECT_COD_SACROIS_NIV5),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, SECT_COD_SACROIS_NIV5, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(SECT_COD_SACROIS_NIV5) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5) ]  
                          [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ] 
 #assigns the main visited statistic rectangles (using fishing weight within marees) among marees for each vessel






data_vessel[,main_mean_stat_rect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                    [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangles (using mean fishing weight between marees) among marees for each vessel













data_vessel[,main_stat_rect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                [,.(.==maxna(.),SECT_COD_SACROIS_NIV5),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, SECT_COD_SACROIS_NIV5, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(SECT_COD_SACROIS_NIV5) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5) ]  
                          [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ] 
 #assigns the main visited statistic rectangles (using fishing productivity within marees) among marees for each vessel






data_vessel[,main_mean_stat_rect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                    [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangles (using mean fishing productivity between marees) among marees for each vessel

















data_vessel[,main_stat_rect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                [,.(.==maxna(.),SECT_COD_SACROIS_NIV5),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, SECT_COD_SACROIS_NIV5, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(SECT_COD_SACROIS_NIV5) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5) ]  
                          [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ] 
 #assigns the main visited statistic rectangles (using fishing economic value within marees) among marees for each vessel






data_vessel[,main_mean_stat_rect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                    [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangles (using mean fishing economic value between marees) among marees for each vessel













data_vessel[,main_stat_rect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                [,.(.==maxna(.),SECT_COD_SACROIS_NIV5),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, SECT_COD_SACROIS_NIV5, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(SECT_COD_SACROIS_NIV5) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5) ]  
                          [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ] 
 #assigns the main visited statistic rectangles (using fishing economic productivity within marees) among marees for each vessel






data_vessel[,main_mean_stat_rect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                    [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangles (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main visited statistic rectangles change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_stat_rect_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_stat_rect_mean_marees),prop_stat_rect_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV5")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SECT_COD_SACROIS_NIV5)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main visited statistic rectangles (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_stat_rect_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_stat_rect_mean_marees),prop_mean_stat_rect_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV5")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SECT_COD_SACROIS_NIV5)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main visited statistic rectangles (using mean sequence number between marees) among marees for each vessel











data_vessel[,prop_stat_rect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV5)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
                [!duplicated(MAREE_ID),sum:=dcast(SACROIS,
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sumna,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
                  [,maxna(V1)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                    [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                      [order(NAVS_COD_YEAR)]
                        [,V1] ]
 #assigns the mean proportion of main visited statistic rectangles (using fishing effort within marees) between marees for each vessel





data_vessel[,prop_mean_stat_rect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV5)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
                [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                  [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the proportion of main visited statistic rectangles (using mean fishing effort between marees) among marees for each vessel


















data_vessel[,prop_stat_rect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited statistic rectangles (using fishing weight within marees) between marees for each vessel






data_vessel[,prop_mean_stat_rect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited statistic rectangles (using mean fishing weight between marees) among marees for each vessel















data_vessel[,prop_stat_rect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited statistic rectangles (using fishing productivity within marees) between marees for each vessel






data_vessel[,prop_mean_stat_rect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited statistic rectangles (using mean fishing productivity between marees) among marees for each vessel

















data_vessel[,prop_stat_rect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited statistic rectangles (using fishing economic value within marees) between marees for each vessel






data_vessel[,prop_mean_stat_rect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited statistic rectangles (using mean fishing economic value between marees) among marees for each vessel













data_vessel[,prop_stat_rect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited statistic rectangles (using fishing economic productivity within marees) between marees for each vessel






data_vessel[,prop_mean_stat_rect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited statistic rectangles (using mean fishing economic productivity between marees) among marees for each vessel


















data_vessel[,value_stat_rect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV5)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
                [is.na(V1), SECT_COD_SACROIS_NIV5:=NA]
                  [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_rect_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main statistic rectangles (value repeated for each vessel)
                        [mapply(identical, SECT_COD_SACROIS_NIV5, MAJ), V1] ] #retaining only main statistic rectangles value (identical, allow to test NA==NA)

#assigns the mean fishing effort value for main visited statistic rectangles (using fishing effort within marees) among marees for each vessel





data_vessel[,value_mean_stat_rect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV5)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
                [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing effort value for main visited statistic rectangles (using mean fishing effort between marees) among marees for each vessel














data_vessel[,value_stat_rect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_stat_rect_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, SECT_COD_SACROIS_NIV5, MAJ), V1] ] 

#assigns the mean fishing weight value for main visited statistic rectangles (using fishing weight within marees) among marees for each vessel





data_vessel[,value_mean_stat_rect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing weight value for main visited statistic rectangles (using mean fishing weight between marees) among marees for each vessel













data_vessel[,value_stat_rect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_stat_rect_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, SECT_COD_SACROIS_NIV5, MAJ), V1] ] 

#assigns the mean fishing productivity value for main visited statistic rectangles (using fishing productivity within marees) among marees for each vessel





data_vessel[,value_mean_stat_rect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing productivity value for main visited statistic rectangles (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,value_stat_rect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_stat_rect_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, SECT_COD_SACROIS_NIV5, MAJ), V1] ] 

#assigns the mean fishing economic value for main visited statistic rectangles (using fishing economic value within marees) among marees for each vessel





data_vessel[,value_mean_stat_rect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing economic value for main visited statistic rectangles (using mean fishing economic value between marees) among marees for each vessel










data_vessel[,value_stat_rect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_stat_rect_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, SECT_COD_SACROIS_NIV5, MAJ), V1] ]  

#assigns the mean fishing economic productivity value for main visited statistic rectangles (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,value_mean_stat_rect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing economic productivity value for main visited statistic rectangles (using mean fishing economic productivity between marees) among marees for each vessel





















data_vessel[,sd_stat_rect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV5)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
                [is.na(V1), SECT_COD_SACROIS_NIV5:=NA]
                  [,pop.sd(na.omit(V1)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_rect_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main statistic rectangles (value repeated for each vessel)
                        [mapply(identical, SECT_COD_SACROIS_NIV5, MAJ), V1] ]  #retaining only main statistic rectangles value

#assigns the variation (sd) in fishing effort value for main visited statistic rectangles (using fishing effort within marees) among marees for each vessel





data_vessel[,sd_mean_stat_rect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV5)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
                [,.(mean(V1, na.rm=T),pop.sd(na.omit(V1))),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [ ,.(maxna(V1)==V1,V2,SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main visited statistic rectangles (using mean fishing effort between marees) among marees for each vessel














data_vessel[,sd_stat_rect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_rect_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, SECT_COD_SACROIS_NIV5, MAJ), V1] ] 

#assigns the variation (sd) in fishing weight value for main visited statistic rectangles (using fishing weight within marees) among marees for each vessel





data_vessel[,sd_mean_stat_rect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [ ,.(maxna(V1)==V1,V2,SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main visited statistic rectangles (using mean fishing weight between marees) among marees for each vessel













data_vessel[,sd_stat_rect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_rect_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, SECT_COD_SACROIS_NIV5, MAJ), V1] ] 

#assigns the variation (sd) in fishing productivity value for main visited statistic rectangles (using fishing productivity within marees) among marees for each vessel





data_vessel[,sd_mean_stat_rect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [ ,.(maxna(V1)==V1,V2,SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main visited statistic rectangles (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,sd_stat_rect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_rect_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, SECT_COD_SACROIS_NIV5, MAJ), V1] ] 

#assigns the variation (sd) in fishing economic value for main visited statistic rectangles (using fishing economic value within marees) among marees for each vessel





data_vessel[,sd_mean_stat_rect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [ ,.(maxna(V1)==V1,V2,SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main visited statistic rectangles (using mean fishing economic value between marees) among marees for each vessel










data_vessel[,sd_stat_rect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_rect_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, SECT_COD_SACROIS_NIV5, MAJ), V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main visited statistic rectangles (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,sd_mean_stat_rect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)] 
                  [ ,.(maxna(V1)==V1,V2,SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main visited statistic rectangles (using mean fishing economic productivity between marees) among marees for each vessel



















#c) Sequence scale









data_vessel[,main_mean_stat_rect_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
            [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangles using mean fishing effort between sequences for each vessel












data_vessel[,main_mean_stat_rect_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
            [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ] #assigns the main visited statistic rectangles using mean fishing weight between fishing sequences for each vessel














data_vessel[,main_mean_stat_rect_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
            [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangles using mean fishing productivity between sequences for each vessel

















data_vessel[,main_mean_stat_rect_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
            [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ] #assigns the main visited statistic rectangles using mean fishing economic value between fishing sequences for each vessel














data_vessel[,main_mean_stat_rect_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
            [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV5)]
                [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV5] ]
#assigns the main visited statistic rectangles using mean fishing economic productivity between sequences for each vessel




















data_vessel[,prop_mean_stat_rect_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited statistic rectangles (using mean fishing effort between sequence) among sequence for each vessel










data_vessel[,prop_mean_stat_rect_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the proportion of main visited statistic rectangles (using mean fishing weight between sequence) among sequence for each vessel













data_vessel[,prop_mean_stat_rect_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited statistic rectangles (using mean fishing productivity between sequence) among sequence for each vessel












data_vessel[,prop_mean_stat_rect_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the proportion of main visited statistic rectangles (using mean fishing economic value between sequence) among sequence for each vessel








data_vessel[,prop_mean_stat_rect_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited statistic rectangles (using mean fishing economic productivity between sequence) among sequence for each vessel
















data_vessel[,value_mean_stat_rect_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]  #assigns the fishing effort value of main visited statistic rectangles using mean fishing effort between fishing sequences for each vessel














data_vessel[,value_mean_stat_rect_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the fishing weight value of main visited statistic rectangles using mean fishing weight between fishing sequences for each vessel












data_vessel[,value_mean_stat_rect_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ] #assigns the fishing effort value of main visited statistic rectangles using mean fishing productivity between fishing sequences for each vessel








data_vessel[,value_mean_stat_rect_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the fishing economic value of main visited statistic rectangles using mean fishing economic value between fishing sequences for each vessel












data_vessel[,value_mean_stat_rect_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ] #assigns the fishing effort value of main visited statistic rectangles using mean fishing economic productivity between fishing sequences for each vessel




















data_vessel[,sd_mean_stat_rect_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV5:=NA]
                [ ,.(maxna(V1)==V1, V2, SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing effort value of main visited statistic rectangles using mean fishing effort between fishing sequences for each vessel










data_vessel[,sd_mean_stat_rect_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV5:=NA]
                [ ,.(maxna(V1)==V1, V2, SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]   #assigns the variation (sd) in fishing weight value of main visited statistic rectangles using mean fishing weight between fishing sequences for each vessel











data_vessel[,sd_mean_stat_rect_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV5:=NA]
                [ ,.(maxna(V1)==V1, V2, SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing productivity value of main visited statistic rectangles using mean fishing productivity between fishing sequences for each vessel
















data_vessel[,sd_mean_stat_rect_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV5:=NA]
                [ ,.(maxna(V1)==V1, V2, SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]  #assigns the variation (sd) in fishing economic value of main visited statistic rectangles using mean fishing economic value between fishing sequences for each vessel













data_vessel[,sd_mean_stat_rect_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV5~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5)]
            [is.na(SECT_COD_SACROIS_NIV5), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV5:=NA]
                [ ,.(maxna(V1)==V1, V2, SECT_COD_SACROIS_NIV5),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]  #assigns the variation (sd) in fishing economic productivity value of main visited statistic rectangles using mean fishing economic productivity between fishing sequences for each vessel












#To be noticed: removing NA values prior the variable computation rather than handling them directly in our codes was retained as it was slightly more efficient to do so in this case (contrary to treating NAs in the code), assessed through microbenchmarking:

# microbenchmark(Prior={data_vessel$nb_stat_rect=NA
# data_vessel[!is.na(data_vessel$main_stat_rect),]$nb_stat_rect=
#     tapply(SACROIS[!is.na(SACROIS$SECT_COD_SACROIS_NIV5),]$SECT_COD_SACROIS_NIV5, SACROIS[!is.na(SACROIS$SECT_COD_SACROIS_NIV5),]$NAVS_COD,
#            function(x) length(table(x) ) )},
# Within={data_vessel$nb_stat_rect=
#                    as.numeric(
#                        tapply(SACROIS$SECT_COD_SACROIS_NIV5, SACROIS$NAVS_COD,
#                               function(x)
#                                   lengthna(table(x) ) ) )})
# 
# 
# 
# 
# microbenchmark(Prior={data_vessel$main_stat_rect=NA; 
# data_vessel[!isallNA,]$main_stat_rect=
#     as.character(
#         tapply(SACROIS[!duplicated(SACROIS$SEQ_ID) & !is.na(SACROIS$SECT_COD_SACROIS_NIV5),]$SECT_COD_SACROIS_NIV5, SACROIS[!duplicated(SACROIS$SEQ_ID) & !is.na(SACROIS$SECT_COD_SACROIS_NIV5),]$NAVS_COD, 
#                function(x) {
#                    y=table(x)
#                    names(y[y==max(y)])[1] } ) ) },
# Within={data_vessel$main_stat_rect=
#     as.character(
#         tapply(SACROIS[!duplicated(SACROIS$SEQ_ID),]$SECT_COD_SACROIS_NIV5, SACROIS[!duplicated(SACROIS$SEQ_ID),]$NAVS_COD, 
#                function(x) {
#                    y=table(x)
#                    names(y[y==max(c(y,0))])[1] } ) );
# data_vessel[data_vessel$main_stat_rect=="NULL",]$main_stat_rect=NA})
# 
#  #in Prior code: a 0 is added in the vector submitted to the max function to avoid warning message (because max(table(c(NA,NA,NA))) return -Inf with a warning message, while here 0 values are attributed in this case, and as there is no 0 values possible in the y vector finally return NULL values)







#the different proxies for the main exploited statistic rectangle often differs from each others (~5-10% of cases, except when comparing economic and weight metrics: ~3-4% of cases in 2023)








#the different proxies for the proportion of activity in the main statistic rectangle often differs from each others (R² ~0.8-0.9, except when comparing economic and weight metrics: R²>0.97, in 2023)





# To be noticed: all the variable using weight, economic value and fishing effort are to be considered cautiously as there is an important amount of missing data for all these metrics (20-30% of all data in 2023), with a non-neutral distribution (see previous sections)


```



######Frequently associated rectangles




```{r spatial variables - Fishing areas - Statistic rectangles (associations)}



#2) Specific major areas








basket=tapply(SACROIS$SECT_COD_SACROIS_NIV5, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$SECT_COD_SACROIS_NIV5, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of visited statistical rectangle (all statistical rectangle visited at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


used_stat_rect=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all engine implied in a relevant association


used_stat_rect= str_extract(used_stat_rect, pattern="(?<=\\{)(.*)(?=\\})" )



#there is no significant association of statistical rectangles ! Yet, there is some associations close to the fixed threshold (particularly when considering support, i.e. proportion of population concerned, for which a switch from 10 to 5% change results a lot), these threshold are subjective and can be modified according to analyses needs ! The associations close to threshold imply adjacent areas of activity and are probably useful only to distinguish precise strategies (subfleet or subsubfleet classifications)



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()











```

#####Statistic subrectangles

```{r spatial variables - Fishing areas - Statistic subrectangles}








SACROIS[SECT_COD_SACROIS_NIV6=="", SECT_COD_SACROIS_NIV6:=NA]




  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "SECT_COD_SACROIS_NIV6")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 27% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "SECT_COD_SACROIS_NIV6")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on visited statistic rectangles, many vessels (67% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "SECT_COD_SACROIS_NIV6")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "SECT_COD_SACROIS_NIV6")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 41% +/- 34 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(SECT_COD_SACROIS_NIV6),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(SECT_COD_SACROIS_NIV6),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred



# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$SECT_COD_SACROIS_NIV6)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier (dragues, casier... in 2023) are significantly associated to the presence or not of missing data on statistic subrectangle 








#to be noticed: at the statistic subrectangle  division the information is missing for 35% of vessels, these metrics are therefore strongly inacurate (remove all vessels fishing only offshore ?), but it still maybe useful to better classify fishing fleet practicing near to the shore (for subfleet in particular) ?







#1) Main exploited area






data_vessel[,value_nb_stat_subrect_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),
          value.var = "SECT_COD_SACROIS_NIV6")[,.] ]  #assigns how many statistic subrectangles are visited within a year






data_vessel[,value_nb_stat_subrect_mean_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "SECT_COD_SACROIS_NIV6")   
          [,mean(., na.rm=T),by = 
              SACROIS [order(MAREE_ID)] [!duplicated(MAREE_ID),NAVS_COD_YEAR]] 
            [order(SACROIS)] 
              [,V1] ] 
# compute the average number of visited statistic subrectangle per marees for each vessel 









data_vessel[,nb_stat_subrect_sd_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "SECT_COD_SACROIS_NIV6")
          [,pop.sd(na.omit(.)),by = 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR]]
            [order(SACROIS)]
              [,V1] ] 
 # variation in number of visited statistic subrectangle for each vessels across marees




#a) Year scale







data_vessel[,main_stat_subrect_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_stat_subrect_year),main_stat_subrect_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], #to not count several time the same fishing sequence (where engine use is constant) 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV6")
          [!is.na(SECT_COD_SACROIS_NIV6)]
            [,.(.==max(.),SECT_COD_SACROIS_NIV6),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV6] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main visited statistic subrectangle (in marees number) in a year for each vessel








#warning: important amount of vessels with missing data for the subsequent metrics




data_vessel[,main_stat_subrect_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA] #ensure that cases were NAs are distributed on each half of the two columns are taken into account
              [,.(.==max(c(0,.), na.rm=T),SECT_COD_SACROIS_NIV6),by = NAVS_COD_YEAR] #return NA==0 => NA when only NA are present, without warning message
                [V1==T | is.na(V1)] #select NA cases too
                  [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] #distribute NAs at the end of each vessels' ID => they are selected only if there is exclusively NA values
                    [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangle (in fishing effort) in a year for each vessel



#the former code should be generalized because it better accounts for NA value presence !!!!!!!!!!








data_vessel[,main_stat_subrect_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),SECT_COD_SACROIS_NIV6),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangle (in fishing weight) in a year for each vessel







data_vessel[,main_stat_subrect_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),SECT_COD_SACROIS_NIV6),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangle (in fishing productivity) in a year for each vessel







data_vessel[,main_stat_subrect_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),SECT_COD_SACROIS_NIV6),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV6] ]
 #assigns the main visited statistic subrectangle (in fishing economic value) in a year for each vessel






data_vessel[,main_stat_subrect_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),SECT_COD_SACROIS_NIV6),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangle (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_stat_subrect_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_stat_subrect_year),prop_stat_subrect_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV6")
          [!is.na(SECT_COD_SACROIS_NIV6)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values
#assigns the proportion of the main visited statistic subrectangle (in maree number) in a year for each vessel











data_vessel[,prop_stat_subrect_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main visited statistic subrectangle (in fishing weight) in a year for each vessel









data_vessel[,prop_stat_subrect_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited statistic subrectangle (in fishing productivity) in a year for each vessel













data_vessel[,prop_stat_subrect_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited statistic subrectangle (in fishing economic value) in a year for each vessel










data_vessel[,prop_stat_subrect_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited statistic subrectangle (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_stat_subrect_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main visited statistic subrectangle in a year for each vessel





data_vessel[,prop_stat_subrect_effort_year:=value_main_stat_subrect_effort_year/effort_year]


 #assigns the proportion of the main visited statistic subrectangle (in fishing effort) in a year for each vessel




data_vessel[,value_main_stat_subrect_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main visited statistic subrectangle in a year for each vessel







data_vessel[,value_main_stat_subrect_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main visited statistic subrectangle in a year for each vessel











data_vessel[,value_main_stat_subrect_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main visited statistic subrectangle in a year for each vessel










data_vessel[,value_main_stat_subrect_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main visited statistic subrectangle in a year for each vessel


















#b) Maree scale







data_vessel[,main_stat_subrect_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_stat_subrect_mean_marees),main_stat_subrect_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV6")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of statistic subrectangles visited during the trip 
            [!is.na(SECT_COD_SACROIS_NIV6)] #removal of non attributed statistic subrectangles
              [,.(.==max(.),SECT_COD_SACROIS_NIV6),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present statistic subrectangles) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present statistic subrectangles) between marees 
                              [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ] #selection of the first value if there is equality

 #assigns the main visited statistic subrectangles (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_stat_subrect_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_stat_subrect_mean_marees),main_mean_stat_subrect_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV6")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of statistic subrectangles captured during the trip 
              [!is.na(SECT_COD_SACROIS_NIV6)]
                [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] # average the number of occurrence of statistic subrectangles between marees
                  [ ,.(V1==max(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]             
                    [V1==T] # select the statistic subrectangles with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangles (using mean sequence number between marees) among marees for each vessel










data_vessel[,main_stat_subrect_effort_marees:=
  dcast(SACROIS, 
      MAREE_ID+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
      fun.aggregate = function(x) x[1],
      value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
        [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV6)] #then sum of effort within maree for the same statistic subrectangles
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV6:=NA]
                [,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, SECT_COD_SACROIS_NIV6, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(SECT_COD_SACROIS_NIV6) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6) ]  
                          [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ] 
 #assigns the main visited statistic subrectangles (using fishing effort within marees) among marees for each vessel





data_vessel[,main_mean_stat_subrect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV6)] #then sum of effort within maree for the same statistic subrectangles
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
                [is.na(V1), SECT_COD_SACROIS_NIV6:=NA]
                  [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                    [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ]
 #assigns the main visited statistic subrectangles (using mean fishing effort between marees) among marees for each vessel












data_vessel[,main_stat_subrect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                [,.(.==maxna(.),SECT_COD_SACROIS_NIV6),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, SECT_COD_SACROIS_NIV6, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(SECT_COD_SACROIS_NIV6) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6) ]  
                          [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ] 
 #assigns the main visited statistic subrectangles (using fishing weight within marees) among marees for each vessel






data_vessel[,main_mean_stat_subrect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                    [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangles (using mean fishing weight between marees) among marees for each vessel













data_vessel[,main_stat_subrect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                [,.(.==maxna(.),SECT_COD_SACROIS_NIV6),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, SECT_COD_SACROIS_NIV6, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(SECT_COD_SACROIS_NIV6) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6) ]  
                          [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ] 
 #assigns the main visited statistic subrectangles (using fishing productivity within marees) among marees for each vessel






data_vessel[,main_mean_stat_subrect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                    [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangles (using mean fishing productivity between marees) among marees for each vessel

















data_vessel[,main_stat_subrect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                [,.(.==maxna(.),SECT_COD_SACROIS_NIV6),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, SECT_COD_SACROIS_NIV6, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(SECT_COD_SACROIS_NIV6) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6) ]  
                          [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ] 
 #assigns the main visited statistic subrectangles (using fishing economic value within marees) among marees for each vessel






data_vessel[,main_mean_stat_subrect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                    [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangles (using mean fishing economic value between marees) among marees for each vessel













data_vessel[,main_stat_subrect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                [,.(.==maxna(.),SECT_COD_SACROIS_NIV6),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, SECT_COD_SACROIS_NIV6, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(SECT_COD_SACROIS_NIV6) ,by= .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6) ]  
                          [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ] 
 #assigns the main visited statistic subrectangles (using fishing economic productivity within marees) among marees for each vessel






data_vessel[,main_mean_stat_subrect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                    [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangles (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main visited statistic subrectangles change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_stat_subrect_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_stat_subrect_mean_marees),prop_stat_subrect_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV6")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(SECT_COD_SACROIS_NIV6)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main visited statistic subrectangles (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_stat_subrect_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_stat_subrect_mean_marees),prop_mean_stat_subrect_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = length,
        value.var = "SECT_COD_SACROIS_NIV6")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(SECT_COD_SACROIS_NIV6)] 
              [,mean(.),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main visited statistic subrectangles (using mean sequence number between marees) among marees for each vessel











data_vessel[,prop_stat_subrect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV6)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
                [!duplicated(MAREE_ID),sum:=dcast(SACROIS,
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sumna,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
                  [,maxna(V1)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                    [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                      [order(NAVS_COD_YEAR)]
                        [,V1] ]
 #assigns the mean proportion of main visited statistic subrectangles (using fishing effort within marees) between marees for each vessel





data_vessel[,prop_mean_stat_subrect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV6)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
                [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                  [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the proportion of main visited statistic subrectangles (using mean fishing effort between marees) among marees for each vessel


















data_vessel[,prop_stat_subrect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited statistic subrectangles (using fishing weight within marees) between marees for each vessel






data_vessel[,prop_mean_stat_subrect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited statistic subrectangles (using mean fishing weight between marees) among marees for each vessel















data_vessel[,prop_stat_subrect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited statistic subrectangles (using fishing productivity within marees) between marees for each vessel






data_vessel[,prop_mean_stat_subrect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited statistic subrectangles (using mean fishing productivity between marees) among marees for each vessel

















data_vessel[,prop_stat_subrect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited statistic subrectangles (using fishing economic value within marees) between marees for each vessel






data_vessel[,prop_mean_stat_subrect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited statistic subrectangles (using mean fishing economic value between marees) among marees for each vessel













data_vessel[,prop_stat_subrect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited statistic subrectangles (using fishing economic productivity within marees) between marees for each vessel






data_vessel[,prop_mean_stat_subrect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited statistic subrectangles (using mean fishing economic productivity between marees) among marees for each vessel


















data_vessel[,value_stat_subrect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV6)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
                [is.na(V1), SECT_COD_SACROIS_NIV6:=NA]
                  [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_subrect_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main statistic subrectangles (value repeated for each vessel)
                        [mapply(identical, SECT_COD_SACROIS_NIV6, MAJ), V1] ] #retaining only main statistic subrectangles value (identical, allow to test NA==NA)

#assigns the mean fishing effort value for main visited statistic subrectangles (using fishing effort within marees) among marees for each vessel





data_vessel[,value_mean_stat_subrect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV6)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
                [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing effort value for main visited statistic subrectangles (using mean fishing effort between marees) among marees for each vessel














data_vessel[,value_stat_subrect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_stat_subrect_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, SECT_COD_SACROIS_NIV6, MAJ), V1] ] 

#assigns the mean fishing weight value for main visited statistic subrectangles (using fishing weight within marees) among marees for each vessel





data_vessel[,value_mean_stat_subrect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing weight value for main visited statistic subrectangles (using mean fishing weight between marees) among marees for each vessel













data_vessel[,value_stat_subrect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_stat_subrect_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, SECT_COD_SACROIS_NIV6, MAJ), V1] ] 

#assigns the mean fishing productivity value for main visited statistic subrectangles (using fishing productivity within marees) among marees for each vessel





data_vessel[,value_mean_stat_subrect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing productivity value for main visited statistic subrectangles (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,value_stat_subrect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_stat_subrect_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, SECT_COD_SACROIS_NIV6, MAJ), V1] ] 

#assigns the mean fishing economic value for main visited statistic subrectangles (using fishing economic value within marees) among marees for each vessel





data_vessel[,value_mean_stat_subrect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing economic value for main visited statistic subrectangles (using mean fishing economic value between marees) among marees for each vessel










data_vessel[,value_stat_subrect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
              [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_stat_subrect_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, SECT_COD_SACROIS_NIV6, MAJ), V1] ]  

#assigns the mean fishing economic productivity value for main visited statistic subrectangles (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,value_mean_stat_subrect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing economic productivity value for main visited statistic subrectangles (using mean fishing economic productivity between marees) among marees for each vessel





















data_vessel[,sd_stat_subrect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV6)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
                [is.na(V1), SECT_COD_SACROIS_NIV6:=NA]
                  [,pop.sd(na.omit(V1)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_subrect_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main statistic subrectangles (value repeated for each vessel)
                        [mapply(identical, SECT_COD_SACROIS_NIV6, MAJ), V1] ]  #retaining only main statistic subrectangles value

#assigns the variation (sd) in fishing effort value for main visited statistic subrectangles (using fishing effort within marees) among marees for each vessel





data_vessel[,sd_mean_stat_subrect_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,SECT_COD_SACROIS_NIV6)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
                [,.(mean(V1, na.rm=T),pop.sd(na.omit(V1))),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [ ,.(maxna(V1)==V1,V2,SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main visited statistic subrectangles (using mean fishing effort between marees) among marees for each vessel














data_vessel[,sd_stat_subrect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_subrect_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, SECT_COD_SACROIS_NIV6, MAJ), V1] ] 

#assigns the variation (sd) in fishing weight value for main visited statistic subrectangles (using fishing weight within marees) among marees for each vessel





data_vessel[,sd_mean_stat_subrect_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [ ,.(maxna(V1)==V1,V2,SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main visited statistic subrectangles (using mean fishing weight between marees) among marees for each vessel













data_vessel[,sd_stat_subrect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_subrect_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, SECT_COD_SACROIS_NIV6, MAJ), V1] ] 

#assigns the variation (sd) in fishing productivity value for main visited statistic subrectangles (using fishing productivity within marees) among marees for each vessel





data_vessel[,sd_mean_stat_subrect_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [ ,.(maxna(V1)==V1,V2,SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main visited statistic subrectangles (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,sd_stat_subrect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_subrect_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, SECT_COD_SACROIS_NIV6, MAJ), V1] ] 

#assigns the variation (sd) in fishing economic value for main visited statistic subrectangles (using fishing economic value within marees) among marees for each vessel





data_vessel[,sd_mean_stat_subrect_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [ ,.(maxna(V1)==V1,V2,SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main visited statistic subrectangles (using mean fishing economic value between marees) among marees for each vessel










data_vessel[,sd_stat_subrect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_stat_subrect_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, SECT_COD_SACROIS_NIV6, MAJ), V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main visited statistic subrectangles (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,sd_mean_stat_subrect_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)] 
                  [ ,.(maxna(V1)==V1,V2,SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main visited statistic subrectangles (using mean fishing economic productivity between marees) among marees for each vessel



















#c) Sequence scale









data_vessel[,main_mean_stat_subrect_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
            [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangles using mean fishing effort between sequences for each vessel












data_vessel[,main_mean_stat_subrect_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
            [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ] #assigns the main visited statistic subrectangles using mean fishing weight between fishing sequences for each vessel














data_vessel[,main_mean_stat_subrect_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
            [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangles using mean fishing productivity between sequences for each vessel

















data_vessel[,main_mean_stat_subrect_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
            [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ] #assigns the main visited statistic subrectangles using mean fishing economic value between fishing sequences for each vessel














data_vessel[,main_mean_stat_subrect_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(SECT_COD_SACROIS_NIV6), .:=NA]
            [is.na(.), SECT_COD_SACROIS_NIV6:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,SECT_COD_SACROIS_NIV6)]
                [ ,.(V1==maxna(V1),SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), SECT_COD_SACROIS_NIV6] ]
#assigns the main visited statistic subrectangles using mean fishing economic productivity between sequences for each vessel




















data_vessel[,prop_mean_stat_subrect_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited statistic subrectangles (using mean fishing effort between sequence) among sequence for each vessel










data_vessel[,prop_mean_stat_subrect_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the proportion of main visited statistic subrectangles (using mean fishing weight between sequence) among sequence for each vessel













data_vessel[,prop_mean_stat_subrect_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited statistic subrectangles (using mean fishing productivity between sequence) among sequence for each vessel












data_vessel[,prop_mean_stat_subrect_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the proportion of main visited statistic subrectangles (using mean fishing economic value between sequence) among sequence for each vessel








data_vessel[,prop_mean_stat_subrect_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited statistic subrectangles (using mean fishing economic productivity between sequence) among sequence for each vessel
















data_vessel[,value_mean_stat_subrect_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]  #assigns the fishing effort value of main visited statistic subrectangles using mean fishing effort between fishing sequences for each vessel














data_vessel[,value_mean_stat_subrect_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the fishing weight value of main visited statistic subrectangles using mean fishing weight between fishing sequences for each vessel












data_vessel[,value_mean_stat_subrect_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ] #assigns the fishing effort value of main visited statistic subrectangles using mean fishing productivity between fishing sequences for each vessel








data_vessel[,value_mean_stat_subrect_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the fishing economic value of main visited statistic subrectangles using mean fishing economic value between fishing sequences for each vessel












data_vessel[,value_mean_stat_subrect_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ] #assigns the fishing effort value of main visited statistic subrectangles using mean fishing economic productivity between fishing sequences for each vessel




















data_vessel[,sd_mean_stat_subrect_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SECT_COD_SACROIS_NIV6+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV6:=NA]
                [ ,.(maxna(V1)==V1, V2, SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing effort value of main visited statistic subrectangles using mean fishing effort between fishing sequences for each vessel










data_vessel[,sd_mean_stat_subrect_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV6:=NA]
                [ ,.(maxna(V1)==V1, V2, SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]   #assigns the variation (sd) in fishing weight value of main visited statistic subrectangles using mean fishing weight between fishing sequences for each vessel











data_vessel[,sd_mean_stat_subrect_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV6:=NA]
                [ ,.(maxna(V1)==V1, V2, SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing productivity value of main visited statistic subrectangles using mean fishing productivity between fishing sequences for each vessel
















data_vessel[,sd_mean_stat_subrect_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV6:=NA]
                [ ,.(maxna(V1)==V1, V2, SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]  #assigns the variation (sd) in fishing economic value of main visited statistic subrectangles using mean fishing economic value between fishing sequences for each vessel













data_vessel[,sd_mean_stat_subrect_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+SECT_COD_SACROIS_NIV6~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6)]
            [is.na(SECT_COD_SACROIS_NIV6), V1:=NA]
              [is.na(V1), SECT_COD_SACROIS_NIV6:=NA]
                [ ,.(maxna(V1)==V1, V2, SECT_COD_SACROIS_NIV6),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV6, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]  #assigns the variation (sd) in fishing economic productivity value of main visited statistic subrectangles using mean fishing economic productivity between fishing sequences for each vessel










```




######Frequently associated subrectangles




```{r r spatial variables - Fishing areas - Statistic subrectangles (associations)}




#2) Specific major areas











basket=tapply(SACROIS$SECT_COD_SACROIS_NIV6, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$SECT_COD_SACROIS_NIV6, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of visited statistical rectangle (all statistical rectangle visited at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


used_stat_subrect=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all engine implied in a relevant association


used_stat_subrect= str_extract(used_stat_subrect, pattern="(?<=\\{)(.*)(?=\\})" )



#there is no significant association of statistic subrectangles ! Yet, there is some associations close to the fixed threshold (particularly when considering support, i.e. proportion of population concerned, for which a switch from 10 to 5% change results a lot), these threshold are subjective and can be modified according to analyses needs ! The associations close to threshold imply adjacent areas of activity and are probably useful only to distinguish precise strategies (subfleet or subsubfleet classifications)



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()








```

#####ZEE area

```{r spatial variables - Fishing areas - ZEE area}




SACROIS[ZEE_COD=="", ZEE_COD:=NA]



  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "ZEE_COD")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 0.2% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "ZEE_COD")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on visited zee areas, few vessels (0.3% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "ZEE_COD")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "ZEE_COD")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 14% +/- 20 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(ZEE_COD),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(ZEE_COD),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred


# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$ZEE_COD)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we observe only a few metiers significantly associated to the presence or not of missing data on zee


# Missing data are here anecdotal and should not cause major bias in the data analysis (but maybe it is worthy to check for effect on classification output)










#As ZEE should not vary much inside maree we will only consider year scale and mean across sequence (taking better account of NAs)







#1) Main exploited area






data_vessel[,value_nb_zee_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),
          value.var = "ZEE_COD")[,.] ]  #assigns how many ZEE areas are visited within a year







data_vessel[,value_nb_zee_mean_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ZEE_COD")   
          [,mean(., na.rm=T),by = 
              SACROIS [order(MAREE_ID)] [!duplicated(MAREE_ID),NAVS_COD_YEAR]] 
            [order(SACROIS)] 
              [,V1] ] 
# compute the average number of visited zee area per marees for each vessel 









data_vessel[,nb_zee_sd_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "ZEE_COD")
          [,pop.sd(na.omit(.)),by = 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR]]
            [order(SACROIS)]
              [,V1] ] 
 # variation in number of visited zee area for each vessels across marees









#a) Year scale







data_vessel[,main_zee_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_zee_year),main_zee_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], #to not count several time the same fishing sequence (where engine use is constant) 
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = length,
        value.var = "ZEE_COD")
          [!is.na(ZEE_COD)]
            [,.(.==max(.),ZEE_COD),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),ZEE_COD] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main visited ZEE area (in marees number) in a year for each vessel








#warning: important amount of vessels with missing data for the subsequent metrics




data_vessel[,main_zee_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(.), ZEE_COD:=NA]
            [is.na(ZEE_COD), .:=NA] #ensure that cases were NAs are distributed on each half of the two columns are taken into account
              [,.(.==max(c(0,.), na.rm=T),ZEE_COD),by = NAVS_COD_YEAR] #return NA==0 => NA when only NA are present, without warning message
                [V1==T | is.na(V1)] #select NA cases too
                  [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] #distribute NAs at the end of each vessels' ID => they are selected only if there is exclusively NA values
                    [!duplicated(NAVS_COD_YEAR),ZEE_COD] ]
#assigns the main visited ZEE area (in fishing effort) in a year for each vessel



#the former code should be generalized because it better accounts for NA value presence !!!!!!!!!!








data_vessel[,main_zee_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(.), ZEE_COD:=NA]
            [is.na(ZEE_COD), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),ZEE_COD),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),ZEE_COD] ]
#assigns the main visited ZEE area (in fishing weight) in a year for each vessel







data_vessel[,main_zee_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(.), ZEE_COD:=NA]
            [is.na(ZEE_COD), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),ZEE_COD),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),ZEE_COD] ]
#assigns the main visited ZEE area (in fishing productivity) in a year for each vessel







data_vessel[,main_zee_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(.), ZEE_COD:=NA]
            [is.na(ZEE_COD), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),ZEE_COD),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),ZEE_COD] ]
 #assigns the main visited ZEE area (in fishing economic value) in a year for each vessel






data_vessel[,main_zee_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(.), ZEE_COD:=NA]
            [is.na(ZEE_COD), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),ZEE_COD),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),ZEE_COD] ]
#assigns the main visited ZEE area (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_zee_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_zee_year),prop_zee_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = length,
        value.var = "ZEE_COD")
          [!is.na(ZEE_COD)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values
#assigns the proportion of the main visited ZEE area (in maree number) in a year for each vessel











data_vessel[,prop_zee_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(ZEE_COD), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main visited ZEE area (in fishing weight) in a year for each vessel









data_vessel[,prop_zee_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(ZEE_COD), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited ZEE area (in fishing productivity) in a year for each vessel













data_vessel[,prop_zee_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(ZEE_COD), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited ZEE area (in fishing economic value) in a year for each vessel










data_vessel[,prop_zee_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(ZEE_COD), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited ZEE area (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_zee_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(ZEE_COD), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main visited ZEE area in a year for each vessel





data_vessel[,prop_zee_effort_year:=value_main_zee_effort_year/effort_year]


 #assigns the proportion of the main visited ZEE area (in fishing effort) in a year for each vessel




data_vessel[,value_main_zee_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(ZEE_COD), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main visited ZEE area in a year for each vessel







data_vessel[,value_main_zee_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(ZEE_COD), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main visited ZEE area in a year for each vessel











data_vessel[,value_main_zee_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(ZEE_COD), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main visited ZEE area in a year for each vessel










data_vessel[,value_main_zee_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(ZEE_COD), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main visited ZEE area in a year for each vessel


















#b) Maree scale







data_vessel[,main_zee_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_zee_mean_marees),main_zee_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = length,
        value.var = "ZEE_COD")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of ZEE areas visited during the trip 
            [!is.na(ZEE_COD)] #removal of non attributed ZEE areas
              [,.(.==max(.),ZEE_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present ZEE areas) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,ZEE_COD) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),ZEE_COD),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present ZEE areas) between marees 
                              [!duplicated(NAVS_COD_YEAR), ZEE_COD] ] #selection of the first value if there is equality

 #assigns the main visited ZEE areas (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_zee_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_zee_mean_marees),main_mean_zee_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = length,
        value.var = "ZEE_COD")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of ZEE areas captured during the trip 
              [!is.na(ZEE_COD)]
                [,mean(.),by = .(NAVS_COD_YEAR,ZEE_COD)] # average the number of occurrence of ZEE areas between marees
                  [ ,.(V1==max(V1),ZEE_COD),by= NAVS_COD_YEAR]             
                    [V1==T] # select the ZEE areas with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), ZEE_COD] ]
#assigns the main visited ZEE areas (using mean sequence number between marees) among marees for each vessel










data_vessel[,main_zee_effort_marees:=
  dcast(SACROIS, 
      MAREE_ID+ZEE_COD+SEQ_ID~., 
      fun.aggregate = function(x) x[1],
      value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
        [,sumna(.), by= .(MAREE_ID,ZEE_COD)] #then sum of effort within maree for the same ZEE areas
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(ZEE_COD), V1:=NA]
              [is.na(V1), ZEE_COD:=NA]
                [,.(V1==maxna(V1),ZEE_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, ZEE_COD, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(ZEE_COD) ,by= .(NAVS_COD_YEAR,ZEE_COD) ]  
                          [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), ZEE_COD] ] 
 #assigns the main visited ZEE areas (using fishing effort within marees) among marees for each vessel





data_vessel[,main_mean_zee_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ZEE_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(MAREE_ID,ZEE_COD)] #then sum of effort within maree for the same ZEE areas
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(ZEE_COD), V1:=NA]
                [is.na(V1), ZEE_COD:=NA]
                  [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                    [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), ZEE_COD] ]
 #assigns the main visited ZEE areas (using mean fishing effort between marees) among marees for each vessel












data_vessel[,main_zee_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(ZEE_COD), .:=NA]
              [is.na(.), ZEE_COD:=NA]
                [,.(.==maxna(.),ZEE_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, ZEE_COD, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(ZEE_COD) ,by= .(NAVS_COD_YEAR,ZEE_COD) ]  
                          [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), ZEE_COD] ] 
 #assigns the main visited ZEE areas (using fishing weight within marees) among marees for each vessel






data_vessel[,main_mean_zee_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(ZEE_COD), .:=NA]
                [is.na(.), ZEE_COD:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                    [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), ZEE_COD] ]
#assigns the main visited ZEE areas (using mean fishing weight between marees) among marees for each vessel













data_vessel[,main_zee_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(ZEE_COD), .:=NA]
              [is.na(.), ZEE_COD:=NA]
                [,.(.==maxna(.),ZEE_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, ZEE_COD, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(ZEE_COD) ,by= .(NAVS_COD_YEAR,ZEE_COD) ]  
                          [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), ZEE_COD] ] 
 #assigns the main visited ZEE areas (using fishing productivity within marees) among marees for each vessel






data_vessel[,main_mean_zee_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(ZEE_COD), .:=NA]
                [is.na(.), ZEE_COD:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                    [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), ZEE_COD] ]
#assigns the main visited ZEE areas (using mean fishing productivity between marees) among marees for each vessel

















data_vessel[,main_zee_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(ZEE_COD), .:=NA]
              [is.na(.), ZEE_COD:=NA]
                [,.(.==maxna(.),ZEE_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, ZEE_COD, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(ZEE_COD) ,by= .(NAVS_COD_YEAR,ZEE_COD) ]  
                          [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), ZEE_COD] ] 
 #assigns the main visited ZEE areas (using fishing economic value within marees) among marees for each vessel






data_vessel[,main_mean_zee_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(ZEE_COD), .:=NA]
                [is.na(.), ZEE_COD:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                    [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), ZEE_COD] ]
#assigns the main visited ZEE areas (using mean fishing economic value between marees) among marees for each vessel













data_vessel[,main_zee_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(ZEE_COD), .:=NA]
              [is.na(.), ZEE_COD:=NA]
                [,.(.==maxna(.),ZEE_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, ZEE_COD, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(ZEE_COD) ,by= .(NAVS_COD_YEAR,ZEE_COD) ]  
                          [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), ZEE_COD] ] 
 #assigns the main visited ZEE areas (using fishing economic productivity within marees) among marees for each vessel






data_vessel[,main_mean_zee_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(ZEE_COD), .:=NA]
                [is.na(.), ZEE_COD:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                    [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), ZEE_COD] ]
#assigns the main visited ZEE areas (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main visited ZEE areas change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_zee_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_zee_mean_marees),prop_zee_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = length,
        value.var = "ZEE_COD")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(ZEE_COD)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main visited ZEE areas (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_zee_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_zee_mean_marees),prop_mean_zee_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = length,
        value.var = "ZEE_COD")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(ZEE_COD)] 
              [,mean(.),by = .(NAVS_COD_YEAR,ZEE_COD)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main visited ZEE areas (using mean sequence number between marees) among marees for each vessel











data_vessel[,prop_zee_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ZEE_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ZEE_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(ZEE_COD), V1:=NA]
                [!duplicated(MAREE_ID),sum:=dcast(SACROIS,
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sumna,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
                  [,maxna(V1)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                    [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                      [order(NAVS_COD_YEAR)]
                        [,V1] ]
 #assigns the mean proportion of main visited ZEE areas (using fishing effort within marees) between marees for each vessel





data_vessel[,prop_mean_zee_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ZEE_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ZEE_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(ZEE_COD), V1:=NA]
                [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                  [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the proportion of main visited ZEE areas (using mean fishing effort between marees) among marees for each vessel


















data_vessel[,prop_zee_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ZEE_COD), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited ZEE areas (using fishing weight within marees) between marees for each vessel






data_vessel[,prop_mean_zee_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ZEE_COD), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited ZEE areas (using mean fishing weight between marees) among marees for each vessel















data_vessel[,prop_zee_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ZEE_COD), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited ZEE areas (using fishing productivity within marees) between marees for each vessel






data_vessel[,prop_mean_zee_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ZEE_COD), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited ZEE areas (using mean fishing productivity between marees) among marees for each vessel

















data_vessel[,prop_zee_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ZEE_COD), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited ZEE areas (using fishing economic value within marees) between marees for each vessel






data_vessel[,prop_mean_zee_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ZEE_COD), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited ZEE areas (using mean fishing economic value between marees) among marees for each vessel













data_vessel[,prop_zee_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(ZEE_COD), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited ZEE areas (using fishing economic productivity within marees) between marees for each vessel






data_vessel[,prop_mean_zee_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ZEE_COD), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited ZEE areas (using mean fishing economic productivity between marees) among marees for each vessel


















data_vessel[,value_zee_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ZEE_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ZEE_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(ZEE_COD), V1:=NA]
                [is.na(V1), ZEE_COD:=NA]
                  [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_zee_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main ZEE areas (value repeated for each vessel)
                        [mapply(identical, ZEE_COD, MAJ), V1] ] #retaining only main ZEE areas value (identical, allow to test NA==NA)

#assigns the mean fishing effort value for main visited ZEE areas (using fishing effort within marees) among marees for each vessel





data_vessel[,value_mean_zee_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ZEE_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ZEE_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(ZEE_COD), V1:=NA]
                [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing effort value for main visited ZEE areas (using mean fishing effort between marees) among marees for each vessel














data_vessel[,value_zee_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(ZEE_COD), .:=NA]
              [is.na(.), ZEE_COD:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_zee_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, ZEE_COD, MAJ), V1] ] 

#assigns the mean fishing weight value for main visited ZEE areas (using fishing weight within marees) among marees for each vessel





data_vessel[,value_mean_zee_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing weight value for main visited ZEE areas (using mean fishing weight between marees) among marees for each vessel













data_vessel[,value_zee_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(ZEE_COD), .:=NA]
              [is.na(.), ZEE_COD:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_zee_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, ZEE_COD, MAJ), V1] ] 

#assigns the mean fishing productivity value for main visited ZEE areas (using fishing productivity within marees) among marees for each vessel





data_vessel[,value_mean_zee_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing productivity value for main visited ZEE areas (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,value_zee_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(ZEE_COD), .:=NA]
              [is.na(.), ZEE_COD:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_zee_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, ZEE_COD, MAJ), V1] ] 

#assigns the mean fishing economic value for main visited ZEE areas (using fishing economic value within marees) among marees for each vessel





data_vessel[,value_mean_zee_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing economic value for main visited ZEE areas (using mean fishing economic value between marees) among marees for each vessel










data_vessel[,value_zee_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(ZEE_COD), .:=NA]
              [is.na(.), ZEE_COD:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_zee_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, ZEE_COD, MAJ), V1] ]  

#assigns the mean fishing economic productivity value for main visited ZEE areas (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,value_mean_zee_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing economic productivity value for main visited ZEE areas (using mean fishing economic productivity between marees) among marees for each vessel





















data_vessel[,sd_zee_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ZEE_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ZEE_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), V1:=NA]
                [is.na(V1), ZEE_COD:=NA]
                  [,pop.sd(na.omit(V1)),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_zee_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main ZEE areas (value repeated for each vessel)
                        [mapply(identical, ZEE_COD, MAJ), V1] ]  #retaining only main ZEE areas value

#assigns the variation (sd) in fishing effort value for main visited ZEE areas (using fishing effort within marees) among marees for each vessel





data_vessel[,sd_mean_zee_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+ZEE_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,ZEE_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), V1:=NA]
                [,.(mean(V1, na.rm=T),pop.sd(na.omit(V1))),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [ ,.(maxna(V1)==V1,V2,ZEE_COD),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main visited ZEE areas (using mean fishing effort between marees) among marees for each vessel














data_vessel[,sd_zee_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [is.na(.), ZEE_COD:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_zee_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, ZEE_COD, MAJ), V1] ] 

#assigns the variation (sd) in fishing weight value for main visited ZEE areas (using fishing weight within marees) among marees for each vessel





data_vessel[,sd_mean_zee_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [ ,.(maxna(V1)==V1,V2,ZEE_COD),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main visited ZEE areas (using mean fishing weight between marees) among marees for each vessel













data_vessel[,sd_zee_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [is.na(.), ZEE_COD:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_zee_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, ZEE_COD, MAJ), V1] ] 

#assigns the variation (sd) in fishing productivity value for main visited ZEE areas (using fishing productivity within marees) among marees for each vessel





data_vessel[,sd_mean_zee_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [ ,.(maxna(V1)==V1,V2,ZEE_COD),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main visited ZEE areas (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,sd_zee_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [is.na(.), ZEE_COD:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_zee_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, ZEE_COD, MAJ), V1] ] 

#assigns the variation (sd) in fishing economic value for main visited ZEE areas (using fishing economic value within marees) among marees for each vessel





data_vessel[,sd_mean_zee_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [ ,.(maxna(V1)==V1,V2,ZEE_COD),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main visited ZEE areas (using mean fishing economic value between marees) among marees for each vessel










data_vessel[,sd_zee_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [is.na(.), ZEE_COD:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_zee_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, ZEE_COD, MAJ), V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main visited ZEE areas (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,sd_mean_zee_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(ZEE_COD), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,ZEE_COD)] 
                  [ ,.(maxna(V1)==V1,V2,ZEE_COD),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main visited ZEE areas (using mean fishing economic productivity between marees) among marees for each vessel



















#c) Sequence scale









data_vessel[,main_mean_zee_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ZEE_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(ZEE_COD), .:=NA]
            [is.na(.), ZEE_COD:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), ZEE_COD] ]
#assigns the main visited ZEE areas using mean fishing effort between sequences for each vessel












data_vessel[,main_mean_zee_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(ZEE_COD), .:=NA]
            [is.na(.), ZEE_COD:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), ZEE_COD] ] #assigns the main visited ZEE areas using mean fishing weight between fishing sequences for each vessel














data_vessel[,main_mean_zee_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(ZEE_COD), .:=NA]
            [is.na(.), ZEE_COD:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), ZEE_COD] ]
#assigns the main visited ZEE areas using mean fishing productivity between sequences for each vessel

















data_vessel[,main_mean_zee_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(ZEE_COD), .:=NA]
            [is.na(.), ZEE_COD:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), ZEE_COD] ] #assigns the main visited ZEE areas using mean fishing economic value between fishing sequences for each vessel














data_vessel[,main_mean_zee_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(ZEE_COD), .:=NA]
            [is.na(.), ZEE_COD:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,ZEE_COD)]
                [ ,.(V1==maxna(V1),ZEE_COD),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), ZEE_COD] ]
#assigns the main visited ZEE areas using mean fishing economic productivity between sequences for each vessel




















data_vessel[,prop_mean_zee_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ZEE_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited ZEE areas (using mean fishing effort between sequence) among sequence for each vessel










data_vessel[,prop_mean_zee_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the proportion of main visited ZEE areas (using mean fishing weight between sequence) among sequence for each vessel













data_vessel[,prop_mean_zee_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited ZEE areas (using mean fishing productivity between sequence) among sequence for each vessel












data_vessel[,prop_mean_zee_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the proportion of main visited ZEE areas (using mean fishing economic value between sequence) among sequence for each vessel








data_vessel[,prop_mean_zee_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited ZEE areas (using mean fishing economic productivity between sequence) among sequence for each vessel
















data_vessel[,value_mean_zee_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ZEE_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]  #assigns the fishing effort value of main visited ZEE areas using mean fishing effort between fishing sequences for each vessel














data_vessel[,value_mean_zee_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the fishing weight value of main visited ZEE areas using mean fishing weight between fishing sequences for each vessel












data_vessel[,value_mean_zee_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ] #assigns the fishing effort value of main visited ZEE areas using mean fishing productivity between fishing sequences for each vessel








data_vessel[,value_mean_zee_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the fishing economic value of main visited ZEE areas using mean fishing economic value between fishing sequences for each vessel












data_vessel[,value_mean_zee_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ] #assigns the fishing effort value of main visited ZEE areas using mean fishing economic productivity between fishing sequences for each vessel




















data_vessel[,sd_mean_zee_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+ZEE_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [is.na(V1), ZEE_COD:=NA]
                [ ,.(maxna(V1)==V1, V2, ZEE_COD),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing effort value of main visited ZEE areas using mean fishing effort between fishing sequences for each vessel










data_vessel[,sd_mean_zee_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [is.na(V1), ZEE_COD:=NA]
                [ ,.(maxna(V1)==V1, V2, ZEE_COD),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]   #assigns the variation (sd) in fishing weight value of main visited ZEE areas using mean fishing weight between fishing sequences for each vessel











data_vessel[,sd_mean_zee_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [is.na(V1), ZEE_COD:=NA]
                [ ,.(maxna(V1)==V1, V2, ZEE_COD),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing productivity value of main visited ZEE areas using mean fishing productivity between fishing sequences for each vessel
















data_vessel[,sd_mean_zee_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [is.na(V1), ZEE_COD:=NA]
                [ ,.(maxna(V1)==V1, V2, ZEE_COD),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]  #assigns the variation (sd) in fishing economic value of main visited ZEE areas using mean fishing economic value between fishing sequences for each vessel













data_vessel[,sd_mean_zee_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+ZEE_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, ZEE_COD)]
            [is.na(ZEE_COD), V1:=NA]
              [is.na(V1), ZEE_COD:=NA]
                [ ,.(maxna(V1)==V1, V2, ZEE_COD),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, ZEE_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]  #assigns the variation (sd) in fishing economic productivity value of main visited ZEE areas using mean fishing economic productivity between fishing sequences for each vessel










```



######Frequently associated ZEE




```{r spatial variables - Fishing areas - ZEE area (associations)}


#2) Specific major areas









basket=tapply(SACROIS$ZEE_COD, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$ZEE_COD, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of visited statistical rectangle (all statistical rectangle visited at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


used_zee=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all engine implied in a relevant association


used_zee= str_extract(used_zee, pattern="(?<=\\{)(.*)(?=\\})" )



#there is no significant association of zee areas ! Yet, there is some associations close to the fixed threshold (particularly when considering support, i.e. proportion of population concerned, for which a switch from 10 to 5% change results a lot), these threshold are subjective and can be modified according to analyses needs ! The associations close to threshold imply adjacent areas of activity and are probably useful only to distinguish precise strategies (subfleet or subsubfleet classifications)



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()








```

#####Distance to the coast

```{r spatial variables - Fishing areas - Distance to the coast}












#to be noticed: in gradients classification, there is one category equivalent to NA (E: abroad data)

SACROIS[GRADIENT_COD=="E", GRADIENT_COD:=""]


SACROIS[GRADIENT_COD=="", GRADIENT_COD:=NA]






  isallNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) all(is.na(x)),
            value.var = "GRADIENT_COD")[,.] 

table(isallNA) 

#checking that there are no vessels with only missing data => 3% in 2019->2022





  isNA=dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) anyNA(x),
            value.var = "GRADIENT_COD")[,.]  
    
    table(isNA)
#warning:  even when considering vessels with data on visited gradients, few vessels (12% in 2019->2022) display partial missing data


summary(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "GRADIENT_COD")$.[!isallNA & isNA])
 
sd(dcast(SACROIS,
            NAVS_COD_YEAR ~ ., 
            fun.aggregate = function(x) length(x[is.na(x)])/length(x),
            value.var = "GRADIENT_COD")$.[!isallNA & isNA])
   
# in cases of vessels with partial missing data, missing data represent on average 29% +/- 31 SD (in 2019->2022) of the total amount of data






NA_metier=setdiff(unique(SACROIS[,METIER_COD_SACROIS]), unique(SACROIS[is.na(GRADIENT_COD),METIER_COD_SACROIS])) # all metier for which no missing data was ever observed

table(SACROIS[is.na(GRADIENT_COD),METIER_COD_SACROIS])/table(SACROIS[!(METIER_COD_SACROIS %in% NA_metier),METIER_COD_SACROIS]) #proportion of missing data for the metier in which some missing data occurred


# Missing data seem to be associated with specific metier, we will try to check for statistical support using logistic regression:


#summary(glm(is.na(SACROIS$GRADIENT_COD)~SACROIS$METIER_COD_SACROIS, family=binomial)) 

#we clearly observed that some metier (tremails, chaluts... in 2023) are significantly associated to the presence or not of missing data on gradients 









#1) Main exploited area






data_vessel[,value_nb_gradient_year:=
    dcast(SACROIS,
          NAVS_COD_YEAR ~ ., 
          fun.aggregate = function(x) lengthna(unique(na.omit(x))),
          value.var = "GRADIENT_COD")[,.] ]  #assigns how many gradients are visited within a year








data_vessel[,value_nb_gradient_mean_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "GRADIENT_COD")   
          [,mean(., na.rm=T),by = 
              SACROIS [order(MAREE_ID)] [!duplicated(MAREE_ID),NAVS_COD_YEAR]] 
            [order(SACROIS)] 
              [,V1] ] 
# compute the average number of visited gradient per marees for each vessel 









data_vessel[,nb_gradient_sd_marees:=
  dcast(SACROIS, 
        MAREE_ID~., 
        fun.aggregate = function(x) lengthna(unique(na.omit(x))),
        value.var = "GRADIENT_COD")
          [,pop.sd(na.omit(.)),by = 
              SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID),NAVS_COD_YEAR]]
            [order(SACROIS)]
              [,V1] ] 
 # variation in number of visited gradient for each vessels across marees









#a) Year scale







data_vessel[,main_gradient_nb_year:=NA_character_]

data_vessel[!is.na(value_nb_gradient_year),main_gradient_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], #to not count several time the same fishing sequence (where engine use is constant) 
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = length,
        value.var = "GRADIENT_COD")
          [!is.na(GRADIENT_COD)]
            [,.(.==max(.),GRADIENT_COD),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),GRADIENT_COD] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main visited gradient (in marees number) in a year for each vessel








#warning: important amount of vessels with missing data for the subsequent metrics




data_vessel[,main_gradient_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(.), GRADIENT_COD:=NA]
            [is.na(GRADIENT_COD), .:=NA] #ensure that cases were NAs are distributed on each half of the two columns are taken into account
              [,.(.==max(c(0,.), na.rm=T),GRADIENT_COD),by = NAVS_COD_YEAR] #return NA==0 => NA when only NA are present, without warning message
                [V1==T | is.na(V1)] #select NA cases too
                  [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] #distribute NAs at the end of each vessels' ID => they are selected only if there is exclusively NA values
                    [!duplicated(NAVS_COD_YEAR),GRADIENT_COD] ]
#assigns the main visited gradient (in fishing effort) in a year for each vessel



#the former code should be generalized because it better accounts for NA value presence !!!!!!!!!!








data_vessel[,main_gradient_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(.), GRADIENT_COD:=NA]
            [is.na(GRADIENT_COD), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),GRADIENT_COD),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),GRADIENT_COD] ]
#assigns the main visited gradient (in fishing weight) in a year for each vessel







data_vessel[,main_gradient_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(.), GRADIENT_COD:=NA]
            [is.na(GRADIENT_COD), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),GRADIENT_COD),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),GRADIENT_COD] ]
#assigns the main visited gradient (in fishing productivity) in a year for each vessel







data_vessel[,main_gradient_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(.), GRADIENT_COD:=NA]
            [is.na(GRADIENT_COD), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),GRADIENT_COD),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),GRADIENT_COD] ]
 #assigns the main visited gradient (in fishing economic value) in a year for each vessel






data_vessel[,main_gradient_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(.), GRADIENT_COD:=NA]
            [is.na(GRADIENT_COD), .:=NA] 
              [,.(.==max(c(0,.), na.rm=T),GRADIENT_COD),by = NAVS_COD_YEAR] 
                [V1==T | is.na(V1)] 
                  [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                    [!duplicated(NAVS_COD_YEAR),GRADIENT_COD] ]
#assigns the main visited gradient (in fishing economic productivity) in a year for each vessel













data_vessel[,prop_gradient_nb_year:=NA_real_]

data_vessel[!is.na(value_nb_gradient_year),prop_gradient_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = length,
        value.var = "GRADIENT_COD")
          [!is.na(GRADIENT_COD)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values
#assigns the proportion of the main visited gradient (in maree number) in a year for each vessel











data_vessel[,prop_gradient_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(GRADIENT_COD), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main visited gradient (in fishing weight) in a year for each vessel









data_vessel[,prop_gradient_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(GRADIENT_COD), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited gradient (in fishing productivity) in a year for each vessel













data_vessel[,prop_gradient_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(GRADIENT_COD), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited gradient (in fishing economic value) in a year for each vessel










data_vessel[,prop_gradient_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(GRADIENT_COD), .:=NA] 
            [,max(c(0,.), na.rm=T)/sumna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main visited gradient (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_gradient_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(GRADIENT_COD), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main visited gradient in a year for each vessel





data_vessel[,prop_gradient_effort_year:=value_main_gradient_effort_year/effort_year]


 #assigns the proportion of the main visited gradient (in fishing effort) in a year for each vessel




data_vessel[,value_main_gradient_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(GRADIENT_COD), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main visited gradient in a year for each vessel







data_vessel[,value_main_gradient_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(GRADIENT_COD), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main visited gradient in a year for each vessel











data_vessel[,value_main_gradient_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(GRADIENT_COD), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main visited gradient in a year for each vessel










data_vessel[,value_main_gradient_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(GRADIENT_COD), .:=NA] 
            [,maxna(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main visited gradient in a year for each vessel


















#b) Maree scale







data_vessel[,main_gradient_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_gradient_mean_marees),main_gradient_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = length,
        value.var = "GRADIENT_COD")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of gradients visited during the trip 
            [!is.na(GRADIENT_COD)] #removal of non attributed gradients
              [,.(.==max(.),GRADIENT_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                [V1==T] #selection of maximal values (more present gradients) inside each maree
                  [!duplicated(MAREE_ID)] #selection of the first value if there is equality
                      [,length(MAREE_ID) ,by= .(NAVS_COD_YEAR,GRADIENT_COD) ]  
                        [order(NAVS_COD_YEAR)] #ordering by vessels' ID
                          [ ,.(V1==max(V1),GRADIENT_COD),by= NAVS_COD_YEAR] 
                            [V1==T] #selection of maximal values (more present gradients) between marees 
                              [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ] #selection of the first value if there is equality

 #assigns the main visited gradients (using sequence number within marees) among marees for each vessel







data_vessel[,main_mean_gradient_nb_marees:=NA_character_]

data_vessel[!is.na(value_nb_gradient_mean_marees),main_mean_gradient_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID),], 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = length,
        value.var = "GRADIENT_COD")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] #attribution of the trip to the year it begins, then repeated by the number of gradients captured during the trip 
              [!is.na(GRADIENT_COD)]
                [,mean(.),by = .(NAVS_COD_YEAR,GRADIENT_COD)] # average the number of occurrence of gradients between marees
                  [ ,.(V1==max(V1),GRADIENT_COD),by= NAVS_COD_YEAR]             
                    [V1==T] # select the gradients with the higher average number of occurrence across marees
                      [order(NAVS_COD_YEAR)] 
                        [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ]
#assigns the main visited gradients (using mean sequence number between marees) among marees for each vessel










data_vessel[,main_gradient_effort_marees:=
  dcast(SACROIS, 
      MAREE_ID+GRADIENT_COD+SEQ_ID~., 
      fun.aggregate = function(x) x[1],
      value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
        [,sumna(.), by= .(MAREE_ID,GRADIENT_COD)] #then sum of effort within maree for the same gradients
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(GRADIENT_COD), V1:=NA]
              [is.na(V1), GRADIENT_COD:=NA]
                [,.(V1==maxna(V1),GRADIENT_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, GRADIENT_COD, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(GRADIENT_COD) ,by= .(NAVS_COD_YEAR,GRADIENT_COD) ]  
                          [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ] 
 #assigns the main visited gradients (using fishing effort within marees) among marees for each vessel





data_vessel[,main_mean_gradient_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") # first selecting only one occurrence by sequence to avoid to count several time the same effort
          [,sumna(.), by= .(MAREE_ID,GRADIENT_COD)] #then sum of effort within maree for the same gradients
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(GRADIENT_COD), V1:=NA]
                [is.na(V1), GRADIENT_COD:=NA]
                  [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                    [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ]
 #assigns the main visited gradients (using mean fishing effort between marees) among marees for each vessel












data_vessel[,main_gradient_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(GRADIENT_COD), .:=NA]
              [is.na(.), GRADIENT_COD:=NA]
                [,.(.==maxna(.),GRADIENT_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, GRADIENT_COD, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(GRADIENT_COD) ,by= .(NAVS_COD_YEAR,GRADIENT_COD) ]  
                          [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ] 
 #assigns the main visited gradients (using fishing weight within marees) among marees for each vessel






data_vessel[,main_mean_gradient_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(GRADIENT_COD), .:=NA]
                [is.na(.), GRADIENT_COD:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                    [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ]
#assigns the main visited gradients (using mean fishing weight between marees) among marees for each vessel













data_vessel[,main_gradient_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(GRADIENT_COD), .:=NA]
              [is.na(.), GRADIENT_COD:=NA]
                [,.(.==maxna(.),GRADIENT_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, GRADIENT_COD, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(GRADIENT_COD) ,by= .(NAVS_COD_YEAR,GRADIENT_COD) ]  
                          [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ] 
 #assigns the main visited gradients (using fishing productivity within marees) among marees for each vessel






data_vessel[,main_mean_gradient_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(GRADIENT_COD), .:=NA]
                [is.na(.), GRADIENT_COD:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                    [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ]
#assigns the main visited gradients (using mean fishing productivity between marees) among marees for each vessel

















data_vessel[,main_gradient_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(GRADIENT_COD), .:=NA]
              [is.na(.), GRADIENT_COD:=NA]
                [,.(.==maxna(.),GRADIENT_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, GRADIENT_COD, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(GRADIENT_COD) ,by= .(NAVS_COD_YEAR,GRADIENT_COD) ]  
                          [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ] 
 #assigns the main visited gradients (using fishing economic value within marees) among marees for each vessel






data_vessel[,main_mean_gradient_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(GRADIENT_COD), .:=NA]
                [is.na(.), GRADIENT_COD:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                    [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ]
#assigns the main visited gradients (using mean fishing economic value between marees) among marees for each vessel













data_vessel[,main_gradient_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
            [is.na(GRADIENT_COD), .:=NA]
              [is.na(.), GRADIENT_COD:=NA]
                [,.(.==maxna(.),GRADIENT_COD),by = .(NAVS_COD_YEAR,MAREE_ID)]
                  [V1==T | is.na(V1)] 
                    [order(MAREE_ID, GRADIENT_COD, na.last=T)] # put NA values at the end: NA only selected if exclusive 
                      [!duplicated(MAREE_ID)] 
                        [,lengthna(GRADIENT_COD) ,by= .(NAVS_COD_YEAR,GRADIENT_COD) ]  
                          [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR] 
                            [V1==T | is.na(V1)] 
                              [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                                [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ] 
 #assigns the main visited gradients (using fishing economic productivity within marees) among marees for each vessel






data_vessel[,main_mean_gradient_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]  
              [is.na(GRADIENT_COD), .:=NA]
                [is.na(.), GRADIENT_COD:=NA]
                  [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                    [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR]             
                      [V1==T | is.na(V1)] 
                        [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                          [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ]
#assigns the main visited gradients (using mean fishing economic productivity between marees) among marees for each vessel







#Interestingly the main visited gradients change a lot when comparing estimates at marees and year scale (in 2023)







data_vessel[,prop_gradient_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_gradient_mean_marees),prop_gradient_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = length,
        value.var = "GRADIENT_COD")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [!is.na(GRADIENT_COD)] 
            [,max(.)/sum(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
#assigns the mean proportion of main visited gradients (using sequence number within marees) between marees for each vessel


data_vessel[,prop_mean_gradient_nb_marees:=NA_real_]

data_vessel[!is.na(value_nb_gradient_mean_marees),prop_mean_gradient_nb_marees:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = length,
        value.var = "GRADIENT_COD")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [!is.na(GRADIENT_COD)] 
              [,mean(.),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                [,max(V1)/sum(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
  #assigns the proportion of main visited gradients (using mean sequence number between marees) among marees for each vessel











data_vessel[,prop_gradient_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,GRADIENT_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(GRADIENT_COD), V1:=NA]
                [!duplicated(MAREE_ID),sum:=dcast(SACROIS,
                         subset = .(!duplicated(SEQ_ID)),
                         MAREE_ID~., 
                         fun.aggregate = sumna,
                         value.var = "TP_NAVIRE_SACROIS")[,.]]  #sum of fishing sequence effort to avoid to count several time the same sequence for fishing effort (as it is constant in fishing sequence)
                  [,maxna(V1)/sum[1],by = .(NAVS_COD_YEAR,MAREE_ID)]
                    [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR] 
                      [order(NAVS_COD_YEAR)]
                        [,V1] ]
 #assigns the mean proportion of main visited gradients (using fishing effort within marees) between marees for each vessel





data_vessel[,prop_mean_gradient_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,GRADIENT_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(GRADIENT_COD), V1:=NA]
                [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                  [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                    [order(NAVS_COD_YEAR)]
                      [,V1] ]
 #assigns the proportion of main visited gradients (using mean fishing effort between marees) among marees for each vessel


















data_vessel[,prop_gradient_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(GRADIENT_COD), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited gradients (using fishing weight within marees) between marees for each vessel






data_vessel[,prop_mean_gradient_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(GRADIENT_COD), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited gradients (using mean fishing weight between marees) among marees for each vessel















data_vessel[,prop_gradient_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(GRADIENT_COD), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited gradients (using fishing productivity within marees) between marees for each vessel






data_vessel[,prop_mean_gradient_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(GRADIENT_COD), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited gradients (using mean fishing productivity between marees) among marees for each vessel

















data_vessel[,prop_gradient_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(GRADIENT_COD), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited gradients (using fishing economic value within marees) between marees for each vessel






data_vessel[,prop_mean_gradient_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(GRADIENT_COD), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited gradients (using mean fishing economic value between marees) among marees for each vessel













data_vessel[,prop_gradient_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
        [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
          [is.na(GRADIENT_COD), .:=NA] 
            [,maxna(.)/sumna(.),by = .(NAVS_COD_YEAR,MAREE_ID)]
               [ ,mean(V1, na.rm=T),by= NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the mean proportion of main visited gradients (using fishing economic productivity within marees) between marees for each vessel






data_vessel[,prop_mean_gradient_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(GRADIENT_COD), .:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                [,maxna(V1)/sumna(V1),by = NAVS_COD_YEAR]
                  [order(NAVS_COD_YEAR)]
                    [,V1] ]
 #assigns the proportion of main visited gradients (using mean fishing economic productivity between marees) among marees for each vessel


















data_vessel[,value_gradient_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,GRADIENT_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(GRADIENT_COD), V1:=NA]
                [is.na(V1), GRADIENT_COD:=NA]
                  [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_gradient_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main gradients (value repeated for each vessel)
                        [mapply(identical, GRADIENT_COD, MAJ), V1] ] #retaining only main gradients value (identical, allow to test NA==NA)

#assigns the mean fishing effort value for main visited gradients (using fishing effort within marees) among marees for each vessel





data_vessel[,value_mean_gradient_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,GRADIENT_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
              [is.na(GRADIENT_COD), V1:=NA]
                [,mean(V1, na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing effort value for main visited gradients (using mean fishing effort between marees) among marees for each vessel














data_vessel[,value_gradient_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ]
            [is.na(GRADIENT_COD), .:=NA]
              [is.na(.), GRADIENT_COD:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_gradient_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, GRADIENT_COD, MAJ), V1] ] 

#assigns the mean fishing weight value for main visited gradients (using fishing weight within marees) among marees for each vessel





data_vessel[,value_mean_gradient_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing weight value for main visited gradients (using mean fishing weight between marees) among marees for each vessel













data_vessel[,value_gradient_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(GRADIENT_COD), .:=NA]
              [is.na(.), GRADIENT_COD:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_gradient_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, GRADIENT_COD, MAJ), V1] ] 

#assigns the mean fishing productivity value for main visited gradients (using fishing productivity within marees) among marees for each vessel





data_vessel[,value_mean_gradient_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing productivity value for main visited gradients (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,value_gradient_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(GRADIENT_COD), .:=NA]
              [is.na(.), GRADIENT_COD:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_gradient_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, GRADIENT_COD, MAJ), V1] ] 

#assigns the mean fishing economic value for main visited gradients (using fishing economic value within marees) among marees for each vessel





data_vessel[,value_mean_gradient_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing economic value for main visited gradients (using mean fishing economic value between marees) among marees for each vessel










data_vessel[,value_gradient_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
            [is.na(GRADIENT_COD), .:=NA]
              [is.na(.), GRADIENT_COD:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [order(NAVS_COD_YEAR)]
                    [,MAJ:=rep(data_vessel[,main_gradient_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                      [mapply(identical, GRADIENT_COD, MAJ), V1] ]  

#assigns the mean fishing economic productivity value for main visited gradients (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,value_mean_gradient_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [ ,maxna(V1),by= NAVS_COD_YEAR]             
                    [order(NAVS_COD_YEAR)] 
                      [, V1] ]
#assigns the mean fishing economic productivity value for main visited gradients (using mean fishing economic productivity between marees) among marees for each vessel





















data_vessel[,sd_gradient_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,GRADIENT_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), V1:=NA]
                [is.na(V1), GRADIENT_COD:=NA]
                  [,pop.sd(na.omit(V1)),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_gradient_effort_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] #implementation of the previously found main gradients (value repeated for each vessel)
                        [mapply(identical, GRADIENT_COD, MAJ), V1] ]  #retaining only main gradients value

#assigns the variation (sd) in fishing effort value for main visited gradients (using fishing effort within marees) among marees for each vessel





data_vessel[,sd_mean_gradient_effort_marees:=
    dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS") 
          [,sumna(.), by= .(MAREE_ID,GRADIENT_COD)]
            [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), V1:=NA]
                [,.(mean(V1, na.rm=T),pop.sd(na.omit(V1))),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [ ,.(maxna(V1)==V1,V2,GRADIENT_COD),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing effort value for main visited gradients (using mean fishing effort between marees) among marees for each vessel














data_vessel[,sd_gradient_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [is.na(.), GRADIENT_COD:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_gradient_weight_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, GRADIENT_COD, MAJ), V1] ] 

#assigns the variation (sd) in fishing weight value for main visited gradients (using fishing weight within marees) among marees for each vessel





data_vessel[,sd_mean_gradient_weight_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [ ,.(maxna(V1)==V1,V2,GRADIENT_COD),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing weight value for main visited gradients (using mean fishing weight between marees) among marees for each vessel













data_vessel[,sd_gradient_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [is.na(.), GRADIENT_COD:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_gradient_weight.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, GRADIENT_COD, MAJ), V1] ] 

#assigns the variation (sd) in fishing productivity value for main visited gradients (using fishing productivity within marees) among marees for each vessel





data_vessel[,sd_mean_gradient_weight.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [ ,.(maxna(V1)==V1,V2,GRADIENT_COD),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing productivity value for main visited gradients (using mean fishing productivity between marees) among marees for each vessel















data_vessel[,sd_gradient_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [is.na(.), GRADIENT_COD:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_gradient_eco_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, GRADIENT_COD, MAJ), V1] ] 

#assigns the variation (sd) in fishing economic value for main visited gradients (using fishing economic value within marees) among marees for each vessel





data_vessel[,sd_mean_gradient_eco_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [ ,.(maxna(V1)==V1,V2,GRADIENT_COD),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic value for main visited gradients (using mean fishing economic value between marees) among marees for each vessel










data_vessel[,sd_gradient_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [is.na(.), GRADIENT_COD:=NA]
                  [,pop.sd(na.omit(.)),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                    [order(NAVS_COD_YEAR)]
                      [,MAJ:=rep(data_vessel[,main_gradient_eco.prod_marees], tapply(.SD$NAVS_COD_YEAR, .SD$NAVS_COD_YEAR, length))] 
                        [mapply(identical, GRADIENT_COD, MAJ), V1] ] 

#assigns the variation (sd) in fishing economic productivity value for main visited gradients (using fishing economic productivity within marees) among marees for each vessel





data_vessel[,sd_mean_gradient_eco.prod_marees:=
  dcast(SACROIS, 
        MAREE_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,NAVS_COD_YEAR:=rep(SACROIS[order(MAREE_ID)][!duplicated(MAREE_ID)][,NAVS_COD_YEAR], tapply(.SD$MAREE_ID,.SD$MAREE_ID, length)) ] 
              [is.na(GRADIENT_COD), .:=NA]
                [,.(mean(., na.rm=T),pop.sd(na.omit(.))),by = .(NAVS_COD_YEAR,GRADIENT_COD)] 
                  [ ,.(maxna(V1)==V1,V2,GRADIENT_COD),by= NAVS_COD_YEAR] 
                    [V1==T | is.na(V1)]
                      [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)] 
                        [!duplicated(NAVS_COD_YEAR), V2] ]
#assigns the variation (sd) in fishing economic productivity value for main visited gradients (using mean fishing economic productivity between marees) among marees for each vessel



















#c) Sequence scale









data_vessel[,main_mean_gradient_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+GRADIENT_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [is.na(GRADIENT_COD), .:=NA]
            [is.na(.), GRADIENT_COD:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ]
#assigns the main visited gradients using mean fishing effort between sequences for each vessel












data_vessel[,main_mean_gradient_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [is.na(GRADIENT_COD), .:=NA]
            [is.na(.), GRADIENT_COD:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ] #assigns the main visited gradients using mean fishing weight between fishing sequences for each vessel














data_vessel[,main_mean_gradient_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [is.na(GRADIENT_COD), .:=NA]
            [is.na(.), GRADIENT_COD:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ]
#assigns the main visited gradients using mean fishing productivity between sequences for each vessel

















data_vessel[,main_mean_gradient_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [is.na(GRADIENT_COD), .:=NA]
            [is.na(.), GRADIENT_COD:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ] #assigns the main visited gradients using mean fishing economic value between fishing sequences for each vessel














data_vessel[,main_mean_gradient_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [is.na(GRADIENT_COD), .:=NA]
            [is.na(.), GRADIENT_COD:=NA]
              [,mean(., na.rm=T),by = .(NAVS_COD_YEAR,GRADIENT_COD)]
                [ ,.(V1==maxna(V1),GRADIENT_COD),by= NAVS_COD_YEAR]             
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR), GRADIENT_COD] ]
#assigns the main visited gradients using mean fishing economic productivity between sequences for each vessel




















data_vessel[,prop_mean_gradient_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+GRADIENT_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited gradients (using mean fishing effort between sequence) among sequence for each vessel










data_vessel[,prop_mean_gradient_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the proportion of main visited gradients (using mean fishing weight between sequence) among sequence for each vessel













data_vessel[,prop_mean_gradient_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited gradients (using mean fishing productivity between sequence) among sequence for each vessel












data_vessel[,prop_mean_gradient_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the proportion of main visited gradients (using mean fishing economic value between sequence) among sequence for each vessel








data_vessel[,prop_mean_gradient_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [ ,.(maxna(V1)/sumna(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main visited gradients (using mean fishing economic productivity between sequence) among sequence for each vessel
















data_vessel[,value_mean_gradient_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+GRADIENT_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]  #assigns the fishing effort value of main visited gradients using mean fishing effort between fishing sequences for each vessel














data_vessel[,value_mean_gradient_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the fishing weight value of main visited gradients using mean fishing weight between fishing sequences for each vessel












data_vessel[,value_mean_gradient_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ] #assigns the fishing effort value of main visited gradients using mean fishing productivity between fishing sequences for each vessel








data_vessel[,value_mean_gradient_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ]
 #assigns the fishing economic value of main visited gradients using mean fishing economic value between fishing sequences for each vessel












data_vessel[,value_mean_gradient_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [ , maxna(V1), by= NAVS_COD_YEAR]             
                [, V1] ] #assigns the fishing effort value of main visited gradients using mean fishing economic productivity between fishing sequences for each vessel




















data_vessel[,sd_mean_gradient_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+GRADIENT_COD+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [is.na(V1), GRADIENT_COD:=NA]
                [ ,.(maxna(V1)==V1, V2, GRADIENT_COD),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing effort value of main visited gradients using mean fishing effort between fishing sequences for each vessel










data_vessel[,sd_mean_gradient_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [is.na(V1), GRADIENT_COD:=NA]
                [ ,.(maxna(V1)==V1, V2, GRADIENT_COD),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]   #assigns the variation (sd) in fishing weight value of main visited gradients using mean fishing weight between fishing sequences for each vessel











data_vessel[,sd_mean_gradient_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [is.na(V1), GRADIENT_COD:=NA]
                [ ,.(maxna(V1)==V1, V2, GRADIENT_COD),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing productivity value of main visited gradients using mean fishing productivity between fishing sequences for each vessel
















data_vessel[,sd_mean_gradient_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [is.na(V1), GRADIENT_COD:=NA]
                [ ,.(maxna(V1)==V1, V2, GRADIENT_COD),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]  #assigns the variation (sd) in fishing economic value of main visited gradients using mean fishing economic value between fishing sequences for each vessel













data_vessel[,sd_mean_gradient_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+GRADIENT_COD~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, GRADIENT_COD)]
            [is.na(GRADIENT_COD), V1:=NA]
              [is.na(V1), GRADIENT_COD:=NA]
                [ ,.(maxna(V1)==V1, V2, GRADIENT_COD),by= NAVS_COD_YEAR]
                  [V1==T | is.na(V1)]
                    [order(NAVS_COD_YEAR, GRADIENT_COD, na.last=T)]
                      [!duplicated(NAVS_COD_YEAR),V2] ]  #assigns the variation (sd) in fishing economic productivity value of main visited gradients using mean fishing economic productivity between fishing sequences for each vessel









```




######Frequently associated gradients



```{r spatial variables - Fishing areas - Distance to the coast (associations)}






#2) Specific major areas








basket=tapply(SACROIS$GRADIENT_COD, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$GRADIENT_COD, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of visited statistical rectangle (all statistical rectangle visited at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


used_gradient=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all engine implied in a relevant association


used_gradient= str_extract(used_gradient, pattern="(?<=\\{)(.*)(?=\\})" )



#there is no significant association of gradients ! 



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()












#there are three zones that emerge as predominant and frequently associated ("Offshore", "Coastal" and "Mixed"), we will describe precise activity for these three strategies as it is an important component of vessel's behavior


#the "coastal" categories is an aggregate of the three categories "3-12 miles","3 miles", "Estuarine", for that reason we will here merge all these categories in the "Coastal" category:

SACROIS[GRADIENT_COD %in% c("3-12M","3M","F","GLE","I"), GRADIENT_COD:="C"]



SACROIS[,GRADIENT_COD:=as.factor(SACROIS$GRADIENT_COD)]
#to properly consider the cases where vessels are not active in a given area, the areas must be considered as a factor variable

















for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_prop_nb_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) {y=table(x); y[names(y)==i]/sum(y)},
              value.var = "GRADIENT_COD")
                [, .] #proportion of time the gradient of interest was visited among all fishing events
                  ]
}





for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_prop_weight_",i):=0]; #attribution of 0 value by default (no observed visit of the target gradient)
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_prop_weight_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+GRADIENT_COD ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [, .[.SD$GRADIENT_COD==i & !is.na(.SD$GRADIENT_COD)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the gradient of interest (in terms of fishing weight), computed only when proven visit of the target gradient
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_gradient_year)), paste0("gradient_prop_weight_",i):=NA] #attribution of NA values when data not available to attest for the target gradient visit
}










for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_prop_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_prop_eco_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+GRADIENT_COD ~ ., 
              fun.aggregate = sumna,
              value.var = "MONTANT_EUROS_SACROIS")
                [, .[.SD$GRADIENT_COD==i & !is.na(.SD$GRADIENT_COD)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the gradient of interest (in terms of fishing economic value)
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_gradient_year)), paste0("gradient_prop_eco_",i):=NA] 
}






for (i in c("C","M","L")) {
    data_vessel[,paste0("gradient_prop_effort_",i):=
                  SACROIS[, sumna(TP_NAVIRE_SACROIS[.SD$GRADIENT_COD==i][!duplicated(.SD$SEQ_ID)])/sumna(TP_NAVIRE_SACROIS[!duplicated(.SD$SEQ_ID)]), by= NAVS_COD_YEAR] #selecting only one occurrence in the sequence to avoid accounting several time the same effort
                    [,V1]
                      ]; #catches proportion in the gradient of interest (in terms of fishing effort)
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))==0, paste0("gradient_prop_effort_",i):=0] #attribution of 0 value when no observed visit of the target gradient (NA values attributed when no data available on visited gradient and/or fishing effort)
  data_vessel[is.na(value_effort_year), paste0("gradient_prop_effort_",i):=NA] #NA attributed when data on gradient is available but no data on fishing effort is available 
}

#Method use here way more efficient !!!!! => to be applied to all other functions ?





for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_prop_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_prop_weight.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+GRADIENT_COD ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_POIDS")
                [, .[.SD$GRADIENT_COD==i & !is.na(.SD$GRADIENT_COD)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the gradient of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_gradient_year)), paste0("gradient_prop_weight.prod_",i):=NA] 
}






for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_prop_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_prop_eco.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+GRADIENT_COD ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_ECO")
                [, .[.SD$GRADIENT_COD==i & !is.na(.SD$GRADIENT_COD)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the gradient of interest (in terms of fishing productivity)
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_gradient_year)), paste0("gradient_prop_eco.prod_",i):=NA] 
}



















for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_weight_",i):=0]; #attribution of 0 value by default (no observed visit of the target gradient)
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_weight_",i):=
            SACROIS[GRADIENT_COD==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the gradient of interest (in terms of fishing weight), computed only when proven visit of the target gradient
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_gradient_year)), paste0("gradient_weight_",i):=NA] #attribution of NA values when data not available to attest for the target gradient visit
}


#Alternative way to compute proportion metrics: prop_weight_i=weight_i/weight_year, way faster !)





for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_eco_",i):=
            SACROIS[GRADIENT_COD==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the gradient of interest (in terms of fishing economic values), computed only when proven visit of the target gradient
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_gradient_year)), paste0("gradient_eco_",i):=NA]
}






for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_effort_",i):=0]; 
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_effort_",i):=
            SACROIS[GRADIENT_COD==i,][!duplicated(SEQ_ID), sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the gradient of interest (in terms of fishing effort), computed only when proven visit of the target gradient
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_gradient_year)), paste0("gradient_effort_",i):=NA]
}







for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_weight.prod_",i):=
            SACROIS[GRADIENT_COD==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the gradient of interest (in terms of fishing productivity), computed only when proven visit of the target gradient
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_gradient_year)), paste0("gradient_weight.prod_",i):=NA]
}






for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_eco.prod_",i):=
            SACROIS[GRADIENT_COD==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the gradient of interest (in terms of fishing economic productivity), computed only when proven visit of the target gradient
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_gradient_year)), paste0("gradient_eco.prod_",i):=NA]
}











#mean values at the sequence level are also computed to obtain estimate less biased by missing values:





for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_prop_nb_",i,"_seq"):=
            SACROIS[, sumna(GRADIENT_COD==i)/length(na.omit(GRADIENT_COD)), by= .(NAVS_COD_YEAR,SEQ_ID)][, mean(V1, na.rm=T), by= NAVS_COD_YEAR] #proportion in gradient occurrence for each sequence
              [,V1]
                ]# mean proportion of time the gradient of interest was visited among all fishing sequence
}


#all variables computed at the sequence level (average value) are computationally expensive: expect about 20-40 minutes per loop...









for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_prop_weight_",i,"_seq"):=
                SACROIS[, sumna(QUANT_POIDS_VIF_SACROIS[GRADIENT_COD==i])/sumna(QUANT_POIDS_VIF_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1] # mean proportion (in terms of fishing weight) of gradient of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))==0,paste0("gradient_prop_weight_",i,"_seq"):=0]; #attribution of 0 value when no observed visit of the target gradient (NA values attributed when no data available on visited gradient and/or fishing effort)
  data_vessel[is.na(value_weight_year), paste0("gradient_prop_weight_",i):=NA] #NA attributed when data on gradient is available but no data on fishing weight is available
}













for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_prop_eco_",i,"_seq"):=
                SACROIS[, sumna(MONTANT_EUROS_SACROIS[GRADIENT_COD==i])/sumna(MONTANT_EUROS_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing economic value) of gradient of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))==0,paste0("gradient_prop_eco_",i,"_seq"):=0];
  data_vessel[is.na(value_eco_year), paste0("gradient_prop_eco_",i):=NA]
}









for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_prop_weight.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_POIDS[GRADIENT_COD==i])/sumna(PROD_POIDS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of gradient of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))==0,paste0("gradient_prop_weight.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_weight.prod_year), paste0("gradient_prop_weight.prod_",i):=NA]
}







for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_prop_eco.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_ECO[GRADIENT_COD==i])/sumna(PROD_ECO), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of gradient of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))==0,paste0("gradient_prop_eco.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_eco.prod_year), paste0("gradient_prop_eco.prod_",i):=NA]
}


















for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_weight_",i,"_seq"):=0]; #attribution of 0 value by default (no observed visit of the target gradient)
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_weight_",i,"_seq"):=
            SACROIS[GRADIENT_COD==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(GRADIENT_COD)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] #for vessels of interest, all sequences with identified gradient
                          [,V1/pres] ]; #mean fishing weight of the gradient of interest between sequences, computed only when proven visit of the target gradient
  data_vessel[(is.na(value_weight_year) | is.na(value_nb_gradient_year)), paste0("gradient_weight_",i,"_seq"):=NA] #attribution of NA values when data not available to attest for the target gradient visit
}





for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_eco_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_eco_",i,"_seq"):=
            SACROIS[GRADIENT_COD==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(GRADIENT_COD)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic value of the gradient of interest between sequences, computed only when proven visit of the target gradient
  data_vessel[(is.na(value_eco_year) | is.na(value_nb_gradient_year)), paste0("gradient_eco_",i,"_seq"):=NA] 
}






for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_effort_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_effort_",i,"_seq"):=
            SACROIS[GRADIENT_COD==i,]
              [!duplicated(SEQ_ID),sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR]
                [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(GRADIENT_COD)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                  [,V1/pres] ]; #mean fishing effort of the gradient of interest between sequences, computed only when proven visit of the target gradient
  data_vessel[(is.na(value_effort_year) | is.na(value_nb_gradient_year)), paste0("gradient_effort_",i,"_seq"):=NA] 
}







for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_weight.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_weight.prod_",i,"_seq"):=
            SACROIS[GRADIENT_COD==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(GRADIENT_COD)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing productivity of the gradient of interest between sequences, computed only when proven visit of the target gradient
  data_vessel[(is.na(value_weight.prod_year) | is.na(value_nb_gradient_year)), paste0("gradient_weight.prod_",i,"_seq"):=NA] 
}







for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_eco.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_eco.prod_",i,"_seq"):=
            SACROIS[GRADIENT_COD==i, sumna(PROD_ECO), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(GRADIENT_COD)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic productivity of the gradient of interest between sequences, computed only when proven visit of the target gradient
  data_vessel[(is.na(value_eco.prod_year) | is.na(value_nb_gradient_year)), paste0("gradient_eco.prod_",i,"_seq"):=NA] 
}












#### We also add other metrics of activity previously computed (number and main engine, species, family / only at year scale):


#To be noticed: the following metrics are applicable only if there is activity in the area of interest, they are therefore applicable only in a subset of vessels and should be of interest only for subfleet classification when precising specific fleet behaviors 






for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_nb_spe_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0,paste0("gradient_nb_spe_",i):=
            dcast(SACROIS[GRADIENT_COD==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "ESP2_COD_FAO")
                [, .] #number of species in the gradient of interest among all fishing events
                  ]
}





for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_simpson_weight_spe_",i):=NA_real_];
  data_vessel[eval(as.name(paste0("gradient_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("gradient_nb_spe_",i)))), paste0("gradient_simpson_weight_spe_",i):=
            dcast(SACROIS[GRADIENT_COD==i,],
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(ESP2_COD_FAO)]
                  [!is.na(.)]
                    [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                      [,V1] #species diversity (simpson index, weight as abundance) in the gradient of interest among all fishing events
            ]
}





for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_main_spe_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("gradient_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("gradient_nb_spe_",i)))), paste0("gradient_main_spe_weight_",i):=
            dcast(SACROIS[GRADIENT_COD==i,],
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(ESP2_COD_FAO) & !is.na(.)]
                  [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] #main fished species (in fishing weight) in the gradient of interest among all fishing events
            ]
}














for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_nb_family_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0,paste0("gradient_nb_family_",i):=
            dcast(SACROIS[GRADIENT_COD==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "FAMILY_COD_FAO")
                [, .] #number of family in the gradient of interest among all fishing events
                  ]
}





for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_simpson_weight_family_",i):=NA_real_];
  data_vessel[eval(as.name(paste0("gradient_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("gradient_nb_family_",i)))), paste0("gradient_simpson_weight_family_",i):=
            dcast(SACROIS[GRADIENT_COD==i,],
              NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(FAMILY_COD_FAO)]
                  [!is.na(.)]
                    [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                      [,V1] #family diversity (simpson index, weight as abundance) in the gradient of interest among all fishing events
            ]
}




for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_main_family_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("gradient_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("gradient_nb_family_",i)))), paste0("gradient_main_family_weight_",i):=
            dcast(SACROIS[GRADIENT_COD==i,],
            NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(FAMILY_COD_FAO) & !is.na(.)]
                  [,.(.==max(.),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] #main fished family (in fishing weight) in the gradient of interest among all fishing events
            ]
}









for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_nb_engine_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("gradient_prop_nb_",i)))>0, paste0("gradient_nb_engine_",i):=
            dcast(SACROIS[GRADIENT_COD==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "ENGIN_COD")
                [, .] #number of used engines in the gradient of interest among all fishing events
                  ]
}








for (i in c("C","M","L")) {
  data_vessel[,paste0("gradient_main_engine_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("gradient_prop_weight_",i)))>0 & eval(as.name(paste0("gradient_nb_engine_",i)))>0, paste0("gradient_main_engine_weight_",i):=
            dcast(SACROIS[GRADIENT_COD==i,],
            NAVS_COD_YEAR+ENGIN_COD ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(.)]
                  [,.(.==max(.),ENGIN_COD),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),ENGIN_COD] #main used engine (in fishing weight) in the gradient of interest among all fishing events
            ]
}















# Note about the reproducibility of this method: for the moment some variables defined in SACROIS are only representative of the French system and could be a problem when applying this method to other countries. In particular, the "gradient" metric should be replaced by bathymetry or precise distance from the shore, the economic value of captured species may also vary among countries.

```


###Seasonal trends






####Days/months/trimesters at sea

```{r temporal metrics - Days/months/trimesters at sea}





anyNA(SACROIS[,DATE_SEQ])
any(SACROIS[,DATE_SEQ]=="")

#no missing value






table(
    dcast(SACROIS,
            NAVS_COD_YEAR+SEQ_ID ~ ., 
            fun.aggregate = function(x) length(unique(x))==1,
            value.var = "DATE_SEQ")[,.])
 #test whether the flag could change during the year (we expect not, i.e. all test=TRUE)







#To be noticed: data on date are particularly variable, when the vessel is equipped with VMS there is precision to the minute meanwhile without it there is a precision to the date. --> It may be possible to consider only precise data to have more precise estimates for fleet where it is possible 


    
    

SACROIS[, TRIMESTRE:=as.integer(str_sub(DATE_SEQ,4,5))]
    
SACROIS[, TRIMESTRE:=as.integer(str_sub(DATE_SEQ,4,5))]
    
SACROIS[TRIMESTRE %in% c(1,2,3), TRIMESTRE:=1]
SACROIS[TRIMESTRE %in% c(4,5,6), TRIMESTRE:=2]
SACROIS[TRIMESTRE %in% c(7,8,9), TRIMESTRE:=3]
SACROIS[TRIMESTRE %in% c(10,11,12), TRIMESTRE:=4]
    

        
SACROIS[, MONTH:=as.integer(str_sub(DATE_SEQ,4,5))]


    
    
    
data_vessel[,sea_days_year:=
  dcast(SACROIS,
        subset = .(!duplicated(SEQ_ID)),
        NAVS_COD_YEAR ~ .,
        fun.aggregate = function(x) length(unique(str_sub(x,1,5))),
        value.var = "DATE_SEQ")[,.] ] #assigns the (yearly) total days spent at sea for each vessels


data_vessel[,sea_months_year:=
  dcast(SACROIS,
        subset = .(!duplicated(SEQ_ID)),
        NAVS_COD_YEAR ~ .,
        fun.aggregate = function(x) length(unique(x)),
        value.var = "MONTH")[,.] ] #assigns the (yearly) total months spent at sea for each vessels




table(data_vessel$sea_months_all==data_vessel$NB_MOIS_ACT)# we expect these two variables to be identical




data_vessel[,sea_trimesters_year:=
  dcast(SACROIS,
        subset = .(!duplicated(SEQ_ID)),
        NAVS_COD_YEAR ~ .,
        fun.aggregate = function(x) length(unique(x)),
        value.var = "TRIMESTRE")[,.] ] #assigns the (yearly) number of trimester spent at sea for each vessels










year=c(0,31,28,31,30,31,30,31,31,30,31,30,31) #days per month plus an initial 0


    

SACROIS[, DATE_SEQ_DAY:=
            sapply(.SD$DATE_SEQ, function(x) as.integer(str_sub(x,1,2))+sum(year[ 1:as.integer(str_sub(x,4,5)) ]) ) ] #displays the date in number of days since the beginning of the year










#to be noticed: the mean number of fishing day per marées is not available for the data obtained from sales (arbitrary fixed to 1 day), the following metrics is therefore imprecise (same is true for previous variable using days at sea number to a lesser extent)



data_vessel[, mean_sea_days_marees:=
  dcast(SACROIS,
        subset = .(!duplicated(SEQ_ID)),
        NAVS_COD_YEAR+MAREE_ID ~ .,
        fun.aggregate = function(x) length(unique(x)),
        value.var = "DATE_SEQ_DAY")
    [, mean(.), by= NAVS_COD_YEAR][,V1]
  ]#assigns the (yearly) average days spent at sea per marées for each vessels 




data_vessel[, sd_sea_days_marees:=
  dcast(SACROIS,
        subset = .(!duplicated(SEQ_ID)),
        NAVS_COD_YEAR+MAREE_ID ~ .,
        fun.aggregate = function(x) length(unique(x)),
        value.var = "DATE_SEQ_DAY")
    [, pop.sd(.), by= NAVS_COD_YEAR][,V1]
  ] #assigns the (yearly) variation (sd) in days spent at sea per marées for each vessels 
















    
data_vessel[,average_sea_days:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
      NAVS_COD_YEAR ~ ., 
      fun.aggregate = mean,
      value.var = "DATE_SEQ_DAY")[,.] ]  #displays the average day of fishing



data_vessel[,sd_average_sea_days:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
      NAVS_COD_YEAR ~ ., 
      fun.aggregate = pop.sd,
      value.var = "DATE_SEQ_DAY")[,.] ]  ##displays the variability (standard deviation) in fishing days




data_vessel[,average_sea_months:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
      NAVS_COD_YEAR ~ ., 
      fun.aggregate = mean,
      value.var = "MONTH")[,.] ]  #displays the average month of fishing



data_vessel[,sd_average_sea_months:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
      NAVS_COD_YEAR ~ ., 
      fun.aggregate = pop.sd,
      value.var = "MONTH")[,.] ]  ##displays the variability (standard deviation) in fishing months



data_vessel[,average_sea_trimesters:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
      NAVS_COD_YEAR ~ ., 
      fun.aggregate = mean,
      value.var = "TRIMESTRE")[,.] ]  #displays the average trimester of fishing



data_vessel[,sd_average_sea_trimesters_year:=
  dcast(SACROIS[!duplicated(SEQ_ID),],
      NAVS_COD_YEAR ~ ., 
      fun.aggregate = pop.sd,
      value.var = "TRIMESTRE")[,.] ]  ##displays the variability (standard deviation) in fishing trimesters













# the mean and sd weighted by fishing activity (weight, eco, effort, productivity => summed within the sequence except for effort !) were also computed:




#a) sea days

    
data_vessel[,average_sea_days_weight:=
    SACROIS[order(SEQ_ID), #necessary to order by SEQ_ID to avoid mismatch
            {sum= tapply(QUANT_POIDS_VIF_SACROIS, SEQ_ID, sumna);
             weighted.mean(
               DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], #we have to remove cases with NAs in weight vector as it is not handle by the function
               na.rm=T) }, 
            keyby = #reordering by vessels ID
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing day weighted by fishing weight throughout the year




data_vessel[,sd_average_sea_days_weight:=
    SACROIS[order(SEQ_ID), #necessary to order by SEQ_ID to avoid mismatch
            {sum= tapply(QUANT_POIDS_VIF_SACROIS, SEQ_ID, sumna);
             wm= weighted.mean(
                  DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], #we have to remove cases with NAs in weight vector as it is not handle by the function
                  na.rm=T);
             weighted.mean( (DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, #To be noticed: biased estimates of the variance
                keyby = #reordering by vessels ID
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing day weighted by fishing weight throughout the year












data_vessel[,average_sea_days_eco:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(MONTANT_EUROS_SACROIS, SEQ_ID, sumna);
             weighted.mean(
               DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing day weighted by fishing economic value throughout the year




data_vessel[,sd_average_sea_days_eco:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(MONTANT_EUROS_SACROIS, SEQ_ID, sumna);
             wm= weighted.mean(
                  DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing day weighted by fishing economic value throughout the year












    
data_vessel[,average_sea_days_effort:=
    SACROIS[!duplicated(SEQ_ID),
            weighted.mean(
               DATE_SEQ_DAY[!is.na(TP_NAVIRE_SACROIS)],
               TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)], 
               na.rm=T), 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing day weighted by fishing effort throughout the year




data_vessel[,sd_average_sea_days_effort:=
    SACROIS[!duplicated(SEQ_ID), 
            {wm= weighted.mean(
                  DATE_SEQ_DAY[!is.na(TP_NAVIRE_SACROIS)],
                  TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)], 
                  na.rm=T);
             weighted.mean( (DATE_SEQ_DAY[!is.na(TP_NAVIRE_SACROIS)]-wm)^2, TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
#compute the variation in fishing days weighted by fishing effort throughout the year












data_vessel[,average_sea_days_weight.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_POIDS, SEQ_ID, sumna);
             weighted.mean(
               DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing day weighted by fishing productivity throughout the year




data_vessel[,sd_average_sea_days_weight.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_POIDS, SEQ_ID, sumna);
             wm= weighted.mean(
                  DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing day weighted by fishing productivity throughout the year








data_vessel[,average_sea_days_eco.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_ECO, SEQ_ID, sumna);
             weighted.mean(
               DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing day weighted by fishing economic productivity throughout the year




data_vessel[,sd_average_sea_days_eco.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_ECO, SEQ_ID, sumna);
             wm= weighted.mean(
                  DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (DATE_SEQ_DAY[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing day weighted by fishing economic productivity throughout the year















#b) sea months

    
data_vessel[,average_sea_months_weight:=
    SACROIS[order(SEQ_ID), #necessary to order by SEQ_ID to avoid mismatch
            {sum= tapply(QUANT_POIDS_VIF_SACROIS, SEQ_ID, sumna);
             weighted.mean(
               MONTH[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], #we have to remove cases with NAs in weight vector as it is not handle by the function
               na.rm=T) }, 
            keyby = #reordering by vessels ID
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing month weighted by fishing weight throughout the year




data_vessel[,sd_average_sea_months_weight:=
    SACROIS[order(SEQ_ID), #necessary to order by SEQ_ID to avoid mismatch
            {sum= tapply(QUANT_POIDS_VIF_SACROIS, SEQ_ID, sumna);
             wm= weighted.mean(
                  MONTH[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], #we have to remove cases with NAs in weight vector as it is not handle by the function
                  na.rm=T);
             weighted.mean( (MONTH[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, #To be noticed: biased estimates of the variance
                keyby = #reordering by vessels ID
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing month weighted by fishing weight throughout the year












data_vessel[,average_sea_months_eco:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(MONTANT_EUROS_SACROIS, SEQ_ID, sumna);
             weighted.mean(
               MONTH[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing month weighted by fishing economic value throughout the year




data_vessel[,sd_average_sea_months_eco:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(MONTANT_EUROS_SACROIS, SEQ_ID, sumna);
             wm= weighted.mean(
                  MONTH[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (MONTH[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing month weighted by fishing economic value throughout the year












    
data_vessel[,average_sea_months_effort:=
    SACROIS[!duplicated(SEQ_ID),
            weighted.mean(
               MONTH[!is.na(TP_NAVIRE_SACROIS)],
               TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)], 
               na.rm=T), 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing month weighted by fishing effort throughout the year




data_vessel[,sd_average_sea_months_effort:=
    SACROIS[!duplicated(SEQ_ID), 
            {wm= weighted.mean(
                  MONTH[!is.na(TP_NAVIRE_SACROIS)],
                  TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)], 
                  na.rm=T);
             weighted.mean( (MONTH[!is.na(TP_NAVIRE_SACROIS)]-wm)^2, TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
#compute the variation in fishing months weighted by fishing effort throughout the year












data_vessel[,average_sea_months_weight.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_POIDS, SEQ_ID, sumna);
             weighted.mean(
               MONTH[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing month weighted by fishing productivity throughout the year




data_vessel[,sd_average_sea_months_weight.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_POIDS, SEQ_ID, sumna);
             wm= weighted.mean(
                  MONTH[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (MONTH[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing month weighted by fishing productivity throughout the year








data_vessel[,average_sea_months_eco.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_ECO, SEQ_ID, sumna);
             weighted.mean(
               MONTH[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing month weighted by fishing economic productivity throughout the year




data_vessel[,sd_average_sea_months_eco.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_ECO, SEQ_ID, sumna);
             wm= weighted.mean(
                  MONTH[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (MONTH[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing month weighted by fishing economic productivity throughout the year


















#c) sea trimesters

    
data_vessel[,average_sea_trimesters_weight:=
    SACROIS[order(SEQ_ID), #necessary to order by SEQ_ID to avoid mismatch
            {sum= tapply(QUANT_POIDS_VIF_SACROIS, SEQ_ID, sumna);
             weighted.mean(
               TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], #we have to remove cases with NAs in weight vector as it is not handle by the function
               na.rm=T) }, 
            keyby = #reordering by vessels ID
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing trimester weighted by fishing weight throughout the year




data_vessel[,sd_average_sea_trimesters_weight:=
    SACROIS[order(SEQ_ID), #necessary to order by SEQ_ID to avoid mismatch
            {sum= tapply(QUANT_POIDS_VIF_SACROIS, SEQ_ID, sumna);
             wm= weighted.mean(
                  TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], #we have to remove cases with NAs in weight vector as it is not handle by the function
                  na.rm=T);
             weighted.mean( (TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, #To be noticed: biased estimates of the variance
                keyby = #reordering by vessels ID
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing trimester weighted by fishing weight throughout the year












data_vessel[,average_sea_trimesters_eco:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(MONTANT_EUROS_SACROIS, SEQ_ID, sumna);
             weighted.mean(
               TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing trimester weighted by fishing economic value throughout the year




data_vessel[,sd_average_sea_trimesters_eco:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(MONTANT_EUROS_SACROIS, SEQ_ID, sumna);
             wm= weighted.mean(
                  TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing trimester weighted by fishing economic value throughout the year












    
data_vessel[,average_sea_trimesters_effort:=
    SACROIS[!duplicated(SEQ_ID),
            weighted.mean(
               TRIMESTRE[!is.na(TP_NAVIRE_SACROIS)],
               TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)], 
               na.rm=T), 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing trimester weighted by fishing effort throughout the year




data_vessel[,sd_average_sea_trimesters_effort:=
    SACROIS[!duplicated(SEQ_ID), 
            {wm= weighted.mean(
                  TRIMESTRE[!is.na(TP_NAVIRE_SACROIS)],
                  TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)], 
                  na.rm=T);
             weighted.mean( (TRIMESTRE[!is.na(TP_NAVIRE_SACROIS)]-wm)^2, TP_NAVIRE_SACROIS[!is.na(TP_NAVIRE_SACROIS)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
#compute the variation in fishing trimesters weighted by fishing effort throughout the year












data_vessel[,average_sea_trimesters_weight.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_POIDS, SEQ_ID, sumna);
             weighted.mean(
               TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing trimester weighted by fishing productivity throughout the year




data_vessel[,sd_average_sea_trimesters_weight.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_POIDS, SEQ_ID, sumna);
             wm= weighted.mean(
                  TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing trimester weighted by fishing productivity throughout the year








data_vessel[,average_sea_trimesters_eco.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_ECO, SEQ_ID, sumna);
             weighted.mean(
               TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)],
               sum[!is.na(sum)], 
               na.rm=T) }, 
            keyby = 
              NAVS_COD_YEAR] 
                [,V1] ]
 #compute the average fishing trimester weighted by fishing economic productivity throughout the year




data_vessel[,sd_average_sea_trimesters_eco.prod:=
    SACROIS[order(SEQ_ID), 
            {sum= tapply(PROD_ECO, SEQ_ID, sumna);
             wm= weighted.mean(
                  TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)],
                  sum[!is.na(sum)], 
                  na.rm=T);
             weighted.mean( (TRIMESTRE[!duplicated(SEQ_ID)][!is.na(sum)]-wm)^2, sum[!is.na(sum)] ) }, 
                keyby = 
                  NAVS_COD_YEAR] 
                    [,V1] ]
 #compute the variation in fishing trimester weighted by fishing economic productivity throughout the year














#It is also interesting to consider the main month/trimester of activity: see chunks below



```




##### Main fishing month 



```{r temporal metrics - Days/months/trimesters at sea - Main month}

#a) Month:






data_vessel[,main_month_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], #to not count several time the same fishing sequence (where month is constant) 
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = length,
        value.var = "MONTH")
          [!is.na(MONTH)]
            [,.(.==max(.),MONTH),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),MONTH] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main month (in marees number) in a year for each vessel








#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_month_effort_year:=NA_character_]

data_vessel[!is.na(value_effort_year),main_month_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(MONTH) & !is.na(.)]
            [,.(.==max(.),MONTH),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MONTH] ]
#assigns the main month (in fishing effort) in a year for each vessel





data_vessel[,main_month_weight_year:=NA_character_]

data_vessel[!is.na(value_weight_year),main_month_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(MONTH) & !is.na(.)]
            [,.(.==max(.),MONTH),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MONTH] ]
#assigns the main month (in fishing weight) in a year for each vessel







data_vessel[,main_month_weight.prod_year:=NA_character_]

data_vessel[!is.na(value_weight.prod_year),main_month_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(MONTH) & !is.na(.)]
            [,.(.==max(.),MONTH),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MONTH] ]
#assigns the main month (in fishing productivity) in a year for each vessel







data_vessel[,main_month_eco_year:=NA_character_]

data_vessel[!is.na(value_eco_year),main_month_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(MONTH) & !is.na(.)]
            [,.(.==max(.),MONTH),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MONTH] ]
 #assigns the main month (in fishing economic value) in a year for each vessel






data_vessel[,main_month_eco.prod_year:=NA_character_]

data_vessel[!is.na(value_eco.prod_year),main_month_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(MONTH) & !is.na(.)]
            [,.(.==max(.),MONTH),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),MONTH] ]
#assigns the main month (in fishing economic productivity) in a year for each vessel


















data_vessel[,prop_month_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = length,
        value.var = "MONTH")
          [!is.na(MONTH)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values
#assigns the proportion of the main month (in maree number) in a year for each vessel










data_vessel[,prop_month_weight_year:=NA_real_]

data_vessel[!is.na(value_weight_year),prop_month_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(MONTH) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main month (in fishing weight) in a year for each vessel









data_vessel[,prop_month_weight.prod_year:=NA_real_]

data_vessel[!is.na(value_weight.prod_year),prop_month_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(MONTH) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main month (in fishing productivity) in a year for each vessel













data_vessel[,prop_month_eco_year:=NA_real_]

data_vessel[!is.na(value_eco_year),prop_month_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(MONTH) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main month (in fishing economic value) in a year for each vessel










data_vessel[,prop_month_eco.prod_year:=NA_real_]

data_vessel[!is.na(value_eco.prod_year),prop_month_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(MONTH) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main month (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_month_effort_year:=NA_real_]

data_vessel[!is.na(value_effort_year),value_main_month_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(MONTH) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main month in a year for each vessel





data_vessel[,prop_month_effort_year:=value_main_month_effort_year/effort_year]


 #assigns the proportion of the main month (in fishing effort) in a year for each vessel




data_vessel[,value_main_month_weight_year:=NA_real_]

data_vessel[!is.na(value_weight_year),value_main_month_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(MONTH) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main month in a year for each vessel







data_vessel[,value_main_month_weight.prod_year:=NA_real_]

data_vessel[!is.na(value_weight.prod_year),value_main_month_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(MONTH) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main month in a year for each vessel











data_vessel[,value_main_month_eco_year:=NA_real_]

data_vessel[!is.na(value_eco_year),value_main_month_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(MONTH) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main month in a year for each vessel










data_vessel[,value_main_month_eco.prod_year:=NA_real_]

data_vessel[!is.na(value_eco.prod_year),value_main_month_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(MONTH) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main month in a year for each vessel



















#No need of considering trip or sequence scale as month or trimester rarely change within it, we only considered mean at the sequence scale to better handle missing values:






data_vessel[,main_mean_month_effort_seq:=NA_character_]

data_vessel[!is.na(sea_months_year) & !is.na(value_effort_year),main_mean_month_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+MONTH+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(MONTH) & !is.na(.)]
            [,mean(.),by = .(NAVS_COD_YEAR,MONTH)]
              [ ,.(V1==max(V1),MONTH),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), MONTH] ]
#assigns the main month using mean fishing effort between sequences for each vessel











data_vessel[,main_mean_month_weight_seq:=NA_character_]

data_vessel[!is.na(sea_months_year) & !is.na(value_weight_year),main_mean_month_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(V1==max(V1),MONTH),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), MONTH] ] #assigns the main month using mean fishing weight between fishing sequences for each vessel













data_vessel[,main_mean_month_weight.prod_seq:=NA_character_]

data_vessel[!is.na(sea_months_year) & !is.na(value_weight.prod_year),main_mean_month_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(V1==max(V1),MONTH),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), MONTH] ]
#assigns the main month using mean fishing productivity between sequences for each vessel
















data_vessel[,main_mean_month_eco_seq:=NA_character_]

data_vessel[!is.na(sea_months_year) & !is.na(value_eco_year),main_mean_month_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(V1==max(V1),MONTH),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), MONTH] ] #assigns the main month using mean fishing economic value between fishing sequences for each vessel













data_vessel[,main_mean_month_eco.prod_seq:=NA_character_]

data_vessel[!is.na(sea_months_year) & !is.na(value_eco.prod_year),main_mean_month_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(V1==max(V1),MONTH),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), MONTH] ]
#assigns the main month using mean fishing economic productivity between sequences for each vessel


















data_vessel[,prop_mean_month_effort_seq:=NA_real_]


data_vessel[!is.na(sea_months_year) & !is.na(value_effort_year),prop_mean_month_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+MONTH+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main month (using mean fishing effort between sequence) among sequence for each vessel









data_vessel[,prop_mean_month_weight_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_weight_year),prop_mean_month_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),MONTH),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main month (using mean fishing weight between sequence) among sequence for each vessel











data_vessel[,prop_mean_month_weight.prod_seq:=NA_real_]


data_vessel[!is.na(sea_months_year) & !is.na(value_weight.prod_year),prop_mean_month_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),MONTH),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main month (using mean fishing productivity between sequence) among sequence for each vessel











data_vessel[,prop_mean_month_eco_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_eco_year),prop_mean_month_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),MONTH),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main month (using mean fishing economic value between sequence) among sequence for each vessel






data_vessel[,prop_mean_month_eco.prod_seq:=NA_real_]


data_vessel[!is.na(sea_months_year) & !is.na(value_eco.prod_year),prop_mean_month_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),MONTH),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main month (using mean fishing economic productivity between sequence) among sequence for each vessel















data_vessel[,value_mean_month_effort_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_effort_year),value_mean_month_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+MONTH+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main month using mean fishing effort between fishing sequences for each vessel













data_vessel[,value_mean_month_weight_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_weight_year),value_mean_month_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing weight value of main month using mean fishing weight between fishing sequences for each vessel











data_vessel[,value_mean_month_weight.prod_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_weight.prod_year),value_mean_month_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main month using mean fishing productivity between fishing sequences for each vessel







data_vessel[,value_mean_month_eco_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_eco_year),value_mean_month_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing economic value of main month using mean fishing economic value between fishing sequences for each vessel











data_vessel[,value_mean_month_eco.prod_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_eco.prod_year),value_mean_month_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main month using mean fishing economic productivity between fishing sequences for each vessel



















data_vessel[,sd_mean_month_effort_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_effort_year),sd_mean_month_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+MONTH+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing effort value of main month using mean fishing effort between fishing sequences for each vessel









data_vessel[,sd_mean_month_weight_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_weight_year),sd_mean_month_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing weight value of main month using mean fishing weight between fishing sequences for each vessel










data_vessel[,sd_mean_month_weight.prod_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_weight.prod_year),sd_mean_month_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]      #assigns the variation (sd) in fishing productivity value of main month using mean fishing productivity between fishing sequences for each vessel















data_vessel[,sd_mean_month_eco_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_eco_year),sd_mean_month_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing economic value of main month using mean fishing economic value between fishing sequences for each vessel












data_vessel[,sd_mean_month_eco.prod_seq:=NA_real_]

data_vessel[!is.na(sea_months_year) & !is.na(value_eco.prod_year),sd_mean_month_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+MONTH~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,MONTH)]
            [!is.na(MONTH) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]   #assigns the variation (sd) in fishing economic productivity value of main month using mean fishing economic productivity between fishing sequences for each vessel








```




###### Associated months


```{r temporal metrics - Days/months/trimesters at sea - Associated trimesters}





basket=tapply(SACROIS$MONTH, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$MONTH, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of visited statistical rectangle (all statistical rectangle visited at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


used_month=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all engine implied in a relevant association


used_month= str_extract(used_month, pattern="(?<=\\{)(.*)(?=\\})" )





#there is significant associations implying of all months



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()
















SACROIS[,MONTH:=as.factor(SACROIS$MONTH)]
#to properly consider the cases where vessels are not active in a given timing, periods must be considered as a factor variable









for (i in as.character(1:12)) {
  data_vessel[,paste0("month_prop_nb_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) {y=table(x); y[names(y)==i]/sum(y)},
              value.var = "MONTH")
                [, .] #proportion of time the month of interest was visited among all fishing events
                  ]
}





for (i in as.character(1:12)) {
  data_vessel[,paste0("month_prop_weight_",i):=0]; #attribution of 0 value by default (no observed visit of the target month)
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_prop_weight_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+MONTH ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [, .[.SD$MONTH==i & !is.na(.SD$MONTH)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the month of interest (in terms of fishing weight), computed only when proven visit of the target month
  data_vessel[is.na(value_weight_year), paste0("month_prop_weight_",i):=NA] #attribution of NA values when data not available to attest for the target month visit
}










for (i in as.character(1:12)) {
  data_vessel[,paste0("month_prop_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_prop_eco_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+MONTH ~ ., 
              fun.aggregate = sumna,
              value.var = "MONTANT_EUROS_SACROIS")
                [, .[.SD$MONTH==i & !is.na(.SD$MONTH)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the month of interest (in terms of fishing economic value)
  data_vessel[is.na(value_eco_year), paste0("month_prop_eco_",i):=NA] 
}






for (i in as.character(1:12)) {
    data_vessel[,paste0("month_prop_effort_",i):=
                  SACROIS[, sumna(TP_NAVIRE_SACROIS[.SD$MONTH==i][!duplicated(.SD$SEQ_ID)])/sumna(TP_NAVIRE_SACROIS[!duplicated(.SD$SEQ_ID)]), by= NAVS_COD_YEAR] #selecting only one occurrence in the sequence to avoid accounting several time the same effort
                    [,V1]
                      ]; #catches proportion in the month of interest (in terms of fishing effort)
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))==0, paste0("month_prop_effort_",i):=0] #attribution of 0 value when no observed visit of the target month (NA values attributed when no data available on visited month and/or fishing effort)
  data_vessel[is.na(value_effort_year), paste0("month_prop_effort_",i):=NA] #NA attributed when data on month is available but no data on fishing effort is available 
}

#Method use here way more efficient !!!!! => to be applied to all other functions ?





for (i in as.character(1:12)) {
  data_vessel[,paste0("month_prop_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_prop_weight.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+MONTH ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_POIDS")
                [, .[.SD$MONTH==i & !is.na(.SD$MONTH)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the month of interest (in terms of fishing productivity)
  data_vessel[is.na(value_weight.prod_year), paste0("month_prop_weight.prod_",i):=NA] 
}






for (i in as.character(1:12)) {
  data_vessel[,paste0("month_prop_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_prop_eco.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+MONTH ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_ECO")
                [, .[.SD$MONTH==i & !is.na(.SD$MONTH)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the month of interest (in terms of fishing productivity)
  data_vessel[is.na(value_eco.prod_year), paste0("month_prop_eco.prod_",i):=NA] 
}



















for (i in as.character(1:12)) {
  data_vessel[,paste0("month_weight_",i):=0]; #attribution of 0 value by default (no observed visit of the target month)
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_weight_",i):=
            SACROIS[MONTH==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the month of interest (in terms of fishing weight), computed only when proven visit of the target month
  data_vessel[is.na(value_weight_year), paste0("month_weight_",i):=NA] #attribution of NA values when data not available to attest for the target month visit
}


#Alternative way to compute proportion metrics: prop_weight_i=weight_i/weight_year, way faster !)





for (i in as.character(1:12)) {
  data_vessel[,paste0("month_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_eco_",i):=
            SACROIS[MONTH==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the month of interest (in terms of fishing economic values), computed only when proven visit of the target month
  data_vessel[is.na(value_eco_year), paste0("month_eco_",i):=NA]
}






for (i in as.character(1:12)) {
  data_vessel[,paste0("month_effort_",i):=0]; 
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_effort_",i):=
            SACROIS[MONTH==i,][!duplicated(SEQ_ID), sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the month of interest (in terms of fishing effort), computed only when proven visit of the target month
  data_vessel[is.na(value_effort_year), paste0("month_effort_",i):=NA]
}







for (i in as.character(1:12)) {
  data_vessel[,paste0("month_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_weight.prod_",i):=
            SACROIS[MONTH==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the month of interest (in terms of fishing productivity), computed only when proven visit of the target month
  data_vessel[is.na(value_weight.prod_year), paste0("month_weight.prod_",i):=NA]
}






for (i in as.character(1:12)) {
  data_vessel[,paste0("month_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_eco.prod_",i):=
            SACROIS[MONTH==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the month of interest (in terms of fishing economic productivity), computed only when proven visit of the target month
  data_vessel[is.na(value_eco.prod_year), paste0("month_eco.prod_",i):=NA]
}











#mean values at the sequence level are also computed to obtain estimate less biased by missing values:





for (i in as.character(1:12)) {
  data_vessel[,paste0("month_prop_nb_",i,"_seq"):=
            SACROIS[, sumna(MONTH==i)/length(na.omit(MONTH)), by= .(NAVS_COD_YEAR,SEQ_ID)][, mean(V1, na.rm=T), by= NAVS_COD_YEAR] #proportion in month occurrence for each sequence
              [,V1]
                ]# mean proportion of time the month of interest was visited among all fishing sequence
}


#all variables computed at the sequence level (average value) are computationally expensive: expect about 20-40 minutes per loop...









for (i in as.character(1:12)) {
  data_vessel[,paste0("month_prop_weight_",i,"_seq"):=
                SACROIS[, sumna(QUANT_POIDS_VIF_SACROIS[MONTH==i])/sumna(QUANT_POIDS_VIF_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1] # mean proportion (in terms of fishing weight) of month of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))==0,paste0("month_prop_weight_",i,"_seq"):=0]; #attribution of 0 value when no observed visit of the target month (NA values attributed when no data available on visited month and/or fishing effort)
  data_vessel[is.na(value_weight_year), paste0("month_prop_weight_",i):=NA] #NA attributed when data on month is available but no data on fishing weight is available
}













for (i in as.character(1:12)) {
  data_vessel[,paste0("month_prop_eco_",i,"_seq"):=
                SACROIS[, sumna(MONTANT_EUROS_SACROIS[MONTH==i])/sumna(MONTANT_EUROS_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing economic value) of month of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))==0,paste0("month_prop_eco_",i,"_seq"):=0];
  data_vessel[is.na(value_eco_year), paste0("month_prop_eco_",i):=NA]
}









for (i in as.character(1:12)) {
  data_vessel[,paste0("month_prop_weight.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_POIDS[MONTH==i])/sumna(PROD_POIDS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of month of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))==0,paste0("month_prop_weight.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_weight.prod_year), paste0("month_prop_weight.prod_",i):=NA]
}







for (i in as.character(1:12)) {
  data_vessel[,paste0("month_prop_eco.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_ECO[MONTH==i])/sumna(PROD_ECO), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of month of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))==0,paste0("month_prop_eco.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_eco.prod_year), paste0("month_prop_eco.prod_",i):=NA]
}


















for (i in as.character(1:12)) {
  data_vessel[,paste0("month_weight_",i,"_seq"):=0]; #attribution of 0 value by default (no observed visit of the target month)
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_weight_",i,"_seq"):=
            SACROIS[MONTH==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(MONTH)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] #for vessels of interest, all sequences with identified month
                          [,V1/pres] ]; #mean fishing weight of the month of interest between sequences, computed only when proven visit of the target month
  data_vessel[is.na(value_weight_year), paste0("month_weight_",i,"_seq"):=NA] #attribution of NA values when data not available to attest for the target month visit
}





for (i in as.character(1:12)) {
  data_vessel[,paste0("month_eco_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_eco_",i,"_seq"):=
            SACROIS[MONTH==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(MONTH)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic value of the month of interest between sequences, computed only when proven visit of the target month
  data_vessel[is.na(value_eco_year), paste0("month_eco_",i,"_seq"):=NA] 
}






for (i in as.character(1:12)) {
  data_vessel[,paste0("month_effort_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_effort_",i,"_seq"):=
            SACROIS[MONTH==i,]
              [!duplicated(SEQ_ID),sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR]
                [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(MONTH)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                  [,V1/pres] ]; #mean fishing effort of the month of interest between sequences, computed only when proven visit of the target month
  data_vessel[is.na(value_effort_year), paste0("month_effort_",i,"_seq"):=NA] 
}







for (i in as.character(1:12)) {
  data_vessel[,paste0("month_weight.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_weight.prod_",i,"_seq"):=
            SACROIS[MONTH==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(MONTH)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing productivity of the month of interest between sequences, computed only when proven visit of the target month
  data_vessel[is.na(value_weight.prod_year), paste0("month_weight.prod_",i,"_seq"):=NA] 
}







for (i in as.character(1:12)) {
  data_vessel[,paste0("month_eco.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_eco.prod_",i,"_seq"):=
            SACROIS[MONTH==i, sumna(PROD_ECO), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(MONTH)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic productivity of the month of interest between sequences, computed only when proven visit of the target month
  data_vessel[is.na(value_eco.prod_year), paste0("month_eco.prod_",i,"_seq"):=NA] 
}












#### We also add other metrics of activity previously computed (number and main engine, species, family / only at year scale):


#To be noticed: the following metrics are applicable only if there is activity in the area of interest, they are therefore applicable only in a subset of vessels and should be of interest only for subfleet classification when precising specific fleet behaviors 






for (i in as.character(1:12)) {
  data_vessel[,paste0("month_nb_spe_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0,paste0("month_nb_spe_",i):=
            dcast(SACROIS[MONTH==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "ESP2_COD_FAO")
                [, .] #number of species in the month of interest among all fishing events
                  ]
}






for (i in as.character(1:12)) {
  data_vessel[,paste0("month_simpson_weight_spe_",i):=NA_real_];
  data_vessel[eval(as.name(paste0("month_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("month_nb_spe_",i)))), paste0("month_simpson_weight_spe_",i):=
            dcast(SACROIS[MONTH==i,],
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(ESP2_COD_FAO)]
                  [!is.na(.)]
                    [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                      [,V1] #species diversity (simpson index, weight as abundance) in the month of interest among all fishing events
            ]
}





for (i in as.character(1:12)) {
  data_vessel[,paste0("month_main_spe_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("month_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("month_nb_spe_",i)))), paste0("month_main_spe_weight_",i):=
            dcast(SACROIS[MONTH==i,],
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(ESP2_COD_FAO) & !is.na(.)]
                  [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] #main fished species (in fishing weight) in the month of interest among all fishing events
            ]
}














for (i in as.character(1:12)) {
  data_vessel[,paste0("month_nb_family_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0,paste0("month_nb_family_",i):=
            dcast(SACROIS[MONTH==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "FAMILY_COD_FAO")
                [, .] #number of family in the month of interest among all fishing events
                  ]
}





for (i in as.character(1:12)) {
  data_vessel[,paste0("month_simpson_weight_family_",i):=NA_real_];
  data_vessel[eval(as.name(paste0("month_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("month_nb_family_",i)))),paste0("month_simpson_weight_family_",i):=
            dcast(SACROIS[MONTH==i,],
              NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(FAMILY_COD_FAO)]
                  [!is.na(.)]
                    [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                      [,V1] #family diversity (simpson index, weight as abundance) in the month of interest among all fishing events
            ]
}




for (i in as.character(1:12)) {
  data_vessel[,paste0("month_main_family_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("month_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("month_nb_family_",i)))), paste0("month_main_family_weight_",i):=
            dcast(SACROIS[MONTH==i,],
            NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(FAMILY_COD_FAO) & !is.na(.)]
                  [,.(.==max(.),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] #main fished family (in fishing weight) in the month of interest among all fishing events
            ]
}









for (i in as.character(1:12)) {
  data_vessel[,paste0("month_nb_engine_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0,paste0("month_nb_engine_",i):=
            dcast(SACROIS[MONTH==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "ENGIN_COD")
                [, .] #number of used engines in the month of interest among all fishing events
                  ]
}








for (i in as.character(1:12)) {
  data_vessel[,paste0("month_main_engine_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("month_prop_weight_",i)))>0 & eval(as.name(paste0("month_nb_engine_",i)))>0, paste0("month_main_engine_weight_",i):=
            dcast(SACROIS[MONTH==i,],
            NAVS_COD_YEAR+ENGIN_COD ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(.)]
                  [,.(.==max(.),ENGIN_COD),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),ENGIN_COD] #main used engine (in fishing weight) in the month of interest among all fishing events
            ]
}













for (i in as.character(1:12)) {
  data_vessel[,paste0("month_main_ICES_div_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("month_prop_weight_",i)))>0, paste0("month_main_ICES_div_weight_",i):=
            dcast(SACROIS[MONTH==i,],
            NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3 ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(.)]
                  [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV3] #main visited ICES division (in fishing weight) in the month of interest among all fishing events
            ]
}










for (i in as.character(1:12)) {
  data_vessel[,paste0("month_nb_rect_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0,paste0("month_nb_rect_",i):=
            dcast(SACROIS[MONTH==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "SECT_COD_SACROIS_NIV5")
                [, .] #number of visited statistic rectangles in the month of interest among all fishing events
                  ]
}






for (i in as.character(1:12)) {
  data_vessel[eval(as.name(paste0("month_prop_nb_",i)))>0, paste0("month_main_rect_weight_",i):=
            dcast(SACROIS[MONTH==i,],
            NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5 ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                  [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                    [,.(.==maxna(.),SECT_COD_SACROIS_NIV5),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)]
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV5] #main visited statistic rectangle (in fishing weight) in the month of interest among all fishing events
            ]
}







```





##### Main fishing trimester 




```{r temporal metrics - Days/trimesters/trimesters at sea - Main trimester}

#a) Month:






data_vessel[,main_trimester_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], #to not count several time the same fishing sequence (where trimester is constant) 
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = length,
        value.var = "TRIMESTRE")
          [!is.na(TRIMESTRE)]
            [,.(.==max(.),TRIMESTRE),by = NAVS_COD_YEAR]
              [V1==T] #selection of maximal values
                [!duplicated(NAVS_COD_YEAR),TRIMESTRE] ] #selection of the first maximal values (by alphabetical order)
 #assigns the main trimester (in marees number) in a year for each vessel








#warning: important amount of vessels with missing data for the subsequent metrics



data_vessel[,main_trimester_effort_year:=NA_character_]

data_vessel[!is.na(value_effort_year),main_trimester_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,.(.==max(.),TRIMESTRE),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),TRIMESTRE] ]
#assigns the main trimester (in fishing effort) in a year for each vessel





data_vessel[,main_trimester_weight_year:=NA_character_]

data_vessel[!is.na(value_weight_year),main_trimester_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,.(.==max(.),TRIMESTRE),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),TRIMESTRE] ]
#assigns the main trimester (in fishing weight) in a year for each vessel







data_vessel[,main_trimester_weight.prod_year:=NA_character_]

data_vessel[!is.na(value_weight.prod_year),main_trimester_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,.(.==max(.),TRIMESTRE),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),TRIMESTRE] ]
#assigns the main trimester (in fishing productivity) in a year for each vessel







data_vessel[,main_trimester_eco_year:=NA_character_]

data_vessel[!is.na(value_eco_year),main_trimester_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,.(.==max(.),TRIMESTRE),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),TRIMESTRE] ]
 #assigns the main trimester (in fishing economic value) in a year for each vessel






data_vessel[,main_trimester_eco.prod_year:=NA_character_]

data_vessel[!is.na(value_eco.prod_year),main_trimester_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,.(.==max(.),TRIMESTRE),by = NAVS_COD_YEAR]
              [V1==T]
                [!duplicated(NAVS_COD_YEAR),TRIMESTRE] ]
#assigns the main trimester (in fishing economic productivity) in a year for each vessel


















data_vessel[,prop_trimester_nb_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)], 
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = length,
        value.var = "TRIMESTRE")
          [!is.na(TRIMESTRE)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ] #selection of maximal values
#assigns the proportion of the main trimester (in maree number) in a year for each vessel










data_vessel[,prop_trimester_weight_year:=NA_real_]

data_vessel[!is.na(value_weight_year),prop_trimester_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the proportion of the main trimester (in fishing weight) in a year for each vessel









data_vessel[,prop_trimester_weight.prod_year:=NA_real_]

data_vessel[!is.na(value_weight.prod_year),prop_trimester_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main trimester (in fishing productivity) in a year for each vessel













data_vessel[,prop_trimester_eco_year:=NA_real_]

data_vessel[!is.na(value_eco_year),prop_trimester_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main trimester (in fishing economic value) in a year for each vessel










data_vessel[,prop_trimester_eco.prod_year:=NA_real_]

data_vessel[!is.na(value_eco.prod_year),prop_trimester_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,max(.)/sum(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the main trimester (in fishing economic productivity) in a year for each vessel














data_vessel[,value_main_trimester_effort_year:=NA_real_]

data_vessel[!is.na(value_effort_year),value_main_trimester_effort_year:=
  dcast(SACROIS[!duplicated(SEQ_ID)],
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
  #assigns the fishing effort value of the main trimester in a year for each vessel





data_vessel[,prop_trimester_effort_year:=value_main_trimester_effort_year/effort_year]


 #assigns the proportion of the main trimester (in fishing effort) in a year for each vessel




data_vessel[,value_main_trimester_weight_year:=NA_real_]

data_vessel[!is.na(value_weight_year),value_main_trimester_weight_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing weight value of the main trimester in a year for each vessel







data_vessel[,value_main_trimester_weight.prod_year:=NA_real_]

data_vessel[!is.na(value_weight.prod_year),value_main_trimester_weight.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
 #assigns the fishing productivity of the main trimester in a year for each vessel











data_vessel[,value_main_trimester_eco_year:=NA_real_]

data_vessel[!is.na(value_eco_year),value_main_trimester_eco_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic value of the main trimester in a year for each vessel










data_vessel[,value_main_trimester_eco.prod_year:=NA_real_]

data_vessel[!is.na(value_eco.prod_year),value_main_trimester_eco.prod_year:=
  dcast(SACROIS,
        NAVS_COD_YEAR+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,max(.),by = NAVS_COD_YEAR]
              [,V1] ]
#assigns the fishing economic productivity of the main trimester in a year for each vessel















#No need of considering trip or sequence scale as month or trimester rarely change within it, we only considered mean at the sequence scale to better handle missing values:






data_vessel[,main_mean_trimester_effort_seq:=NA_character_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_effort_year),main_mean_trimester_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+TRIMESTRE+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [!is.na(TRIMESTRE) & !is.na(.)]
            [,mean(.),by = .(NAVS_COD_YEAR,TRIMESTRE)]
              [ ,.(V1==max(V1),TRIMESTRE),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), TRIMESTRE] ]
#assigns the main trimester using mean fishing effort between sequences for each vessel











data_vessel[,main_mean_trimester_weight_seq:=NA_character_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_weight_year),main_mean_trimester_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(V1==max(V1),TRIMESTRE),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), TRIMESTRE] ] #assigns the main trimester using mean fishing weight between fishing sequences for each vessel













data_vessel[,main_mean_trimester_weight.prod_seq:=NA_character_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_weight.prod_year),main_mean_trimester_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(V1==max(V1),TRIMESTRE),by= NAVS_COD_YEAR]             
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), TRIMESTRE] ]
#assigns the main trimester using mean fishing productivity between sequences for each vessel
















data_vessel[,main_mean_trimester_eco_seq:=NA_character_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_eco_year),main_mean_trimester_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(V1==max(V1),TRIMESTRE),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), TRIMESTRE] ] #assigns the main trimester using mean fishing economic value between fishing sequences for each vessel













data_vessel[,main_mean_trimester_eco.prod_seq:=NA_character_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_eco.prod_year),main_mean_trimester_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [, mean(., na.rm=T), by=.(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(V1==max(V1),TRIMESTRE),by= NAVS_COD_YEAR]              
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR), TRIMESTRE] ]
#assigns the main trimester using mean fishing economic productivity between sequences for each vessel


















data_vessel[,prop_mean_trimester_effort_seq:=NA_real_]


data_vessel[!is.na(sea_trimesters_year) & !is.na(value_effort_year),prop_mean_trimester_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+TRIMESTRE+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1)),by= NAVS_COD_YEAR]             
                [, V1] ]

 #assigns the proportion of main trimester (using mean fishing effort between sequence) among sequence for each vessel









data_vessel[,prop_mean_trimester_weight_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_weight_year),prop_mean_trimester_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),TRIMESTRE),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main trimester (using mean fishing weight between sequence) among sequence for each vessel











data_vessel[,prop_mean_trimester_weight.prod_seq:=NA_real_]


data_vessel[!is.na(sea_trimesters_year) & !is.na(value_weight.prod_year),prop_mean_trimester_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),TRIMESTRE),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main trimester (using mean fishing productivity between sequence) among sequence for each vessel











data_vessel[,prop_mean_trimester_eco_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_eco_year),prop_mean_trimester_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),TRIMESTRE),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]
 #assigns the proportion of main trimester (using mean fishing economic value between sequence) among sequence for each vessel






data_vessel[,prop_mean_trimester_eco.prod_seq:=NA_real_]


data_vessel[!is.na(sea_trimesters_year) & !is.na(value_eco.prod_year),prop_mean_trimester_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(max(V1)/sum(V1),TRIMESTRE),by= NAVS_COD_YEAR]             
                [!duplicated(NAVS_COD_YEAR),V1] ]

 #assigns the proportion of main trimester (using mean fishing economic productivity between sequence) among sequence for each vessel















data_vessel[,value_mean_trimester_effort_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_effort_year),value_mean_trimester_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+TRIMESTRE+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, mean(., na.rm=T), by= .(NAVS_COD_YEAR, TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main trimester using mean fishing effort between fishing sequences for each vessel













data_vessel[,value_mean_trimester_weight_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_weight_year),value_mean_trimester_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing weight value of main trimester using mean fishing weight between fishing sequences for each vessel











data_vessel[,value_mean_trimester_weight.prod_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_weight.prod_year),value_mean_trimester_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main trimester using mean fishing productivity between fishing sequences for each vessel







data_vessel[,value_mean_trimester_eco_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_eco_year),value_mean_trimester_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]
 #assigns the fishing economic value of main trimester using mean fishing economic value between fishing sequences for each vessel











data_vessel[,value_mean_trimester_eco.prod_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_eco.prod_year),value_mean_trimester_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,mean(., na.rm=T), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,max(V1),by= NAVS_COD_YEAR]             
                [,V1] ]  #assigns the fishing effort value of main trimester using mean fishing economic productivity between fishing sequences for each vessel



















data_vessel[,sd_mean_trimester_effort_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_effort_year),sd_mean_trimester_effort_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+TRIMESTRE+SEQ_ID~., 
        fun.aggregate = function(x) x[1],
        value.var = "TP_NAVIRE_SACROIS")
          [, .(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR, TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing effort value of main trimester using mean fishing effort between fishing sequences for each vessel









data_vessel[,sd_mean_trimester_weight_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_weight_year),sd_mean_trimester_weight_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "QUANT_POIDS_VIF_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing weight value of main trimester using mean fishing weight between fishing sequences for each vessel










data_vessel[,sd_mean_trimester_weight.prod_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_weight.prod_year),sd_mean_trimester_weight.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_POIDS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]      #assigns the variation (sd) in fishing productivity value of main trimester using mean fishing productivity between fishing sequences for each vessel















data_vessel[,sd_mean_trimester_eco_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_eco_year),sd_mean_trimester_eco_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "MONTANT_EUROS_SACROIS")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]    #assigns the variation (sd) in fishing economic value of main trimester using mean fishing economic value between fishing sequences for each vessel












data_vessel[,sd_mean_trimester_eco.prod_seq:=NA_real_]

data_vessel[!is.na(sea_trimesters_year) & !is.na(value_eco.prod_year),sd_mean_trimester_eco.prod_seq:=
  dcast(SACROIS, 
        NAVS_COD_YEAR+SEQ_ID+TRIMESTRE~., 
        fun.aggregate = sumna,
        value.var = "PROD_ECO")
          [,.(mean(., na.rm=T),pop.sd(na.omit(.))), by= .(NAVS_COD_YEAR,TRIMESTRE)]
            [!is.na(TRIMESTRE) & !is.na(V1)]
              [ ,.(max(V1)==V1, V2),by= NAVS_COD_YEAR]
                [V1==T]
                  [!duplicated(NAVS_COD_YEAR),V2] ]   #assigns the variation (sd) in fishing economic productivity value of main trimester using mean fishing economic productivity between fishing sequences for each vessel








```




###### Associated trimesters


```{r temporal metrics - Days/months/trimesters at sea - Associated trimesters}









basket=tapply(SACROIS$TRIMESTRE, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE)

names(basket)=NULL

basket=list(basket)

basket=unlist(basket, recursive = F)

names(basket)=names(tapply(SACROIS$TRIMESTRE, SACROIS$NAVS_COD_YEAR, unique, simplify = FALSE))

#creation of a "basket" of visited statistical rectangle (all statistical rectangle visited at least once for each vessels)



trans <- as(basket, "transactions") #transaction class for association rule modelling

summary(trans)
image(trans)
itemFrequencyPlot(trans, topN=20,  cex.names=1)

rules <- apriori(trans, 
                 parameter = list(supp=0.05, conf=0.5, 
                                  maxlen=2, 
                                  target= "rules"))

summary(rules)
inspect(rules)

plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")



rules_chi2 <- apriori(trans, parameter = list(supp = 0.1, conf = 0.8,minlen=2,maxlen=2, arem = "chi2"))

#secondary selection of selection statistically supported by chi-squared tests
#support: probability threshold of the combination on the whole dataset => set on default parameter
#conf: probability threshold for the association (A knowing B)  => set on default parameter


used_trimester=union(as.vector(unique(inspect(rules_chi2)$lhs)),as.vector(unique(inspect(rules_chi2)$rhs)))
#all engine implied in a relevant association


used_trimester= str_extract(used_trimester, pattern="(?<=\\{)(.*)(?=\\})" )



#there is significant association of all trimester, except winter



remove(list=c("basket","rules", "rules_chi2","trans")) # removes elements without any more use, to avoid memory overload
gc()




















#Most of vessels are active three trimesters per year, as a consequence it could be interesting to understand how their activity are distributed among these trimester (i.e. among seasons):





SACROIS[,TRIMESTRE:=as.factor(SACROIS$TRIMESTRE)]
#to properly consider the cases where vessels are not active in a given timing, periods must be considered as a factor variable









for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_prop_nb_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) {y=table(x); y[names(y)==i]/sum(y)},
              value.var = "TRIMESTRE")
                [, .] #proportion of time the trimester of interest was visited among all fishing events
                  ]
}





for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_prop_weight_",i):=0]; #attribution of 0 value by default (no observed visit of the target trimester)
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_prop_weight_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+TRIMESTRE ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [, .[.SD$TRIMESTRE==i & !is.na(.SD$TRIMESTRE)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the trimester of interest (in terms of fishing weight), computed only when proven visit of the target trimester
  data_vessel[is.na(value_weight_year), paste0("trimester_prop_weight_",i):=NA] #attribution of NA values when data not available to attest for the target trimester visit
}










for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_prop_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_prop_eco_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+TRIMESTRE ~ ., 
              fun.aggregate = sumna,
              value.var = "MONTANT_EUROS_SACROIS")
                [, .[.SD$TRIMESTRE==i & !is.na(.SD$TRIMESTRE)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the trimester of interest (in terms of fishing economic value)
  data_vessel[is.na(value_eco_year), paste0("trimester_prop_eco_",i):=NA] 
}






for (i in as.character(1:4)) {
    data_vessel[,paste0("trimester_prop_effort_",i):=
                  SACROIS[, sumna(TP_NAVIRE_SACROIS[.SD$TRIMESTRE==i][!duplicated(.SD$SEQ_ID)])/sumna(TP_NAVIRE_SACROIS[!duplicated(.SD$SEQ_ID)]), by= NAVS_COD_YEAR] #selecting only one occurrence in the sequence to avoid accounting several time the same effort
                    [,V1]
                      ]; #catches proportion in the trimester of interest (in terms of fishing effort)
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))==0, paste0("trimester_prop_effort_",i):=0] #attribution of 0 value when no observed visit of the target trimester (NA values attributed when no data available on visited trimester and/or fishing effort)
  data_vessel[is.na(value_effort_year), paste0("trimester_prop_effort_",i):=NA] #NA attributed when data on trimester is available but no data on fishing effort is available 
}

#Method use here way more efficient !!!!! => to be applied to all other functions ?





for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_prop_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_prop_weight.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+TRIMESTRE ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_POIDS")
                [, .[.SD$TRIMESTRE==i & !is.na(.SD$TRIMESTRE)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the trimester of interest (in terms of fishing productivity)
  data_vessel[is.na(value_weight.prod_year), paste0("trimester_prop_weight.prod_",i):=NA] 
}






for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_prop_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_prop_eco.prod_",i):=
            dcast(SACROIS,
              NAVS_COD_YEAR+TRIMESTRE ~ ., 
              fun.aggregate = sumna,
              value.var = "PROD_ECO")
                [, .[.SD$TRIMESTRE==i & !is.na(.SD$TRIMESTRE)]/sumna(.), by= NAVS_COD_YEAR]
                  [, V1] 
                    ]; #catches proportion in the trimester of interest (in terms of fishing productivity)
  data_vessel[is.na(value_eco.prod_year), paste0("trimester_prop_eco.prod_",i):=NA] 
}



















for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_weight_",i):=0]; #attribution of 0 value by default (no observed visit of the target trimester)
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_weight_",i):=
            SACROIS[TRIMESTRE==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the trimester of interest (in terms of fishing weight), computed only when proven visit of the target trimester
  data_vessel[is.na(value_weight_year), paste0("trimester_weight_",i):=NA] #attribution of NA values when data not available to attest for the target trimester visit
}


#Alternative way to compute proportion metrics: prop_weight_i=weight_i/weight_year, way faster !)





for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_eco_",i):=0]; 
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_eco_",i):=
            SACROIS[TRIMESTRE==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the trimester of interest (in terms of fishing economic values), computed only when proven visit of the target trimester
  data_vessel[is.na(value_eco_year), paste0("trimester_eco_",i):=NA]
}






for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_effort_",i):=0]; 
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_effort_",i):=
            SACROIS[TRIMESTRE==i,][!duplicated(SEQ_ID), sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the trimester of interest (in terms of fishing effort), computed only when proven visit of the target trimester
  data_vessel[is.na(value_effort_year), paste0("trimester_effort_",i):=NA]
}







for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_weight.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_weight.prod_",i):=
            SACROIS[TRIMESTRE==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the trimester of interest (in terms of fishing productivity), computed only when proven visit of the target trimester
  data_vessel[is.na(value_weight.prod_year), paste0("trimester_weight.prod_",i):=NA]
}






for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_eco.prod_",i):=0]; 
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_eco.prod_",i):=
            SACROIS[TRIMESTRE==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR][,V1] ]; #catches proportion in the trimester of interest (in terms of fishing economic productivity), computed only when proven visit of the target trimester
  data_vessel[is.na(value_eco.prod_year), paste0("trimester_eco.prod_",i):=NA]
}











#mean values at the sequence level are also computed to obtain estimate less biased by missing values:





for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_prop_nb_",i,"_seq"):=
            SACROIS[, sumna(TRIMESTRE==i)/length(na.omit(TRIMESTRE)), by= .(NAVS_COD_YEAR,SEQ_ID)][, mean(V1, na.rm=T), by= NAVS_COD_YEAR] #proportion in trimester occurrence for each sequence
              [,V1]
                ]# mean proportion of time the trimester of interest was visited among all fishing sequence
}


#all variables computed at the sequence level (average value) are computationally expensive: expect about 20-40 minutes per loop...









for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_prop_weight_",i,"_seq"):=
                SACROIS[, sumna(QUANT_POIDS_VIF_SACROIS[TRIMESTRE==i])/sumna(QUANT_POIDS_VIF_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1] # mean proportion (in terms of fishing weight) of trimester of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))==0,paste0("trimester_prop_weight_",i,"_seq"):=0]; #attribution of 0 value when no observed visit of the target trimester (NA values attributed when no data available on visited trimester and/or fishing effort)
  data_vessel[is.na(value_weight_year), paste0("trimester_prop_weight_",i):=NA] #NA attributed when data on trimester is available but no data on fishing weight is available
}













for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_prop_eco_",i,"_seq"):=
                SACROIS[, sumna(MONTANT_EUROS_SACROIS[TRIMESTRE==i])/sumna(MONTANT_EUROS_SACROIS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing economic value) of trimester of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))==0,paste0("trimester_prop_eco_",i,"_seq"):=0];
  data_vessel[is.na(value_eco_year), paste0("trimester_prop_eco_",i):=NA]
}









for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_prop_weight.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_POIDS[TRIMESTRE==i])/sumna(PROD_POIDS), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of trimester of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))==0,paste0("trimester_prop_weight.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_weight.prod_year), paste0("trimester_prop_weight.prod_",i):=NA]
}







for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_prop_eco.prod_",i,"_seq"):=
                SACROIS[, sumna(PROD_ECO[TRIMESTRE==i])/sumna(PROD_ECO), by= .(NAVS_COD_YEAR,SEQ_ID)]
                  [, mean(V1, na.rm=T), by= NAVS_COD_YEAR]
                    [,V1]# mean proportion (in terms of fishing productivity) of trimester of interest among all fishing sequence
                      ];
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))==0,paste0("trimester_prop_eco.prod_",i,"_seq"):=0];
  data_vessel[is.na(value_eco.prod_year), paste0("trimester_prop_eco.prod_",i):=NA]
}


















for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_weight_",i,"_seq"):=0]; #attribution of 0 value by default (no observed visit of the target trimester)
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_weight_",i,"_seq"):=
            SACROIS[TRIMESTRE==i, sumna(QUANT_POIDS_VIF_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(TRIMESTRE)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] #for vessels of interest, all sequences with identified trimester
                          [,V1/pres] ]; #mean fishing weight of the trimester of interest between sequences, computed only when proven visit of the target trimester
  data_vessel[is.na(value_weight_year), paste0("trimester_weight_",i,"_seq"):=NA] #attribution of NA values when data not available to attest for the target trimester visit
}





for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_eco_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_eco_",i,"_seq"):=
            SACROIS[TRIMESTRE==i, sumna(MONTANT_EUROS_SACROIS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(TRIMESTRE)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic value of the trimester of interest between sequences, computed only when proven visit of the target trimester
  data_vessel[is.na(value_eco_year), paste0("trimester_eco_",i,"_seq"):=NA] 
}






for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_effort_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_effort_",i,"_seq"):=
            SACROIS[TRIMESTRE==i,]
              [!duplicated(SEQ_ID),sumna(TP_NAVIRE_SACROIS), by= NAVS_COD_YEAR]
                [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(TRIMESTRE)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                  [,V1/pres] ]; #mean fishing effort of the trimester of interest between sequences, computed only when proven visit of the target trimester
  data_vessel[is.na(value_effort_year), paste0("trimester_effort_",i,"_seq"):=NA] 
}







for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_weight.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_weight.prod_",i,"_seq"):=
            SACROIS[TRIMESTRE==i, sumna(PROD_POIDS), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(TRIMESTRE)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing productivity of the trimester of interest between sequences, computed only when proven visit of the target trimester
  data_vessel[is.na(value_weight.prod_year), paste0("trimester_weight.prod_",i,"_seq"):=NA] 
}







for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_eco.prod_",i,"_seq"):=0]; 
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_eco.prod_",i,"_seq"):=
            SACROIS[TRIMESTRE==i, sumna(PROD_ECO), by= NAVS_COD_YEAR]
                      [, pres:=SACROIS[NAVS_COD_YEAR %in% .SD$NAVS_COD_YEAR,][,!all(is.na(TRIMESTRE)), by= .(NAVS_COD_YEAR,SEQ_ID)][,sum(V1), by=NAVS_COD_YEAR][,V1]] 
                          [,V1/pres] ]; #mean fishing economic productivity of the trimester of interest between sequences, computed only when proven visit of the target trimester
  data_vessel[is.na(value_eco.prod_year), paste0("trimester_eco.prod_",i,"_seq"):=NA] 
}












#### We also add other metrics of activity previously computed (number and main engine, species, family / only at year scale):


#To be noticed: the following metrics are applicable only if there is activity in the area of interest, they are therefore applicable only in a subset of vessels and should be of interest only for subfleet classification when precising specific fleet behaviors 






for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_nb_spe_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0,paste0("trimester_nb_spe_",i):=
            dcast(SACROIS[TRIMESTRE==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "ESP2_COD_FAO")
                [, .] #number of species in the trimester of interest among all fishing events
                  ]
}






for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_simpson_weight_spe_",i):=NA_real_];
  data_vessel[eval(as.name(paste0("trimester_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("trimester_nb_spe_",i)))), paste0("trimester_simpson_weight_spe_",i):=
            dcast(SACROIS[TRIMESTRE==i,],
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(ESP2_COD_FAO)]
                  [!is.na(.)]
                    [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                      [,V1] #species diversity (simpson index, weight as abundance) in the trimester of interest among all fishing events
            ]
}





for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_main_spe_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("trimester_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("trimester_nb_spe_",i)))), paste0("trimester_main_spe_weight_",i):=
            dcast(SACROIS[TRIMESTRE==i,],
              NAVS_COD_YEAR+ESP2_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(ESP2_COD_FAO) & !is.na(.)]
                  [,.(.==max(.),ESP2_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),ESP2_COD_FAO] #main fished species (in fishing weight) in the trimester of interest among all fishing events
            ]
}














for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_nb_family_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0,paste0("trimester_nb_family_",i):=
            dcast(SACROIS[TRIMESTRE==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "FAMILY_COD_FAO")
                [, .] #number of family in the trimester of interest among all fishing events
                  ]
}





for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_simpson_weight_family_",i):=NA_real_];
  data_vessel[eval(as.name(paste0("trimester_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("trimester_nb_family_",i)))),paste0("trimester_simpson_weight_family_",i):=
            dcast(SACROIS[TRIMESTRE==i,],
              NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(FAMILY_COD_FAO)]
                  [!is.na(.)]
                    [,diversity(., index = "simpson"), by = NAVS_COD_YEAR]
                      [,V1] #family diversity (simpson index, weight as abundance) in the trimester of interest among all fishing events
            ]
}




for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_main_family_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("trimester_prop_weight_",i)))>0 & !is.na(eval(as.name(paste0("trimester_nb_family_",i)))), paste0("trimester_main_family_weight_",i):=
            dcast(SACROIS[TRIMESTRE==i,],
            NAVS_COD_YEAR+FAMILY_COD_FAO ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(FAMILY_COD_FAO) & !is.na(.)]
                  [,.(.==max(.),FAMILY_COD_FAO),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),FAMILY_COD_FAO] #main fished family (in fishing weight) in the trimester of interest among all fishing events
            ]
}









for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_nb_engine_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0,paste0("trimester_nb_engine_",i):=
            dcast(SACROIS[TRIMESTRE==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "ENGIN_COD")
                [, .] #number of used engines in the trimester of interest among all fishing events
                  ]
}








for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_main_engine_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("trimester_prop_weight_",i)))>0 & eval(as.name(paste0("trimester_nb_engine_",i)))>0, paste0("trimester_main_engine_weight_",i):=
            dcast(SACROIS[TRIMESTRE==i,],
            NAVS_COD_YEAR+ENGIN_COD ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(.)]
                  [,.(.==max(.),ENGIN_COD),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),ENGIN_COD] #main used engine (in fishing weight) in the trimester of interest among all fishing events
            ]
}













for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_main_ICES_div_weight_",i):=NA_character_];
  data_vessel[eval(as.name(paste0("trimester_prop_weight_",i)))>0, paste0("trimester_main_ICES_div_weight_",i):=
            dcast(SACROIS[TRIMESTRE==i,],
            NAVS_COD_YEAR+SECT_COD_SACROIS_NIV3 ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [!is.na(.)]
                  [,.(.==max(.),SECT_COD_SACROIS_NIV3),by = NAVS_COD_YEAR]
                    [V1==T]
                      [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV3] #main visited ICES division (in fishing weight) in the trimester of interest among all fishing events
            ]
}










for (i in as.character(1:4)) {
  data_vessel[,paste0("trimester_nb_rect_",i):=NA_integer_];
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0,paste0("trimester_nb_rect_",i):=
            dcast(SACROIS[TRIMESTRE==i,],
              NAVS_COD_YEAR ~ ., 
              fun.aggregate = function(x) lengthna(unique(na.omit(x))),
              value.var = "SECT_COD_SACROIS_NIV5")
                [, .] #number of visited statistic rectangles in the trimester of interest among all fishing events
                  ]
}






for (i in as.character(1:4)) {
  data_vessel[eval(as.name(paste0("trimester_prop_nb_",i)))>0, paste0("trimester_main_rect_weight_",i):=
            dcast(SACROIS[TRIMESTRE==i,],
            NAVS_COD_YEAR+SECT_COD_SACROIS_NIV5 ~ ., 
              fun.aggregate = sumna,
              value.var = "QUANT_POIDS_VIF_SACROIS")
                [is.na(.), SECT_COD_SACROIS_NIV5:=NA]
                  [is.na(SECT_COD_SACROIS_NIV5), .:=NA]
                    [,.(.==maxna(.),SECT_COD_SACROIS_NIV5),by = NAVS_COD_YEAR]
                      [V1==T | is.na(V1)]
                        [order(NAVS_COD_YEAR, SECT_COD_SACROIS_NIV5, na.last=T)]
                          [!duplicated(NAVS_COD_YEAR),SECT_COD_SACROIS_NIV5] #main visited statistic rectangle (in fishing weight) in the trimester of interest among all fishing events
            ]
}








```




## Registering operational dataset


```{r register}

setwd("~/Data/SACROIS")

saveRDS(data_vessel, "data_vessel_2018_2022.rds")


Sys.time()

```


